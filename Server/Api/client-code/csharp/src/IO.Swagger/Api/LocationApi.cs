/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>List&lt;GeocodedLocation&gt;</returns>
        List<GeocodedLocation> LocationGeocode (string address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>ApiResponse of List&lt;GeocodedLocation&gt;</returns>
        ApiResponse<List<GeocodedLocation>> LocationGeocodeWithHttpInfo (string address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>RouteSummary</returns>
        RouteSummary LocationGetRouteSummary (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>ApiResponse of RouteSummary</returns>
        ApiResponse<RouteSummary> LocationGetRouteSummaryWithHttpInfo (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Isochrone</returns>
        Isochrone LocationIsochrone (IsochroneParams param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>ApiResponse of Isochrone</returns>
        ApiResponse<Isochrone> LocationIsochroneWithHttpInfo (IsochroneParams param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>List&lt;GeocodedLocation&gt;</returns>
        List<GeocodedLocation> LocationReverseGeocode (ReverseGeocodeParams param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;GeocodedLocation&gt;</returns>
        ApiResponse<List<GeocodedLocation>> LocationReverseGeocodeWithHttpInfo (ReverseGeocodeParams param);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>Task of List&lt;GeocodedLocation&gt;</returns>
        System.Threading.Tasks.Task<List<GeocodedLocation>> LocationGeocodeAsync (string address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (List&lt;GeocodedLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeocodedLocation>>> LocationGeocodeAsyncWithHttpInfo (string address);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>Task of RouteSummary</returns>
        System.Threading.Tasks.Task<RouteSummary> LocationGetRouteSummaryAsync (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>Task of ApiResponse (RouteSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<RouteSummary>> LocationGetRouteSummaryAsyncWithHttpInfo (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of Isochrone</returns>
        System.Threading.Tasks.Task<Isochrone> LocationIsochroneAsync (IsochroneParams param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (Isochrone)</returns>
        System.Threading.Tasks.Task<ApiResponse<Isochrone>> LocationIsochroneAsyncWithHttpInfo (IsochroneParams param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;GeocodedLocation&gt;</returns>
        System.Threading.Tasks.Task<List<GeocodedLocation>> LocationReverseGeocodeAsync (ReverseGeocodeParams param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;GeocodedLocation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeocodedLocation>>> LocationReverseGeocodeAsyncWithHttpInfo (ReverseGeocodeParams param);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationApi : ILocationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>List&lt;GeocodedLocation&gt;</returns>
        public List<GeocodedLocation> LocationGeocode (string address)
        {
             ApiResponse<List<GeocodedLocation>> localVarResponse = LocationGeocodeWithHttpInfo(address);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>ApiResponse of List&lt;GeocodedLocation&gt;</returns>
        public ApiResponse< List<GeocodedLocation> > LocationGeocodeWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocationApi->LocationGeocode");

            var localVarPath = "/api/v1/Location/geocode/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeocodedLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GeocodedLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeocodedLocation>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>Task of List&lt;GeocodedLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeocodedLocation>> LocationGeocodeAsync (string address)
        {
             ApiResponse<List<GeocodedLocation>> localVarResponse = await LocationGeocodeAsyncWithHttpInfo(address);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"></param>
        /// <returns>Task of ApiResponse (List&lt;GeocodedLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GeocodedLocation>>> LocationGeocodeAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling LocationApi->LocationGeocode");

            var localVarPath = "/api/v1/Location/geocode/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeocodedLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GeocodedLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeocodedLocation>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>RouteSummary</returns>
        public RouteSummary LocationGetRouteSummary (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null)
        {
             ApiResponse<RouteSummary> localVarResponse = LocationGetRouteSummaryWithHttpInfo(paramOriginLatitude, paramOriginLongitude, paramDestinationLatitude, paramDestinationLongitude);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>ApiResponse of RouteSummary</returns>
        public ApiResponse< RouteSummary > LocationGetRouteSummaryWithHttpInfo (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null)
        {

            var localVarPath = "/api/v1/Location/route/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paramOriginLatitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.originLatitude", paramOriginLatitude)); // query parameter
            if (paramOriginLongitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.originLongitude", paramOriginLongitude)); // query parameter
            if (paramDestinationLatitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.destinationLatitude", paramDestinationLatitude)); // query parameter
            if (paramDestinationLongitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.destinationLongitude", paramDestinationLongitude)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationGetRouteSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RouteSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RouteSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>Task of RouteSummary</returns>
        public async System.Threading.Tasks.Task<RouteSummary> LocationGetRouteSummaryAsync (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null)
        {
             ApiResponse<RouteSummary> localVarResponse = await LocationGetRouteSummaryAsyncWithHttpInfo(paramOriginLatitude, paramOriginLongitude, paramDestinationLatitude, paramDestinationLongitude);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paramOriginLatitude"> (optional)</param>
        /// <param name="paramOriginLongitude"> (optional)</param>
        /// <param name="paramDestinationLatitude"> (optional)</param>
        /// <param name="paramDestinationLongitude"> (optional)</param>
        /// <returns>Task of ApiResponse (RouteSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RouteSummary>> LocationGetRouteSummaryAsyncWithHttpInfo (double? paramOriginLatitude = null, double? paramOriginLongitude = null, double? paramDestinationLatitude = null, double? paramDestinationLongitude = null)
        {

            var localVarPath = "/api/v1/Location/route/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paramOriginLatitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.originLatitude", paramOriginLatitude)); // query parameter
            if (paramOriginLongitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.originLongitude", paramOriginLongitude)); // query parameter
            if (paramDestinationLatitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.destinationLatitude", paramDestinationLatitude)); // query parameter
            if (paramDestinationLongitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "param.destinationLongitude", paramDestinationLongitude)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationGetRouteSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RouteSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RouteSummary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RouteSummary)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Isochrone</returns>
        public Isochrone LocationIsochrone (IsochroneParams param)
        {
             ApiResponse<Isochrone> localVarResponse = LocationIsochroneWithHttpInfo(param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>ApiResponse of Isochrone</returns>
        public ApiResponse< Isochrone > LocationIsochroneWithHttpInfo (IsochroneParams param)
        {
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling LocationApi->LocationIsochrone");

            var localVarPath = "/api/v1/Location/isochrone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationIsochrone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Isochrone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Isochrone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Isochrone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of Isochrone</returns>
        public async System.Threading.Tasks.Task<Isochrone> LocationIsochroneAsync (IsochroneParams param)
        {
             ApiResponse<Isochrone> localVarResponse = await LocationIsochroneAsyncWithHttpInfo(param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (Isochrone)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Isochrone>> LocationIsochroneAsyncWithHttpInfo (IsochroneParams param)
        {
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling LocationApi->LocationIsochrone");

            var localVarPath = "/api/v1/Location/isochrone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationIsochrone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Isochrone>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Isochrone) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Isochrone)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>List&lt;GeocodedLocation&gt;</returns>
        public List<GeocodedLocation> LocationReverseGeocode (ReverseGeocodeParams param)
        {
             ApiResponse<List<GeocodedLocation>> localVarResponse = LocationReverseGeocodeWithHttpInfo(param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;GeocodedLocation&gt;</returns>
        public ApiResponse< List<GeocodedLocation> > LocationReverseGeocodeWithHttpInfo (ReverseGeocodeParams param)
        {
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling LocationApi->LocationReverseGeocode");

            var localVarPath = "/api/v1/Location/reversegeocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationReverseGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeocodedLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GeocodedLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeocodedLocation>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;GeocodedLocation&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeocodedLocation>> LocationReverseGeocodeAsync (ReverseGeocodeParams param)
        {
             ApiResponse<List<GeocodedLocation>> localVarResponse = await LocationReverseGeocodeAsyncWithHttpInfo(param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;GeocodedLocation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GeocodedLocation>>> LocationReverseGeocodeAsyncWithHttpInfo (ReverseGeocodeParams param)
        {
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling LocationApi->LocationReverseGeocode");

            var localVarPath = "/api/v1/Location/reversegeocode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocationReverseGeocode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GeocodedLocation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GeocodedLocation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GeocodedLocation>)));
        }

    }
}

/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridLayerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a grid source to an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>GridSource</returns>
        GridSource GridLayerAddGridSource (string gridLayerId, int? bandNumber, System.IO.Stream _file);

        /// <summary>
        /// Add a grid source to an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of GridSource</returns>
        ApiResponse<GridSource> GridLayerAddGridSourceWithHttpInfo (string gridLayerId, int? bandNumber, System.IO.Stream _file);
        /// <summary>
        /// Create a grid layer with the specified parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>GridLayer</returns>
        GridLayer GridLayerCreateGridLayer (GridLayerCreateParameters createParameters);

        /// <summary>
        /// Create a grid layer with the specified parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>ApiResponse of GridLayer</returns>
        ApiResponse<GridLayer> GridLayerCreateGridLayerWithHttpInfo (GridLayerCreateParameters createParameters);
        /// <summary>
        /// Delete an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns></returns>
        void GridLayerDeleteGridLayer (string gridLayerId);

        /// <summary>
        /// Delete an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GridLayerDeleteGridLayerWithHttpInfo (string gridLayerId);
        /// <summary>
        /// Delete an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns></returns>
        void GridLayerDeleteGridSource (string gridLayerId, string gridSourceId);

        /// <summary>
        /// Delete an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GridLayerDeleteGridSourceWithHttpInfo (string gridLayerId, string gridSourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>Object</returns>
        Object GridLayerGetData (string gridLayerId, string gridSourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GridLayerGetDataWithHttpInfo (string gridLayerId, string gridSourceId);
        /// <summary>
        /// Get a grid layer by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>GridLayer</returns>
        GridLayer GridLayerGetGridLayerById (string gridLayerId);

        /// <summary>
        /// Get a grid layer by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>ApiResponse of GridLayer</returns>
        ApiResponse<GridLayer> GridLayerGetGridLayerByIdWithHttpInfo (string gridLayerId);
        /// <summary>
        /// Get the list of all grid layers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GridLayer&gt;</returns>
        List<GridLayer> GridLayerGetGridLayers ();

        /// <summary>
        /// Get the list of all grid layers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GridLayer&gt;</returns>
        ApiResponse<List<GridLayer>> GridLayerGetGridLayersWithHttpInfo ();
        /// <summary>
        /// Get a grid source by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>GridSource</returns>
        GridSource GridLayerGetGridSource (string gridLayerId, string gridSourceId);

        /// <summary>
        /// Get a grid source by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>ApiResponse of GridSource</returns>
        ApiResponse<GridSource> GridLayerGetGridSourceWithHttpInfo (string gridLayerId, string gridSourceId);
        /// <summary>
        /// Get all the grid sources associated with the grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>List&lt;GridSource&gt;</returns>
        List<GridSource> GridLayerGetGridSourcesForGridLayer (string gridLayerId);

        /// <summary>
        /// Get all the grid sources associated with the grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>ApiResponse of List&lt;GridSource&gt;</returns>
        ApiResponse<List<GridSource>> GridLayerGetGridSourcesForGridLayerWithHttpInfo (string gridLayerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>List&lt;MapDTO&gt;</returns>
        List<MapDTO> GridLayerGetMapsByGridLayer (string gridLayerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>ApiResponse of List&lt;MapDTO&gt;</returns>
        ApiResponse<List<MapDTO>> GridLayerGetMapsByGridLayerWithHttpInfo (string gridLayerId);
        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>Object</returns>
        Object GridLayerRender (string gridLayerId, string gridSourceId, GridSourceRenderParameter param);

        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GridLayerRenderWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceRenderParameter param);
        /// <summary>
        /// Update the properties of an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>GridLayer</returns>
        GridLayer GridLayerUpdateGridLayer (string gridLayerId, GridLayerUpdateParameters updateParameters);

        /// <summary>
        /// Update the properties of an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>ApiResponse of GridLayer</returns>
        ApiResponse<GridLayer> GridLayerUpdateGridLayerWithHttpInfo (string gridLayerId, GridLayerUpdateParameters updateParameters);
        /// <summary>
        /// Update the properties of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>GridSource</returns>
        GridSource GridLayerUpdateGridSource (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters);

        /// <summary>
        /// Update the properties of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>ApiResponse of GridSource</returns>
        ApiResponse<GridSource> GridLayerUpdateGridSourceWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters);
        /// <summary>
        /// Update the geoTIFF of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>GridSource</returns>
        GridSource GridLayerUpdateGridSourceGeotiff (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file);

        /// <summary>
        /// Update the geoTIFF of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of GridSource</returns>
        ApiResponse<GridSource> GridLayerUpdateGridSourceGeotiffWithHttpInfo (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a grid source to an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of GridSource</returns>
        System.Threading.Tasks.Task<GridSource> GridLayerAddGridSourceAsync (string gridLayerId, int? bandNumber, System.IO.Stream _file);

        /// <summary>
        /// Add a grid source to an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerAddGridSourceAsyncWithHttpInfo (string gridLayerId, int? bandNumber, System.IO.Stream _file);
        /// <summary>
        /// Create a grid layer with the specified parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>Task of GridLayer</returns>
        System.Threading.Tasks.Task<GridLayer> GridLayerCreateGridLayerAsync (GridLayerCreateParameters createParameters);

        /// <summary>
        /// Create a grid layer with the specified parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>Task of ApiResponse (GridLayer)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridLayer>> GridLayerCreateGridLayerAsyncWithHttpInfo (GridLayerCreateParameters createParameters);
        /// <summary>
        /// Delete an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GridLayerDeleteGridLayerAsync (string gridLayerId);

        /// <summary>
        /// Delete an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerDeleteGridLayerAsyncWithHttpInfo (string gridLayerId);
        /// <summary>
        /// Delete an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GridLayerDeleteGridSourceAsync (string gridLayerId, string gridSourceId);

        /// <summary>
        /// Delete an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerDeleteGridSourceAsyncWithHttpInfo (string gridLayerId, string gridSourceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GridLayerGetDataAsync (string gridLayerId, string gridSourceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerGetDataAsyncWithHttpInfo (string gridLayerId, string gridSourceId);
        /// <summary>
        /// Get a grid layer by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of GridLayer</returns>
        System.Threading.Tasks.Task<GridLayer> GridLayerGetGridLayerByIdAsync (string gridLayerId);

        /// <summary>
        /// Get a grid layer by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of ApiResponse (GridLayer)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridLayer>> GridLayerGetGridLayerByIdAsyncWithHttpInfo (string gridLayerId);
        /// <summary>
        /// Get the list of all grid layers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GridLayer&gt;</returns>
        System.Threading.Tasks.Task<List<GridLayer>> GridLayerGetGridLayersAsync ();

        /// <summary>
        /// Get the list of all grid layers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GridLayer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GridLayer>>> GridLayerGetGridLayersAsyncWithHttpInfo ();
        /// <summary>
        /// Get a grid source by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of GridSource</returns>
        System.Threading.Tasks.Task<GridSource> GridLayerGetGridSourceAsync (string gridLayerId, string gridSourceId);

        /// <summary>
        /// Get a grid source by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerGetGridSourceAsyncWithHttpInfo (string gridLayerId, string gridSourceId);
        /// <summary>
        /// Get all the grid sources associated with the grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of List&lt;GridSource&gt;</returns>
        System.Threading.Tasks.Task<List<GridSource>> GridLayerGetGridSourcesForGridLayerAsync (string gridLayerId);

        /// <summary>
        /// Get all the grid sources associated with the grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;GridSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GridSource>>> GridLayerGetGridSourcesForGridLayerAsyncWithHttpInfo (string gridLayerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>Task of List&lt;MapDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MapDTO>> GridLayerGetMapsByGridLayerAsync (string gridLayerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>Task of ApiResponse (List&lt;MapDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MapDTO>>> GridLayerGetMapsByGridLayerAsyncWithHttpInfo (string gridLayerId);
        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GridLayerRenderAsync (string gridLayerId, string gridSourceId, GridSourceRenderParameter param);

        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerRenderAsyncWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceRenderParameter param);
        /// <summary>
        /// Update the properties of an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of GridLayer</returns>
        System.Threading.Tasks.Task<GridLayer> GridLayerUpdateGridLayerAsync (string gridLayerId, GridLayerUpdateParameters updateParameters);

        /// <summary>
        /// Update the properties of an existing grid layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of ApiResponse (GridLayer)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridLayer>> GridLayerUpdateGridLayerAsyncWithHttpInfo (string gridLayerId, GridLayerUpdateParameters updateParameters);
        /// <summary>
        /// Update the properties of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of GridSource</returns>
        System.Threading.Tasks.Task<GridSource> GridLayerUpdateGridSourceAsync (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters);

        /// <summary>
        /// Update the properties of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerUpdateGridSourceAsyncWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters);
        /// <summary>
        /// Update the geoTIFF of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of GridSource</returns>
        System.Threading.Tasks.Task<GridSource> GridLayerUpdateGridSourceGeotiffAsync (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file);

        /// <summary>
        /// Update the geoTIFF of an existing grid source.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerUpdateGridSourceGeotiffAsyncWithHttpInfo (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GridLayerApi : IGridLayerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GridLayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridLayerApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridLayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GridLayerApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a grid source to an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>GridSource</returns>
        public GridSource GridLayerAddGridSource (string gridLayerId, int? bandNumber, System.IO.Stream _file)
        {
             ApiResponse<GridSource> localVarResponse = GridLayerAddGridSourceWithHttpInfo(gridLayerId, bandNumber, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a grid source to an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of GridSource</returns>
        public ApiResponse< GridSource > GridLayerAddGridSourceWithHttpInfo (string gridLayerId, int? bandNumber, System.IO.Stream _file)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerAddGridSource");
            // verify the required parameter 'bandNumber' is set
            if (bandNumber == null)
                throw new ApiException(400, "Missing required parameter 'bandNumber' when calling GridLayerApi->GridLayerAddGridSource");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling GridLayerApi->GridLayerAddGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (bandNumber != null) localVarFormParams.Add("bandNumber", this.Configuration.ApiClient.ParameterToString(bandNumber)); // form parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerAddGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Add a grid source to an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of GridSource</returns>
        public async System.Threading.Tasks.Task<GridSource> GridLayerAddGridSourceAsync (string gridLayerId, int? bandNumber, System.IO.Stream _file)
        {
             ApiResponse<GridSource> localVarResponse = await GridLayerAddGridSourceAsyncWithHttpInfo(gridLayerId, bandNumber, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a grid source to an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerAddGridSourceAsyncWithHttpInfo (string gridLayerId, int? bandNumber, System.IO.Stream _file)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerAddGridSource");
            // verify the required parameter 'bandNumber' is set
            if (bandNumber == null)
                throw new ApiException(400, "Missing required parameter 'bandNumber' when calling GridLayerApi->GridLayerAddGridSource");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling GridLayerApi->GridLayerAddGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (bandNumber != null) localVarFormParams.Add("bandNumber", this.Configuration.ApiClient.ParameterToString(bandNumber)); // form parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerAddGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Create a grid layer with the specified parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>GridLayer</returns>
        public GridLayer GridLayerCreateGridLayer (GridLayerCreateParameters createParameters)
        {
             ApiResponse<GridLayer> localVarResponse = GridLayerCreateGridLayerWithHttpInfo(createParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a grid layer with the specified parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>ApiResponse of GridLayer</returns>
        public ApiResponse< GridLayer > GridLayerCreateGridLayerWithHttpInfo (GridLayerCreateParameters createParameters)
        {
            // verify the required parameter 'createParameters' is set
            if (createParameters == null)
                throw new ApiException(400, "Missing required parameter 'createParameters' when calling GridLayerApi->GridLayerCreateGridLayer");

            var localVarPath = "/api/v1/GridLayer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createParameters != null && createParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerCreateGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridLayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridLayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridLayer)));
        }

        /// <summary>
        /// Create a grid layer with the specified parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>Task of GridLayer</returns>
        public async System.Threading.Tasks.Task<GridLayer> GridLayerCreateGridLayerAsync (GridLayerCreateParameters createParameters)
        {
             ApiResponse<GridLayer> localVarResponse = await GridLayerCreateGridLayerAsyncWithHttpInfo(createParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a grid layer with the specified parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createParameters">The parameters used to create the grid layer.</param>
        /// <returns>Task of ApiResponse (GridLayer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridLayer>> GridLayerCreateGridLayerAsyncWithHttpInfo (GridLayerCreateParameters createParameters)
        {
            // verify the required parameter 'createParameters' is set
            if (createParameters == null)
                throw new ApiException(400, "Missing required parameter 'createParameters' when calling GridLayerApi->GridLayerCreateGridLayer");

            var localVarPath = "/api/v1/GridLayer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createParameters != null && createParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerCreateGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridLayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridLayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridLayer)));
        }

        /// <summary>
        /// Delete an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns></returns>
        public void GridLayerDeleteGridLayer (string gridLayerId)
        {
             GridLayerDeleteGridLayerWithHttpInfo(gridLayerId);
        }

        /// <summary>
        /// Delete an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GridLayerDeleteGridLayerWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerDeleteGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerDeleteGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GridLayerDeleteGridLayerAsync (string gridLayerId)
        {
             await GridLayerDeleteGridLayerAsyncWithHttpInfo(gridLayerId);

        }

        /// <summary>
        /// Delete an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerDeleteGridLayerAsyncWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerDeleteGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerDeleteGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns></returns>
        public void GridLayerDeleteGridSource (string gridLayerId, string gridSourceId)
        {
             GridLayerDeleteGridSourceWithHttpInfo(gridLayerId, gridSourceId);
        }

        /// <summary>
        /// Delete an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GridLayerDeleteGridSourceWithHttpInfo (string gridLayerId, string gridSourceId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerDeleteGridSource");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerDeleteGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerDeleteGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GridLayerDeleteGridSourceAsync (string gridLayerId, string gridSourceId)
        {
             await GridLayerDeleteGridSourceAsyncWithHttpInfo(gridLayerId, gridSourceId);

        }

        /// <summary>
        /// Delete an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerDeleteGridSourceAsyncWithHttpInfo (string gridLayerId, string gridSourceId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerDeleteGridSource");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerDeleteGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerDeleteGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>Object</returns>
        public Object GridLayerGetData (string gridLayerId, string gridSourceId)
        {
             ApiResponse<Object> localVarResponse = GridLayerGetDataWithHttpInfo(gridLayerId, gridSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GridLayerGetDataWithHttpInfo (string gridLayerId, string gridSourceId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetData");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerGetData");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSource/{gridSourceId}/getData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GridLayerGetDataAsync (string gridLayerId, string gridSourceId)
        {
             ApiResponse<Object> localVarResponse = await GridLayerGetDataAsyncWithHttpInfo(gridLayerId, gridSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerGetDataAsyncWithHttpInfo (string gridLayerId, string gridSourceId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetData");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerGetData");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSource/{gridSourceId}/getData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a grid layer by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>GridLayer</returns>
        public GridLayer GridLayerGetGridLayerById (string gridLayerId)
        {
             ApiResponse<GridLayer> localVarResponse = GridLayerGetGridLayerByIdWithHttpInfo(gridLayerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a grid layer by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>ApiResponse of GridLayer</returns>
        public ApiResponse< GridLayer > GridLayerGetGridLayerByIdWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetGridLayerById");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridLayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridLayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridLayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridLayer)));
        }

        /// <summary>
        /// Get a grid layer by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of GridLayer</returns>
        public async System.Threading.Tasks.Task<GridLayer> GridLayerGetGridLayerByIdAsync (string gridLayerId)
        {
             ApiResponse<GridLayer> localVarResponse = await GridLayerGetGridLayerByIdAsyncWithHttpInfo(gridLayerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a grid layer by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of ApiResponse (GridLayer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridLayer>> GridLayerGetGridLayerByIdAsyncWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetGridLayerById");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridLayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridLayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridLayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridLayer)));
        }

        /// <summary>
        /// Get the list of all grid layers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GridLayer&gt;</returns>
        public List<GridLayer> GridLayerGetGridLayers ()
        {
             ApiResponse<List<GridLayer>> localVarResponse = GridLayerGetGridLayersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of all grid layers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GridLayer&gt;</returns>
        public ApiResponse< List<GridLayer> > GridLayerGetGridLayersWithHttpInfo ()
        {

            var localVarPath = "/api/v1/GridLayers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridLayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GridLayer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GridLayer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GridLayer>)));
        }

        /// <summary>
        /// Get the list of all grid layers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GridLayer&gt;</returns>
        public async System.Threading.Tasks.Task<List<GridLayer>> GridLayerGetGridLayersAsync ()
        {
             ApiResponse<List<GridLayer>> localVarResponse = await GridLayerGetGridLayersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of all grid layers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GridLayer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GridLayer>>> GridLayerGetGridLayersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/GridLayers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridLayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GridLayer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GridLayer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GridLayer>)));
        }

        /// <summary>
        /// Get a grid source by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>GridSource</returns>
        public GridSource GridLayerGetGridSource (string gridLayerId, string gridSourceId)
        {
             ApiResponse<GridSource> localVarResponse = GridLayerGetGridSourceWithHttpInfo(gridLayerId, gridSourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a grid source by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>ApiResponse of GridSource</returns>
        public ApiResponse< GridSource > GridLayerGetGridSourceWithHttpInfo (string gridLayerId, string gridSourceId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetGridSource");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerGetGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Get a grid source by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of GridSource</returns>
        public async System.Threading.Tasks.Task<GridSource> GridLayerGetGridSourceAsync (string gridLayerId, string gridSourceId)
        {
             ApiResponse<GridSource> localVarResponse = await GridLayerGetGridSourceAsyncWithHttpInfo(gridLayerId, gridSourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a grid source by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerGetGridSourceAsyncWithHttpInfo (string gridLayerId, string gridSourceId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetGridSource");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerGetGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Get all the grid sources associated with the grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>List&lt;GridSource&gt;</returns>
        public List<GridSource> GridLayerGetGridSourcesForGridLayer (string gridLayerId)
        {
             ApiResponse<List<GridSource>> localVarResponse = GridLayerGetGridSourcesForGridLayerWithHttpInfo(gridLayerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the grid sources associated with the grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>ApiResponse of List&lt;GridSource&gt;</returns>
        public ApiResponse< List<GridSource> > GridLayerGetGridSourcesForGridLayerWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetGridSourcesForGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridSourcesForGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GridSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GridSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GridSource>)));
        }

        /// <summary>
        /// Get all the grid sources associated with the grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of List&lt;GridSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<GridSource>> GridLayerGetGridSourcesForGridLayerAsync (string gridLayerId)
        {
             ApiResponse<List<GridSource>> localVarResponse = await GridLayerGetGridSourcesForGridLayerAsyncWithHttpInfo(gridLayerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the grid sources associated with the grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;GridSource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GridSource>>> GridLayerGetGridSourcesForGridLayerAsyncWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetGridSourcesForGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetGridSourcesForGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GridSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GridSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GridSource>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>List&lt;MapDTO&gt;</returns>
        public List<MapDTO> GridLayerGetMapsByGridLayer (string gridLayerId)
        {
             ApiResponse<List<MapDTO>> localVarResponse = GridLayerGetMapsByGridLayerWithHttpInfo(gridLayerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>ApiResponse of List&lt;MapDTO&gt;</returns>
        public ApiResponse< List<MapDTO> > GridLayerGetMapsByGridLayerWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetMapsByGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/maps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetMapsByGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MapDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MapDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MapDTO>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>Task of List&lt;MapDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MapDTO>> GridLayerGetMapsByGridLayerAsync (string gridLayerId)
        {
             ApiResponse<List<MapDTO>> localVarResponse = await GridLayerGetMapsByGridLayerAsyncWithHttpInfo(gridLayerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <returns>Task of ApiResponse (List&lt;MapDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MapDTO>>> GridLayerGetMapsByGridLayerAsyncWithHttpInfo (string gridLayerId)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerGetMapsByGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/maps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerGetMapsByGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MapDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MapDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MapDTO>)));
        }

        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>Object</returns>
        public Object GridLayerRender (string gridLayerId, string gridSourceId, GridSourceRenderParameter param)
        {
             ApiResponse<Object> localVarResponse = GridLayerRenderWithHttpInfo(gridLayerId, gridSourceId, param);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GridLayerRenderWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceRenderParameter param)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerRender");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerRender");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling GridLayerApi->GridLayerRender");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSource/{gridSourceId}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerRender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GridLayerRenderAsync (string gridLayerId, string gridSourceId, GridSourceRenderParameter param)
        {
             ApiResponse<Object> localVarResponse = await GridLayerRenderAsyncWithHttpInfo(gridLayerId, gridSourceId, param);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in &#x60;Styles&#x60; in the parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId"></param>
        /// <param name="gridSourceId"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridLayerRenderAsyncWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceRenderParameter param)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerRender");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerRender");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling GridLayerApi->GridLayerRender");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSource/{gridSourceId}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerRender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update the properties of an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>GridLayer</returns>
        public GridLayer GridLayerUpdateGridLayer (string gridLayerId, GridLayerUpdateParameters updateParameters)
        {
             ApiResponse<GridLayer> localVarResponse = GridLayerUpdateGridLayerWithHttpInfo(gridLayerId, updateParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the properties of an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>ApiResponse of GridLayer</returns>
        public ApiResponse< GridLayer > GridLayerUpdateGridLayerWithHttpInfo (string gridLayerId, GridLayerUpdateParameters updateParameters)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerUpdateGridLayer");
            // verify the required parameter 'updateParameters' is set
            if (updateParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateParameters' when calling GridLayerApi->GridLayerUpdateGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (updateParameters != null && updateParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerUpdateGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridLayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridLayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridLayer)));
        }

        /// <summary>
        /// Update the properties of an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of GridLayer</returns>
        public async System.Threading.Tasks.Task<GridLayer> GridLayerUpdateGridLayerAsync (string gridLayerId, GridLayerUpdateParameters updateParameters)
        {
             ApiResponse<GridLayer> localVarResponse = await GridLayerUpdateGridLayerAsyncWithHttpInfo(gridLayerId, updateParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the properties of an existing grid layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of ApiResponse (GridLayer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridLayer>> GridLayerUpdateGridLayerAsyncWithHttpInfo (string gridLayerId, GridLayerUpdateParameters updateParameters)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerUpdateGridLayer");
            // verify the required parameter 'updateParameters' is set
            if (updateParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateParameters' when calling GridLayerApi->GridLayerUpdateGridLayer");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (updateParameters != null && updateParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerUpdateGridLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridLayer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridLayer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridLayer)));
        }

        /// <summary>
        /// Update the properties of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>GridSource</returns>
        public GridSource GridLayerUpdateGridSource (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters)
        {
             ApiResponse<GridSource> localVarResponse = GridLayerUpdateGridSourceWithHttpInfo(gridLayerId, gridSourceId, updateParameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the properties of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>ApiResponse of GridSource</returns>
        public ApiResponse< GridSource > GridLayerUpdateGridSourceWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerUpdateGridSource");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerUpdateGridSource");
            // verify the required parameter 'updateParameters' is set
            if (updateParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateParameters' when calling GridLayerApi->GridLayerUpdateGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter
            if (updateParameters != null && updateParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerUpdateGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Update the properties of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of GridSource</returns>
        public async System.Threading.Tasks.Task<GridSource> GridLayerUpdateGridSourceAsync (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters)
        {
             ApiResponse<GridSource> localVarResponse = await GridLayerUpdateGridSourceAsyncWithHttpInfo(gridLayerId, gridSourceId, updateParameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the properties of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="updateParameters">The parameters to update.</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerUpdateGridSourceAsyncWithHttpInfo (string gridLayerId, string gridSourceId, GridSourceUpdateParameters updateParameters)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerUpdateGridSource");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerUpdateGridSource");
            // verify the required parameter 'updateParameters' is set
            if (updateParameters == null)
                throw new ApiException(400, "Missing required parameter 'updateParameters' when calling GridLayerApi->GridLayerUpdateGridSource");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter
            if (updateParameters != null && updateParameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateParameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateParameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerUpdateGridSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Update the geoTIFF of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>GridSource</returns>
        public GridSource GridLayerUpdateGridSourceGeotiff (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file)
        {
             ApiResponse<GridSource> localVarResponse = GridLayerUpdateGridSourceGeotiffWithHttpInfo(gridLayerId, gridSourceId, bandNumber, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the geoTIFF of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of GridSource</returns>
        public ApiResponse< GridSource > GridLayerUpdateGridSourceGeotiffWithHttpInfo (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");
            // verify the required parameter 'bandNumber' is set
            if (bandNumber == null)
                throw new ApiException(400, "Missing required parameter 'bandNumber' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}/updateGeotiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter
            if (bandNumber != null) localVarFormParams.Add("bandNumber", this.Configuration.ApiClient.ParameterToString(bandNumber)); // form parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerUpdateGridSourceGeotiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

        /// <summary>
        /// Update the geoTIFF of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of GridSource</returns>
        public async System.Threading.Tasks.Task<GridSource> GridLayerUpdateGridSourceGeotiffAsync (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file)
        {
             ApiResponse<GridSource> localVarResponse = await GridLayerUpdateGridSourceGeotiffAsyncWithHttpInfo(gridLayerId, gridSourceId, bandNumber, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the geoTIFF of an existing grid source. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridLayerId">The grid layer system identifier.</param>
        /// <param name="gridSourceId">The grid source system identifier.</param>
        /// <param name="bandNumber">The band number to select. Starts at 1.</param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (GridSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GridSource>> GridLayerUpdateGridSourceGeotiffAsyncWithHttpInfo (string gridLayerId, string gridSourceId, int? bandNumber, System.IO.Stream _file)
        {
            // verify the required parameter 'gridLayerId' is set
            if (gridLayerId == null)
                throw new ApiException(400, "Missing required parameter 'gridLayerId' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");
            // verify the required parameter 'gridSourceId' is set
            if (gridSourceId == null)
                throw new ApiException(400, "Missing required parameter 'gridSourceId' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");
            // verify the required parameter 'bandNumber' is set
            if (bandNumber == null)
                throw new ApiException(400, "Missing required parameter 'bandNumber' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling GridLayerApi->GridLayerUpdateGridSourceGeotiff");

            var localVarPath = "/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}/updateGeotiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridLayerId != null) localVarPathParams.Add("gridLayerId", this.Configuration.ApiClient.ParameterToString(gridLayerId)); // path parameter
            if (gridSourceId != null) localVarPathParams.Add("gridSourceId", this.Configuration.ApiClient.ParameterToString(gridSourceId)); // path parameter
            if (bandNumber != null) localVarFormParams.Add("bandNumber", this.Configuration.ApiClient.ParameterToString(bandNumber)); // form parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridLayerUpdateGridSourceGeotiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GridSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GridSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GridSource)));
        }

    }
}

/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a view based on an expression.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>View</returns>
        View ViewCreateViewByExpression (Guid? layerId, CreateViewByExpressionParameters param);

        /// <summary>
        /// Create a view based on an expression.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> ViewCreateViewByExpressionWithHttpInfo (Guid? layerId, CreateViewByExpressionParameters param);
        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>List&lt;View&gt;</returns>
        List<View> ViewCreateViewsFromColumn (Guid? layerId, Guid? columnId);

        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        ApiResponse<List<View>> ViewCreateViewsFromColumnWithHttpInfo (Guid? layerId, Guid? columnId);
        /// <summary>
        /// Delete all the views associated with the layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns></returns>
        void ViewDeleteViews (Guid? layerId);

        /// <summary>
        /// Delete all the views associated with the layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ViewDeleteViewsWithHttpInfo (Guid? layerId);
        /// <summary>
        /// Get a specific view by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>View</returns>
        View ViewGetView (Guid? layerId, Guid? viewId);

        /// <summary>
        /// Get a specific view by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> ViewGetViewWithHttpInfo (Guid? layerId, Guid? viewId);
        /// <summary>
        /// Get the list of views associated with a layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>List&lt;View&gt;</returns>
        List<View> ViewGetViews (Guid? layerId);

        /// <summary>
        /// Get the list of views associated with a layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        ApiResponse<List<View>> ViewGetViewsWithHttpInfo (Guid? layerId);
        /// <summary>
        /// Update the view parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>View</returns>
        View ViewUpdateView (Guid? layerId, Guid? viewId, UpdateViewParameter param);

        /// <summary>
        /// Update the view parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> ViewUpdateViewWithHttpInfo (Guid? layerId, Guid? viewId, UpdateViewParameter param);
        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>View</returns>
        View ViewUpdateViewPermissions (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions);

        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> ViewUpdateViewPermissionsWithHttpInfo (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a view based on an expression.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> ViewCreateViewByExpressionAsync (Guid? layerId, CreateViewByExpressionParameters param);

        /// <summary>
        /// Create a view based on an expression.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> ViewCreateViewByExpressionAsyncWithHttpInfo (Guid? layerId, CreateViewByExpressionParameters param);
        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>Task of List&lt;View&gt;</returns>
        System.Threading.Tasks.Task<List<View>> ViewCreateViewsFromColumnAsync (Guid? layerId, Guid? columnId);

        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<View>>> ViewCreateViewsFromColumnAsyncWithHttpInfo (Guid? layerId, Guid? columnId);
        /// <summary>
        /// Delete all the views associated with the layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ViewDeleteViewsAsync (Guid? layerId);

        /// <summary>
        /// Delete all the views associated with the layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ViewDeleteViewsAsyncWithHttpInfo (Guid? layerId);
        /// <summary>
        /// Get a specific view by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> ViewGetViewAsync (Guid? layerId, Guid? viewId);

        /// <summary>
        /// Get a specific view by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> ViewGetViewAsyncWithHttpInfo (Guid? layerId, Guid? viewId);
        /// <summary>
        /// Get the list of views associated with a layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of List&lt;View&gt;</returns>
        System.Threading.Tasks.Task<List<View>> ViewGetViewsAsync (Guid? layerId);

        /// <summary>
        /// Get the list of views associated with a layer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<View>>> ViewGetViewsAsyncWithHttpInfo (Guid? layerId);
        /// <summary>
        /// Update the view parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> ViewUpdateViewAsync (Guid? layerId, Guid? viewId, UpdateViewParameter param);

        /// <summary>
        /// Update the view parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> ViewUpdateViewAsyncWithHttpInfo (Guid? layerId, Guid? viewId, UpdateViewParameter param);
        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> ViewUpdateViewPermissionsAsync (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions);

        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> ViewUpdateViewPermissionsAsyncWithHttpInfo (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewApi : IViewApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a view based on an expression. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>View</returns>
        public View ViewCreateViewByExpression (Guid? layerId, CreateViewByExpressionParameters param)
        {
             ApiResponse<View> localVarResponse = ViewCreateViewByExpressionWithHttpInfo(layerId, param);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a view based on an expression. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > ViewCreateViewByExpressionWithHttpInfo (Guid? layerId, CreateViewByExpressionParameters param)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewCreateViewByExpression");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling ViewApi->ViewCreateViewByExpression");

            var localVarPath = "/api/v1/Layer/{layerId}/views/createByExpression";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCreateViewByExpression", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Create a view based on an expression. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> ViewCreateViewByExpressionAsync (Guid? layerId, CreateViewByExpressionParameters param)
        {
             ApiResponse<View> localVarResponse = await ViewCreateViewByExpressionAsyncWithHttpInfo(layerId, param);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a view based on an expression. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="param">The parameters to create the view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> ViewCreateViewByExpressionAsyncWithHttpInfo (Guid? layerId, CreateViewByExpressionParameters param)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewCreateViewByExpression");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling ViewApi->ViewCreateViewByExpression");

            var localVarPath = "/api/v1/Layer/{layerId}/views/createByExpression";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCreateViewByExpression", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>List&lt;View&gt;</returns>
        public List<View> ViewCreateViewsFromColumn (Guid? layerId, Guid? columnId)
        {
             ApiResponse<List<View>> localVarResponse = ViewCreateViewsFromColumnWithHttpInfo(layerId, columnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        public ApiResponse< List<View> > ViewCreateViewsFromColumnWithHttpInfo (Guid? layerId, Guid? columnId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewCreateViewsFromColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewApi->ViewCreateViewsFromColumn");

            var localVarPath = "/api/v1/Layer/{layerId}/views/createByColumn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (columnId != null && columnId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(columnId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = columnId; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCreateViewsFromColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>Task of List&lt;View&gt;</returns>
        public async System.Threading.Tasks.Task<List<View>> ViewCreateViewsFromColumnAsync (Guid? layerId, Guid? columnId)
        {
             ApiResponse<List<View>> localVarResponse = await ViewCreateViewsFromColumnAsyncWithHttpInfo(layerId, columnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create views based on a layer column. This will generate one view for each unique value of the selected column. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="columnId">The column system identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<View>>> ViewCreateViewsFromColumnAsyncWithHttpInfo (Guid? layerId, Guid? columnId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewCreateViewsFromColumn");
            // verify the required parameter 'columnId' is set
            if (columnId == null)
                throw new ApiException(400, "Missing required parameter 'columnId' when calling ViewApi->ViewCreateViewsFromColumn");

            var localVarPath = "/api/v1/Layer/{layerId}/views/createByColumn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (columnId != null && columnId.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(columnId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = columnId; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCreateViewsFromColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// Delete all the views associated with the layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns></returns>
        public void ViewDeleteViews (Guid? layerId)
        {
             ViewDeleteViewsWithHttpInfo(layerId);
        }

        /// <summary>
        /// Delete all the views associated with the layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ViewDeleteViewsWithHttpInfo (Guid? layerId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewDeleteViews");

            var localVarPath = "/api/v1/Layer/{layerId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDeleteViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all the views associated with the layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ViewDeleteViewsAsync (Guid? layerId)
        {
             await ViewDeleteViewsAsyncWithHttpInfo(layerId);

        }

        /// <summary>
        /// Delete all the views associated with the layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ViewDeleteViewsAsyncWithHttpInfo (Guid? layerId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewDeleteViews");

            var localVarPath = "/api/v1/Layer/{layerId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDeleteViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a specific view by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>View</returns>
        public View ViewGetView (Guid? layerId, Guid? viewId)
        {
             ApiResponse<View> localVarResponse = ViewGetViewWithHttpInfo(layerId, viewId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific view by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > ViewGetViewWithHttpInfo (Guid? layerId, Guid? viewId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewGetView");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ViewGetView");

            var localVarPath = "/api/v1/Layer/{layerId}/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewGetView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Get a specific view by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> ViewGetViewAsync (Guid? layerId, Guid? viewId)
        {
             ApiResponse<View> localVarResponse = await ViewGetViewAsyncWithHttpInfo(layerId, viewId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific view by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> ViewGetViewAsyncWithHttpInfo (Guid? layerId, Guid? viewId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewGetView");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ViewGetView");

            var localVarPath = "/api/v1/Layer/{layerId}/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewGetView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Get the list of views associated with a layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>List&lt;View&gt;</returns>
        public List<View> ViewGetViews (Guid? layerId)
        {
             ApiResponse<List<View>> localVarResponse = ViewGetViewsWithHttpInfo(layerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of views associated with a layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        public ApiResponse< List<View> > ViewGetViewsWithHttpInfo (Guid? layerId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewGetViews");

            var localVarPath = "/api/v1/Layer/{layerId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewGetViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// Get the list of views associated with a layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of List&lt;View&gt;</returns>
        public async System.Threading.Tasks.Task<List<View>> ViewGetViewsAsync (Guid? layerId)
        {
             ApiResponse<List<View>> localVarResponse = await ViewGetViewsAsyncWithHttpInfo(layerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of views associated with a layer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<View>>> ViewGetViewsAsyncWithHttpInfo (Guid? layerId)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewGetViews");

            var localVarPath = "/api/v1/Layer/{layerId}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewGetViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// Update the view parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>View</returns>
        public View ViewUpdateView (Guid? layerId, Guid? viewId, UpdateViewParameter param)
        {
             ApiResponse<View> localVarResponse = ViewUpdateViewWithHttpInfo(layerId, viewId, param);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > ViewUpdateViewWithHttpInfo (Guid? layerId, Guid? viewId, UpdateViewParameter param)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewUpdateView");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ViewUpdateView");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling ViewApi->ViewUpdateView");

            var localVarPath = "/api/v1/Layer/{layerId}/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUpdateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update the view parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> ViewUpdateViewAsync (Guid? layerId, Guid? viewId, UpdateViewParameter param)
        {
             ApiResponse<View> localVarResponse = await ViewUpdateViewAsyncWithHttpInfo(layerId, viewId, param);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the view parameters. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="param">The parameters to update.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> ViewUpdateViewAsyncWithHttpInfo (Guid? layerId, Guid? viewId, UpdateViewParameter param)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewUpdateView");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ViewUpdateView");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling ViewApi->ViewUpdateView");

            var localVarPath = "/api/v1/Layer/{layerId}/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUpdateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>View</returns>
        public View ViewUpdateViewPermissions (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions)
        {
             ApiResponse<View> localVarResponse = ViewUpdateViewPermissionsWithHttpInfo(layerId, viewId, permissions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > ViewUpdateViewPermissionsWithHttpInfo (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewUpdateViewPermissions");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ViewUpdateViewPermissions");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling ViewApi->ViewUpdateViewPermissions");

            var localVarPath = "/api/v1/Layer/{layerId}/views/{viewId}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUpdateViewPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> ViewUpdateViewPermissionsAsync (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions)
        {
             ApiResponse<View> localVarResponse = await ViewUpdateViewPermissionsAsyncWithHttpInfo(layerId, viewId, permissions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerId">The layer system identifier.</param>
        /// <param name="viewId">The view system identifier.</param>
        /// <param name="permissions">The list of permissions to assign to the view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> ViewUpdateViewPermissionsAsyncWithHttpInfo (Guid? layerId, Guid? viewId, List<ViewReadPermission> permissions)
        {
            // verify the required parameter 'layerId' is set
            if (layerId == null)
                throw new ApiException(400, "Missing required parameter 'layerId' when calling ViewApi->ViewUpdateViewPermissions");
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ViewUpdateViewPermissions");
            // verify the required parameter 'permissions' is set
            if (permissions == null)
                throw new ApiException(400, "Missing required parameter 'permissions' when calling ViewApi->ViewUpdateViewPermissions");

            var localVarPath = "/api/v1/Layer/{layerId}/views/{viewId}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerId != null) localVarPathParams.Add("layerId", this.Configuration.ApiClient.ParameterToString(layerId)); // path parameter
            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (permissions != null && permissions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(permissions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUpdateViewPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

    }
}

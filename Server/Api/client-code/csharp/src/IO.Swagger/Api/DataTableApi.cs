/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataTableApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>DataTable</returns>
        DataTable DataTableCreateDataTable (DataTableCreateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableCreateDataTableWithHttpInfo (DataTableCreateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        DataTable DataTableCreateFromCSV (System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableCreateFromCSVWithHttpInfo (System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        DataTable DataTableCreateFromExcel (System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableCreateFromExcelWithHttpInfo (System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        DataTable DataTableCreateFromExcelSheetName (string sheetName, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableCreateFromExcelSheetNameWithHttpInfo (string sheetName, System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns></returns>
        void DataTableDeleteDataTable (string dataTableIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataTableDeleteDataTableWithHttpInfo (string dataTableIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>DataTable</returns>
        DataTable DataTableGetDataTableByIdentifier (string dataTableIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableGetDataTableByIdentifierWithHttpInfo (string dataTableIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DataTable&gt;</returns>
        List<DataTable> DataTableGetDataTables ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DataTable&gt;</returns>
        ApiResponse<List<DataTable>> DataTableGetDataTablesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>DataTable</returns>
        DataTable DataTableSetDataColumnUniqueId (string dataTableIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableSetDataColumnUniqueIdWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>DataTable</returns>
        DataTable DataTableSetUniqueIdentifier (string dataTableIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableSetUniqueIdentifierWithHttpInfo (string dataTableIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>DataTable</returns>
        DataTable DataTableUpdateDataTable (string dataTableIdentifier, DataTableUpdateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableUpdateDataTableWithHttpInfo (string dataTableIdentifier, DataTableUpdateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        DataTable DataTableUpdateFromCSV (string dataTableIdentifier, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableUpdateFromCSVWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        DataTable DataTableUpdateFromExcel (string dataTableIdentifier, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableUpdateFromExcelWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        DataTable DataTableUpdateFromExcelSheetName (string dataTableIdentifier, string sheetName, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        ApiResponse<DataTable> DataTableUpdateFromExcelSheetNameWithHttpInfo (string dataTableIdentifier, string sheetName, System.IO.Stream _file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableCreateDataTableAsync (DataTableCreateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateDataTableAsyncWithHttpInfo (DataTableCreateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableCreateFromCSVAsync (System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateFromCSVAsyncWithHttpInfo (System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableCreateFromExcelAsync (System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateFromExcelAsyncWithHttpInfo (System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableCreateFromExcelSheetNameAsync (string sheetName, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateFromExcelSheetNameAsyncWithHttpInfo (string sheetName, System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataTableDeleteDataTableAsync (string dataTableIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataTableDeleteDataTableAsyncWithHttpInfo (string dataTableIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableGetDataTableByIdentifierAsync (string dataTableIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableGetDataTableByIdentifierAsyncWithHttpInfo (string dataTableIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DataTable&gt;</returns>
        System.Threading.Tasks.Task<List<DataTable>> DataTableGetDataTablesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DataTable&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataTable>>> DataTableGetDataTablesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableSetDataColumnUniqueIdAsync (string dataTableIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableSetDataColumnUniqueIdAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableSetUniqueIdentifierAsync (string dataTableIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableSetUniqueIdentifierAsyncWithHttpInfo (string dataTableIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableUpdateDataTableAsync (string dataTableIdentifier, DataTableUpdateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateDataTableAsyncWithHttpInfo (string dataTableIdentifier, DataTableUpdateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableUpdateFromCSVAsync (string dataTableIdentifier, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateFromCSVAsyncWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableUpdateFromExcelAsync (string dataTableIdentifier, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateFromExcelAsyncWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        System.Threading.Tasks.Task<DataTable> DataTableUpdateFromExcelSheetNameAsync (string dataTableIdentifier, string sheetName, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateFromExcelSheetNameAsyncWithHttpInfo (string dataTableIdentifier, string sheetName, System.IO.Stream _file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataTableApi : IDataTableApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataTableApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataTableApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>DataTable</returns>
        public DataTable DataTableCreateDataTable (DataTableCreateParameter parameters)
        {
             ApiResponse<DataTable> localVarResponse = DataTableCreateDataTableWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableCreateDataTableWithHttpInfo (DataTableCreateParameter parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataTableApi->DataTableCreateDataTable");

            var localVarPath = "/api/v1/createDataTable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateDataTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableCreateDataTableAsync (DataTableCreateParameter parameters)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableCreateDataTableAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateDataTableAsyncWithHttpInfo (DataTableCreateParameter parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataTableApi->DataTableCreateDataTable");

            var localVarPath = "/api/v1/createDataTable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateDataTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        public DataTable DataTableCreateFromCSV (System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = DataTableCreateFromCSVWithHttpInfo(_file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableCreateFromCSVWithHttpInfo (System.IO.Stream _file)
        {
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableCreateFromCSV");

            var localVarPath = "/api/v1/DataTable/createFromCSV";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateFromCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableCreateFromCSVAsync (System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableCreateFromCSVAsyncWithHttpInfo(_file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateFromCSVAsyncWithHttpInfo (System.IO.Stream _file)
        {
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableCreateFromCSV");

            var localVarPath = "/api/v1/DataTable/createFromCSV";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateFromCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        public DataTable DataTableCreateFromExcel (System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = DataTableCreateFromExcelWithHttpInfo(_file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableCreateFromExcelWithHttpInfo (System.IO.Stream _file)
        {
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableCreateFromExcel");

            var localVarPath = "/api/v1/DataTable/createFromExcel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateFromExcel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableCreateFromExcelAsync (System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableCreateFromExcelAsyncWithHttpInfo(_file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateFromExcelAsyncWithHttpInfo (System.IO.Stream _file)
        {
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableCreateFromExcel");

            var localVarPath = "/api/v1/DataTable/createFromExcel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateFromExcel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        public DataTable DataTableCreateFromExcelSheetName (string sheetName, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = DataTableCreateFromExcelSheetNameWithHttpInfo(sheetName, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableCreateFromExcelSheetNameWithHttpInfo (string sheetName, System.IO.Stream _file)
        {
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling DataTableApi->DataTableCreateFromExcelSheetName");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableCreateFromExcelSheetName");

            var localVarPath = "/api/v1/DataTable/createFromExcel/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetName != null) localVarPathParams.Add("sheetName", this.Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateFromExcelSheetName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableCreateFromExcelSheetNameAsync (string sheetName, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableCreateFromExcelSheetNameAsyncWithHttpInfo(sheetName, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableCreateFromExcelSheetNameAsyncWithHttpInfo (string sheetName, System.IO.Stream _file)
        {
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling DataTableApi->DataTableCreateFromExcelSheetName");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableCreateFromExcelSheetName");

            var localVarPath = "/api/v1/DataTable/createFromExcel/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sheetName != null) localVarPathParams.Add("sheetName", this.Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableCreateFromExcelSheetName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns></returns>
        public void DataTableDeleteDataTable (string dataTableIdentifier)
        {
             DataTableDeleteDataTableWithHttpInfo(dataTableIdentifier);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataTableDeleteDataTableWithHttpInfo (string dataTableIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableDeleteDataTable");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableDeleteDataTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataTableDeleteDataTableAsync (string dataTableIdentifier)
        {
             await DataTableDeleteDataTableAsyncWithHttpInfo(dataTableIdentifier);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataTableDeleteDataTableAsyncWithHttpInfo (string dataTableIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableDeleteDataTable");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableDeleteDataTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>DataTable</returns>
        public DataTable DataTableGetDataTableByIdentifier (string dataTableIdentifier)
        {
             ApiResponse<DataTable> localVarResponse = DataTableGetDataTableByIdentifierWithHttpInfo(dataTableIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableGetDataTableByIdentifierWithHttpInfo (string dataTableIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableGetDataTableByIdentifier");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableGetDataTableByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableGetDataTableByIdentifierAsync (string dataTableIdentifier)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableGetDataTableByIdentifierAsyncWithHttpInfo(dataTableIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableGetDataTableByIdentifierAsyncWithHttpInfo (string dataTableIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableGetDataTableByIdentifier");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableGetDataTableByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DataTable&gt;</returns>
        public List<DataTable> DataTableGetDataTables ()
        {
             ApiResponse<List<DataTable>> localVarResponse = DataTableGetDataTablesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DataTable&gt;</returns>
        public ApiResponse< List<DataTable> > DataTableGetDataTablesWithHttpInfo ()
        {

            var localVarPath = "/api/v1/DataTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableGetDataTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataTable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataTable>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataTable>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DataTable&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataTable>> DataTableGetDataTablesAsync ()
        {
             ApiResponse<List<DataTable>> localVarResponse = await DataTableGetDataTablesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DataTable&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataTable>>> DataTableGetDataTablesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/DataTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableGetDataTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataTable>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataTable>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataTable>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>DataTable</returns>
        public DataTable DataTableSetDataColumnUniqueId (string dataTableIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<DataTable> localVarResponse = DataTableSetDataColumnUniqueIdWithHttpInfo(dataTableIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableSetDataColumnUniqueIdWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableSetDataColumnUniqueId");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataTableApi->DataTableSetDataColumnUniqueId");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/setDataColumnUniqueId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataColumnIdentifier", dataColumnIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableSetDataColumnUniqueId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableSetDataColumnUniqueIdAsync (string dataTableIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableSetDataColumnUniqueIdAsyncWithHttpInfo(dataTableIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableSetDataColumnUniqueIdAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableSetDataColumnUniqueId");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataTableApi->DataTableSetDataColumnUniqueId");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/setDataColumnUniqueId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataColumnIdentifier", dataColumnIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableSetDataColumnUniqueId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>DataTable</returns>
        public DataTable DataTableSetUniqueIdentifier (string dataTableIdentifier, string newIdentifier)
        {
             ApiResponse<DataTable> localVarResponse = DataTableSetUniqueIdentifierWithHttpInfo(dataTableIdentifier, newIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableSetUniqueIdentifierWithHttpInfo (string dataTableIdentifier, string newIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableSetUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling DataTableApi->DataTableSetUniqueIdentifier");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableSetUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableSetUniqueIdentifierAsync (string dataTableIdentifier, string newIdentifier)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableSetUniqueIdentifierAsyncWithHttpInfo(dataTableIdentifier, newIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableSetUniqueIdentifierAsyncWithHttpInfo (string dataTableIdentifier, string newIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableSetUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling DataTableApi->DataTableSetUniqueIdentifier");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableSetUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>DataTable</returns>
        public DataTable DataTableUpdateDataTable (string dataTableIdentifier, DataTableUpdateParameter parameters)
        {
             ApiResponse<DataTable> localVarResponse = DataTableUpdateDataTableWithHttpInfo(dataTableIdentifier, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableUpdateDataTableWithHttpInfo (string dataTableIdentifier, DataTableUpdateParameter parameters)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateDataTable");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataTableApi->DataTableUpdateDataTable");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateDataTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableUpdateDataTableAsync (string dataTableIdentifier, DataTableUpdateParameter parameters)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableUpdateDataTableAsyncWithHttpInfo(dataTableIdentifier, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateDataTableAsyncWithHttpInfo (string dataTableIdentifier, DataTableUpdateParameter parameters)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateDataTable");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataTableApi->DataTableUpdateDataTable");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateDataTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        public DataTable DataTableUpdateFromCSV (string dataTableIdentifier, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = DataTableUpdateFromCSVWithHttpInfo(dataTableIdentifier, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableUpdateFromCSVWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateFromCSV");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableUpdateFromCSV");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/updateFromCSV";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateFromCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableUpdateFromCSVAsync (string dataTableIdentifier, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableUpdateFromCSVAsyncWithHttpInfo(dataTableIdentifier, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateFromCSVAsyncWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateFromCSV");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableUpdateFromCSV");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/updateFromCSV";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateFromCSV", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        public DataTable DataTableUpdateFromExcel (string dataTableIdentifier, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = DataTableUpdateFromExcelWithHttpInfo(dataTableIdentifier, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableUpdateFromExcelWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateFromExcel");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableUpdateFromExcel");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/updateFromExcel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateFromExcel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableUpdateFromExcelAsync (string dataTableIdentifier, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableUpdateFromExcelAsyncWithHttpInfo(dataTableIdentifier, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateFromExcelAsyncWithHttpInfo (string dataTableIdentifier, System.IO.Stream _file)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateFromExcel");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableUpdateFromExcel");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/updateFromExcel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateFromExcel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>DataTable</returns>
        public DataTable DataTableUpdateFromExcelSheetName (string dataTableIdentifier, string sheetName, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = DataTableUpdateFromExcelSheetNameWithHttpInfo(dataTableIdentifier, sheetName, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of DataTable</returns>
        public ApiResponse< DataTable > DataTableUpdateFromExcelSheetNameWithHttpInfo (string dataTableIdentifier, string sheetName, System.IO.Stream _file)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateFromExcelSheetName");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling DataTableApi->DataTableUpdateFromExcelSheetName");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableUpdateFromExcelSheetName");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/updateFromExcel/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", this.Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateFromExcelSheetName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of DataTable</returns>
        public async System.Threading.Tasks.Task<DataTable> DataTableUpdateFromExcelSheetNameAsync (string dataTableIdentifier, string sheetName, System.IO.Stream _file)
        {
             ApiResponse<DataTable> localVarResponse = await DataTableUpdateFromExcelSheetNameAsyncWithHttpInfo(dataTableIdentifier, sheetName, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="sheetName"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (DataTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTable>> DataTableUpdateFromExcelSheetNameAsyncWithHttpInfo (string dataTableIdentifier, string sheetName, System.IO.Stream _file)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataTableApi->DataTableUpdateFromExcelSheetName");
            // verify the required parameter 'sheetName' is set
            if (sheetName == null)
                throw new ApiException(400, "Missing required parameter 'sheetName' when calling DataTableApi->DataTableUpdateFromExcelSheetName");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling DataTableApi->DataTableUpdateFromExcelSheetName");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/updateFromExcel/{sheetName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (sheetName != null) localVarPathParams.Add("sheetName", this.Configuration.ApiClient.ParameterToString(sheetName)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTableUpdateFromExcelSheetName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTable) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTable)));
        }

    }
}

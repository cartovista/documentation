/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataRowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport DataRowCreateDataRows (string dataTableIdentifier, List<DataRowCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> DataRowCreateDataRowsWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiCreateUpdateReport</returns>
        ApiCreateUpdateReport DataRowCreateUpdateDataRows (string dataTableIdentifier, List<DataRowCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiCreateUpdateReport</returns>
        ApiResponse<ApiCreateUpdateReport> DataRowCreateUpdateDataRowsWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns></returns>
        void DataRowDeleteDatarow (string dataTableIdentifier, string dataRowIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataRowDeleteDatarowWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns></returns>
        void DataRowDeleteDatarows (string dataTableIdentifier, List<string> dataRowIdentifiers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataRowDeleteDatarowsWithHttpInfo (string dataTableIdentifier, List<string> dataRowIdentifiers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>DataRow</returns>
        DataRow DataRowGetDataRow (string dataTableIdentifier, string dataRowIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>ApiResponse of DataRow</returns>
        ApiResponse<DataRow> DataRowGetDataRowWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;DataRow&gt;</returns>
        List<DataRow> DataRowGetDataRows (string dataTableIdentifier, DataRowsGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;DataRow&gt;</returns>
        ApiResponse<List<DataRow>> DataRowGetDataRowsWithHttpInfo (string dataTableIdentifier, DataRowsGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataRow</returns>
        DataRow DataRowUpdateDataRow (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataRow</returns>
        ApiResponse<DataRow> DataRowUpdateDataRowWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> DataRowCreateDataRowsAsync (string dataTableIdentifier, List<DataRowCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> DataRowCreateDataRowsAsyncWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiCreateUpdateReport</returns>
        System.Threading.Tasks.Task<ApiCreateUpdateReport> DataRowCreateUpdateDataRowsAsync (string dataTableIdentifier, List<DataRowCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiCreateUpdateReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCreateUpdateReport>> DataRowCreateUpdateDataRowsAsyncWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataRowDeleteDatarowAsync (string dataTableIdentifier, string dataRowIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataRowDeleteDatarowAsyncWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataRowDeleteDatarowsAsync (string dataTableIdentifier, List<string> dataRowIdentifiers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataRowDeleteDatarowsAsyncWithHttpInfo (string dataTableIdentifier, List<string> dataRowIdentifiers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of DataRow</returns>
        System.Threading.Tasks.Task<DataRow> DataRowGetDataRowAsync (string dataTableIdentifier, string dataRowIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of ApiResponse (DataRow)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataRow>> DataRowGetDataRowAsyncWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;DataRow&gt;</returns>
        System.Threading.Tasks.Task<List<DataRow>> DataRowGetDataRowsAsync (string dataTableIdentifier, DataRowsGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;DataRow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataRow>>> DataRowGetDataRowsAsyncWithHttpInfo (string dataTableIdentifier, DataRowsGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataRow</returns>
        System.Threading.Tasks.Task<DataRow> DataRowUpdateDataRowAsync (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataRow)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataRow>> DataRowUpdateDataRowAsyncWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataRowApi : IDataRowApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataRowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataRowApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataRowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataRowApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport DataRowCreateDataRows (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = DataRowCreateDataRowsWithHttpInfo(dataTableIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > DataRowCreateDataRowsWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowCreateDataRows");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowCreateDataRows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/createDataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowCreateDataRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> DataRowCreateDataRowsAsync (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await DataRowCreateDataRowsAsyncWithHttpInfo(dataTableIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> DataRowCreateDataRowsAsyncWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowCreateDataRows");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowCreateDataRows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/createDataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowCreateDataRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiCreateUpdateReport</returns>
        public ApiCreateUpdateReport DataRowCreateUpdateDataRows (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
             ApiResponse<ApiCreateUpdateReport> localVarResponse = DataRowCreateUpdateDataRowsWithHttpInfo(dataTableIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiCreateUpdateReport</returns>
        public ApiResponse< ApiCreateUpdateReport > DataRowCreateUpdateDataRowsWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowCreateUpdateDataRows");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowCreateUpdateDataRows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/createUpdateDataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowCreateUpdateDataRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCreateUpdateReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCreateUpdateReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCreateUpdateReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiCreateUpdateReport</returns>
        public async System.Threading.Tasks.Task<ApiCreateUpdateReport> DataRowCreateUpdateDataRowsAsync (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
             ApiResponse<ApiCreateUpdateReport> localVarResponse = await DataRowCreateUpdateDataRowsAsyncWithHttpInfo(dataTableIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiCreateUpdateReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCreateUpdateReport>> DataRowCreateUpdateDataRowsAsyncWithHttpInfo (string dataTableIdentifier, List<DataRowCreateParameter> param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowCreateUpdateDataRows");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowCreateUpdateDataRows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/createUpdateDataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowCreateUpdateDataRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCreateUpdateReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCreateUpdateReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCreateUpdateReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns></returns>
        public void DataRowDeleteDatarow (string dataTableIdentifier, string dataRowIdentifier)
        {
             DataRowDeleteDatarowWithHttpInfo(dataTableIdentifier, dataRowIdentifier);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataRowDeleteDatarowWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowDeleteDatarow");
            // verify the required parameter 'dataRowIdentifier' is set
            if (dataRowIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifier' when calling DataRowApi->DataRowDeleteDatarow");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifier != null) localVarPathParams.Add("dataRowIdentifier", this.Configuration.ApiClient.ParameterToString(dataRowIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowDeleteDatarow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataRowDeleteDatarowAsync (string dataTableIdentifier, string dataRowIdentifier)
        {
             await DataRowDeleteDatarowAsyncWithHttpInfo(dataTableIdentifier, dataRowIdentifier);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataRowDeleteDatarowAsyncWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowDeleteDatarow");
            // verify the required parameter 'dataRowIdentifier' is set
            if (dataRowIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifier' when calling DataRowApi->DataRowDeleteDatarow");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifier != null) localVarPathParams.Add("dataRowIdentifier", this.Configuration.ApiClient.ParameterToString(dataRowIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowDeleteDatarow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns></returns>
        public void DataRowDeleteDatarows (string dataTableIdentifier, List<string> dataRowIdentifiers)
        {
             DataRowDeleteDatarowsWithHttpInfo(dataTableIdentifier, dataRowIdentifiers);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataRowDeleteDatarowsWithHttpInfo (string dataTableIdentifier, List<string> dataRowIdentifiers)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowDeleteDatarows");
            // verify the required parameter 'dataRowIdentifiers' is set
            if (dataRowIdentifiers == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifiers' when calling DataRowApi->DataRowDeleteDatarows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifiers != null && dataRowIdentifiers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataRowIdentifiers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataRowIdentifiers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowDeleteDatarows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataRowDeleteDatarowsAsync (string dataTableIdentifier, List<string> dataRowIdentifiers)
        {
             await DataRowDeleteDatarowsAsyncWithHttpInfo(dataTableIdentifier, dataRowIdentifiers);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifiers"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataRowDeleteDatarowsAsyncWithHttpInfo (string dataTableIdentifier, List<string> dataRowIdentifiers)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowDeleteDatarows");
            // verify the required parameter 'dataRowIdentifiers' is set
            if (dataRowIdentifiers == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifiers' when calling DataRowApi->DataRowDeleteDatarows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifiers != null && dataRowIdentifiers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dataRowIdentifiers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataRowIdentifiers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowDeleteDatarows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>DataRow</returns>
        public DataRow DataRowGetDataRow (string dataTableIdentifier, string dataRowIdentifier)
        {
             ApiResponse<DataRow> localVarResponse = DataRowGetDataRowWithHttpInfo(dataTableIdentifier, dataRowIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>ApiResponse of DataRow</returns>
        public ApiResponse< DataRow > DataRowGetDataRowWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowGetDataRow");
            // verify the required parameter 'dataRowIdentifier' is set
            if (dataRowIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifier' when calling DataRowApi->DataRowGetDataRow");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifier != null) localVarPathParams.Add("dataRowIdentifier", this.Configuration.ApiClient.ParameterToString(dataRowIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowGetDataRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataRow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataRow)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of DataRow</returns>
        public async System.Threading.Tasks.Task<DataRow> DataRowGetDataRowAsync (string dataTableIdentifier, string dataRowIdentifier)
        {
             ApiResponse<DataRow> localVarResponse = await DataRowGetDataRowAsyncWithHttpInfo(dataTableIdentifier, dataRowIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <returns>Task of ApiResponse (DataRow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataRow>> DataRowGetDataRowAsyncWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowGetDataRow");
            // verify the required parameter 'dataRowIdentifier' is set
            if (dataRowIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifier' when calling DataRowApi->DataRowGetDataRow");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifier != null) localVarPathParams.Add("dataRowIdentifier", this.Configuration.ApiClient.ParameterToString(dataRowIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowGetDataRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataRow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataRow)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;DataRow&gt;</returns>
        public List<DataRow> DataRowGetDataRows (string dataTableIdentifier, DataRowsGetParameters param)
        {
             ApiResponse<List<DataRow>> localVarResponse = DataRowGetDataRowsWithHttpInfo(dataTableIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;DataRow&gt;</returns>
        public ApiResponse< List<DataRow> > DataRowGetDataRowsWithHttpInfo (string dataTableIdentifier, DataRowsGetParameters param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowGetDataRows");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowGetDataRows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowGetDataRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataRow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataRow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataRow>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;DataRow&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataRow>> DataRowGetDataRowsAsync (string dataTableIdentifier, DataRowsGetParameters param)
        {
             ApiResponse<List<DataRow>> localVarResponse = await DataRowGetDataRowsAsyncWithHttpInfo(dataTableIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;DataRow&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataRow>>> DataRowGetDataRowsAsyncWithHttpInfo (string dataTableIdentifier, DataRowsGetParameters param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowGetDataRows");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowGetDataRows");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowGetDataRows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataRow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataRow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataRow>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataRow</returns>
        public DataRow DataRowUpdateDataRow (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param)
        {
             ApiResponse<DataRow> localVarResponse = DataRowUpdateDataRowWithHttpInfo(dataTableIdentifier, dataRowIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataRow</returns>
        public ApiResponse< DataRow > DataRowUpdateDataRowWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowUpdateDataRow");
            // verify the required parameter 'dataRowIdentifier' is set
            if (dataRowIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifier' when calling DataRowApi->DataRowUpdateDataRow");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowUpdateDataRow");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifier != null) localVarPathParams.Add("dataRowIdentifier", this.Configuration.ApiClient.ParameterToString(dataRowIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowUpdateDataRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataRow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataRow)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataRow</returns>
        public async System.Threading.Tasks.Task<DataRow> DataRowUpdateDataRowAsync (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param)
        {
             ApiResponse<DataRow> localVarResponse = await DataRowUpdateDataRowAsyncWithHttpInfo(dataTableIdentifier, dataRowIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataRowIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataRow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataRow>> DataRowUpdateDataRowAsyncWithHttpInfo (string dataTableIdentifier, string dataRowIdentifier, DataRowUpdateParameter param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataRowApi->DataRowUpdateDataRow");
            // verify the required parameter 'dataRowIdentifier' is set
            if (dataRowIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataRowIdentifier' when calling DataRowApi->DataRowUpdateDataRow");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataRowApi->DataRowUpdateDataRow");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataRowIdentifier != null) localVarPathParams.Add("dataRowIdentifier", this.Configuration.ApiClient.ParameterToString(dataRowIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataRowUpdateDataRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataRow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataRow)));
        }

    }
}

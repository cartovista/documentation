/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataColumnApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport DataColumnCreateDataTableDataColumns (string dataTableIdentifier, List<DataColumnCreateParameter> parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> DataColumnCreateDataTableDataColumnsWithHttpInfo (string dataTableIdentifier, List<DataColumnCreateParameter> parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport DataColumnCreateLayerDataColumns (string layerIdentifier, List<DataColumnCreateParameter> parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> DataColumnCreateLayerDataColumnsWithHttpInfo (string layerIdentifier, List<DataColumnCreateParameter> parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns></returns>
        void DataColumnDeleteDataTableDataColumn (string dataTableIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataColumnDeleteDataTableDataColumnWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns></returns>
        void DataColumnDeleteLayerDataColumn (string layerIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataColumnDeleteLayerDataColumnWithHttpInfo (string layerIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>DataColumn</returns>
        DataColumn DataColumnGetDataTableDataColumn (string dataTableIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        ApiResponse<DataColumn> DataColumnGetDataTableDataColumnWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>List&lt;DataColumn&gt;</returns>
        List<DataColumn> DataColumnGetDataTableDataColumns (string dataTableIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>ApiResponse of List&lt;DataColumn&gt;</returns>
        ApiResponse<List<DataColumn>> DataColumnGetDataTableDataColumnsWithHttpInfo (string dataTableIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>DataColumn</returns>
        DataColumn DataColumnGetLayerDataColumn (string layerIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        ApiResponse<DataColumn> DataColumnGetLayerDataColumnWithHttpInfo (string layerIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>List&lt;DataColumn&gt;</returns>
        List<DataColumn> DataColumnGetLayerDataColumns (string layerIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>ApiResponse of List&lt;DataColumn&gt;</returns>
        ApiResponse<List<DataColumn>> DataColumnGetLayerDataColumnsWithHttpInfo (string layerIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>DataColumn</returns>
        DataColumn DataColumnSetDataTableColumnUniqueIdentifier (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        ApiResponse<DataColumn> DataColumnSetDataTableColumnUniqueIdentifierWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>DataColumn</returns>
        DataColumn DataColumnSetLayerColumnUniqueIdentifier (string layerIdentifier, string dataColumnIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        ApiResponse<DataColumn> DataColumnSetLayerColumnUniqueIdentifierWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataColumn</returns>
        DataColumn DataColumnUpdateDataTableDataColumn (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        ApiResponse<DataColumn> DataColumnUpdateDataTableDataColumnWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataColumn</returns>
        DataColumn DataColumnUpdateLayerDataColumn (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        ApiResponse<DataColumn> DataColumnUpdateLayerDataColumnWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> DataColumnCreateDataTableDataColumnsAsync (string dataTableIdentifier, List<DataColumnCreateParameter> parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> DataColumnCreateDataTableDataColumnsAsyncWithHttpInfo (string dataTableIdentifier, List<DataColumnCreateParameter> parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> DataColumnCreateLayerDataColumnsAsync (string layerIdentifier, List<DataColumnCreateParameter> parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> DataColumnCreateLayerDataColumnsAsyncWithHttpInfo (string layerIdentifier, List<DataColumnCreateParameter> parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataColumnDeleteDataTableDataColumnAsync (string dataTableIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataColumnDeleteDataTableDataColumnAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataColumnDeleteLayerDataColumnAsync (string layerIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataColumnDeleteLayerDataColumnAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        System.Threading.Tasks.Task<DataColumn> DataColumnGetDataTableDataColumnAsync (string dataTableIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnGetDataTableDataColumnAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of List&lt;DataColumn&gt;</returns>
        System.Threading.Tasks.Task<List<DataColumn>> DataColumnGetDataTableDataColumnsAsync (string dataTableIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of ApiResponse (List&lt;DataColumn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataColumn>>> DataColumnGetDataTableDataColumnsAsyncWithHttpInfo (string dataTableIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        System.Threading.Tasks.Task<DataColumn> DataColumnGetLayerDataColumnAsync (string layerIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnGetLayerDataColumnAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of List&lt;DataColumn&gt;</returns>
        System.Threading.Tasks.Task<List<DataColumn>> DataColumnGetLayerDataColumnsAsync (string layerIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of ApiResponse (List&lt;DataColumn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataColumn>>> DataColumnGetLayerDataColumnsAsyncWithHttpInfo (string layerIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        System.Threading.Tasks.Task<DataColumn> DataColumnSetDataTableColumnUniqueIdentifierAsync (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnSetDataTableColumnUniqueIdentifierAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        System.Threading.Tasks.Task<DataColumn> DataColumnSetLayerColumnUniqueIdentifierAsync (string layerIdentifier, string dataColumnIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnSetLayerColumnUniqueIdentifierAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataColumn</returns>
        System.Threading.Tasks.Task<DataColumn> DataColumnUpdateDataTableDataColumnAsync (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnUpdateDataTableDataColumnAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataColumn</returns>
        System.Threading.Tasks.Task<DataColumn> DataColumnUpdateLayerDataColumnAsync (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnUpdateLayerDataColumnAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataColumnApi : IDataColumnApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataColumnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataColumnApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataColumnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataColumnApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport DataColumnCreateDataTableDataColumns (string dataTableIdentifier, List<DataColumnCreateParameter> parameters)
        {
             ApiResponse<ApiInsertReport> localVarResponse = DataColumnCreateDataTableDataColumnsWithHttpInfo(dataTableIdentifier, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > DataColumnCreateDataTableDataColumnsWithHttpInfo (string dataTableIdentifier, List<DataColumnCreateParameter> parameters)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnCreateDataTableDataColumns");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataColumnApi->DataColumnCreateDataTableDataColumns");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/createDataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnCreateDataTableDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> DataColumnCreateDataTableDataColumnsAsync (string dataTableIdentifier, List<DataColumnCreateParameter> parameters)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await DataColumnCreateDataTableDataColumnsAsyncWithHttpInfo(dataTableIdentifier, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> DataColumnCreateDataTableDataColumnsAsyncWithHttpInfo (string dataTableIdentifier, List<DataColumnCreateParameter> parameters)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnCreateDataTableDataColumns");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataColumnApi->DataColumnCreateDataTableDataColumns");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/createDataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnCreateDataTableDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport DataColumnCreateLayerDataColumns (string layerIdentifier, List<DataColumnCreateParameter> parameters)
        {
             ApiResponse<ApiInsertReport> localVarResponse = DataColumnCreateLayerDataColumnsWithHttpInfo(layerIdentifier, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > DataColumnCreateLayerDataColumnsWithHttpInfo (string layerIdentifier, List<DataColumnCreateParameter> parameters)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnCreateLayerDataColumns");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataColumnApi->DataColumnCreateLayerDataColumns");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/createDataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnCreateLayerDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> DataColumnCreateLayerDataColumnsAsync (string layerIdentifier, List<DataColumnCreateParameter> parameters)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await DataColumnCreateLayerDataColumnsAsyncWithHttpInfo(layerIdentifier, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> DataColumnCreateLayerDataColumnsAsyncWithHttpInfo (string layerIdentifier, List<DataColumnCreateParameter> parameters)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnCreateLayerDataColumns");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling DataColumnApi->DataColumnCreateLayerDataColumns");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/createDataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnCreateLayerDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns></returns>
        public void DataColumnDeleteDataTableDataColumn (string dataTableIdentifier, string dataColumnIdentifier)
        {
             DataColumnDeleteDataTableDataColumnWithHttpInfo(dataTableIdentifier, dataColumnIdentifier);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataColumnDeleteDataTableDataColumnWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnDeleteDataTableDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnDeleteDataTableDataColumn");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnDeleteDataTableDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataColumnDeleteDataTableDataColumnAsync (string dataTableIdentifier, string dataColumnIdentifier)
        {
             await DataColumnDeleteDataTableDataColumnAsyncWithHttpInfo(dataTableIdentifier, dataColumnIdentifier);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataColumnDeleteDataTableDataColumnAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnDeleteDataTableDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnDeleteDataTableDataColumn");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnDeleteDataTableDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns></returns>
        public void DataColumnDeleteLayerDataColumn (string layerIdentifier, string dataColumnIdentifier)
        {
             DataColumnDeleteLayerDataColumnWithHttpInfo(layerIdentifier, dataColumnIdentifier);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataColumnDeleteLayerDataColumnWithHttpInfo (string layerIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnDeleteLayerDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnDeleteLayerDataColumn");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnDeleteLayerDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataColumnDeleteLayerDataColumnAsync (string layerIdentifier, string dataColumnIdentifier)
        {
             await DataColumnDeleteLayerDataColumnAsyncWithHttpInfo(layerIdentifier, dataColumnIdentifier);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataColumnDeleteLayerDataColumnAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnDeleteLayerDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnDeleteLayerDataColumn");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnDeleteLayerDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>DataColumn</returns>
        public DataColumn DataColumnGetDataTableDataColumn (string dataTableIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = DataColumnGetDataTableDataColumnWithHttpInfo(dataTableIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        public ApiResponse< DataColumn > DataColumnGetDataTableDataColumnWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnGetDataTableDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnGetDataTableDataColumn");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetDataTableDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        public async System.Threading.Tasks.Task<DataColumn> DataColumnGetDataTableDataColumnAsync (string dataTableIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = await DataColumnGetDataTableDataColumnAsyncWithHttpInfo(dataTableIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnGetDataTableDataColumnAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnGetDataTableDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnGetDataTableDataColumn");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetDataTableDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>List&lt;DataColumn&gt;</returns>
        public List<DataColumn> DataColumnGetDataTableDataColumns (string dataTableIdentifier)
        {
             ApiResponse<List<DataColumn>> localVarResponse = DataColumnGetDataTableDataColumnsWithHttpInfo(dataTableIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>ApiResponse of List&lt;DataColumn&gt;</returns>
        public ApiResponse< List<DataColumn> > DataColumnGetDataTableDataColumnsWithHttpInfo (string dataTableIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnGetDataTableDataColumns");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetDataTableDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataColumn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataColumn>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of List&lt;DataColumn&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataColumn>> DataColumnGetDataTableDataColumnsAsync (string dataTableIdentifier)
        {
             ApiResponse<List<DataColumn>> localVarResponse = await DataColumnGetDataTableDataColumnsAsyncWithHttpInfo(dataTableIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <returns>Task of ApiResponse (List&lt;DataColumn&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataColumn>>> DataColumnGetDataTableDataColumnsAsyncWithHttpInfo (string dataTableIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnGetDataTableDataColumns");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetDataTableDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataColumn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataColumn>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>DataColumn</returns>
        public DataColumn DataColumnGetLayerDataColumn (string layerIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = DataColumnGetLayerDataColumnWithHttpInfo(layerIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        public ApiResponse< DataColumn > DataColumnGetLayerDataColumnWithHttpInfo (string layerIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnGetLayerDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnGetLayerDataColumn");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetLayerDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        public async System.Threading.Tasks.Task<DataColumn> DataColumnGetLayerDataColumnAsync (string layerIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = await DataColumnGetLayerDataColumnAsyncWithHttpInfo(layerIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnGetLayerDataColumnAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnGetLayerDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnGetLayerDataColumn");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetLayerDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>List&lt;DataColumn&gt;</returns>
        public List<DataColumn> DataColumnGetLayerDataColumns (string layerIdentifier)
        {
             ApiResponse<List<DataColumn>> localVarResponse = DataColumnGetLayerDataColumnsWithHttpInfo(layerIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>ApiResponse of List&lt;DataColumn&gt;</returns>
        public ApiResponse< List<DataColumn> > DataColumnGetLayerDataColumnsWithHttpInfo (string layerIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnGetLayerDataColumns");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetLayerDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataColumn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataColumn>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of List&lt;DataColumn&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataColumn>> DataColumnGetLayerDataColumnsAsync (string layerIdentifier)
        {
             ApiResponse<List<DataColumn>> localVarResponse = await DataColumnGetLayerDataColumnsAsyncWithHttpInfo(layerIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of ApiResponse (List&lt;DataColumn&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataColumn>>> DataColumnGetLayerDataColumnsAsyncWithHttpInfo (string layerIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnGetLayerDataColumns");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnGetLayerDataColumns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataColumn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataColumn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataColumn>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>DataColumn</returns>
        public DataColumn DataColumnSetDataTableColumnUniqueIdentifier (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = DataColumnSetDataTableColumnUniqueIdentifierWithHttpInfo(dataTableIdentifier, dataColumnIdentifier, newIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        public ApiResponse< DataColumn > DataColumnSetDataTableColumnUniqueIdentifierWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnSetDataTableColumnUniqueIdentifier");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnSetDataTableColumnUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling DataColumnApi->DataColumnSetDataTableColumnUniqueIdentifier");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnSetDataTableColumnUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        public async System.Threading.Tasks.Task<DataColumn> DataColumnSetDataTableColumnUniqueIdentifierAsync (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = await DataColumnSetDataTableColumnUniqueIdentifierAsyncWithHttpInfo(dataTableIdentifier, dataColumnIdentifier, newIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnSetDataTableColumnUniqueIdentifierAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnSetDataTableColumnUniqueIdentifier");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnSetDataTableColumnUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling DataColumnApi->DataColumnSetDataTableColumnUniqueIdentifier");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnSetDataTableColumnUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>DataColumn</returns>
        public DataColumn DataColumnSetLayerColumnUniqueIdentifier (string layerIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = DataColumnSetLayerColumnUniqueIdentifierWithHttpInfo(layerIdentifier, dataColumnIdentifier, newIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        public ApiResponse< DataColumn > DataColumnSetLayerColumnUniqueIdentifierWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnSetLayerColumnUniqueIdentifier");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnSetLayerColumnUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling DataColumnApi->DataColumnSetLayerColumnUniqueIdentifier");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnSetLayerColumnUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of DataColumn</returns>
        public async System.Threading.Tasks.Task<DataColumn> DataColumnSetLayerColumnUniqueIdentifierAsync (string layerIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
             ApiResponse<DataColumn> localVarResponse = await DataColumnSetLayerColumnUniqueIdentifierAsyncWithHttpInfo(layerIdentifier, dataColumnIdentifier, newIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnSetLayerColumnUniqueIdentifierAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, string newIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnSetLayerColumnUniqueIdentifier");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnSetLayerColumnUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling DataColumnApi->DataColumnSetLayerColumnUniqueIdentifier");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnSetLayerColumnUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataColumn</returns>
        public DataColumn DataColumnUpdateDataTableDataColumn (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
             ApiResponse<DataColumn> localVarResponse = DataColumnUpdateDataTableDataColumnWithHttpInfo(dataTableIdentifier, dataColumnIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        public ApiResponse< DataColumn > DataColumnUpdateDataTableDataColumnWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnUpdateDataTableDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnUpdateDataTableDataColumn");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataColumnApi->DataColumnUpdateDataTableDataColumn");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnUpdateDataTableDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataColumn</returns>
        public async System.Threading.Tasks.Task<DataColumn> DataColumnUpdateDataTableDataColumnAsync (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
             ApiResponse<DataColumn> localVarResponse = await DataColumnUpdateDataTableDataColumnAsyncWithHttpInfo(dataTableIdentifier, dataColumnIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataTableIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnUpdateDataTableDataColumnAsyncWithHttpInfo (string dataTableIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
            // verify the required parameter 'dataTableIdentifier' is set
            if (dataTableIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataTableIdentifier' when calling DataColumnApi->DataColumnUpdateDataTableDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnUpdateDataTableDataColumn");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataColumnApi->DataColumnUpdateDataTableDataColumn");

            var localVarPath = "/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataTableIdentifier != null) localVarPathParams.Add("dataTableIdentifier", this.Configuration.ApiClient.ParameterToString(dataTableIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnUpdateDataTableDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataColumn</returns>
        public DataColumn DataColumnUpdateLayerDataColumn (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
             ApiResponse<DataColumn> localVarResponse = DataColumnUpdateLayerDataColumnWithHttpInfo(layerIdentifier, dataColumnIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataColumn</returns>
        public ApiResponse< DataColumn > DataColumnUpdateLayerDataColumnWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnUpdateLayerDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnUpdateLayerDataColumn");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataColumnApi->DataColumnUpdateLayerDataColumn");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnUpdateLayerDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataColumn</returns>
        public async System.Threading.Tasks.Task<DataColumn> DataColumnUpdateLayerDataColumnAsync (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
             ApiResponse<DataColumn> localVarResponse = await DataColumnUpdateLayerDataColumnAsyncWithHttpInfo(layerIdentifier, dataColumnIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataColumn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataColumn>> DataColumnUpdateLayerDataColumnAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier, DataColumnUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling DataColumnApi->DataColumnUpdateLayerDataColumn");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling DataColumnApi->DataColumnUpdateLayerDataColumn");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling DataColumnApi->DataColumnUpdateLayerDataColumn");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarPathParams.Add("dataColumnIdentifier", this.Configuration.ApiClient.ParameterToString(dataColumnIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataColumnUpdateLayerDataColumn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataColumn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataColumn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataColumn)));
        }

    }
}

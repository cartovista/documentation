/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public interface IMapApi : IApiAccessor
	{
		#region Synchronous Operations
		/// <summary>
		/// Create a map based on the provided parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>Dictionary</returns>
		Map MapCreateMap(MapCreateParameter param);

		/// <summary>
		/// Create a map based on the provided parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>ApiResponse of Dictionary</returns>
		ApiResponse<Map> MapCreateMapWithHttpInfo(MapCreateParameter param);
		/// <summary>
		/// Delete a map by map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns></returns>
		void MapDeleteMap(string mapId);

		/// <summary>
		/// Delete a map by map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of Object(void)</returns>
		ApiResponse<Object> MapDeleteMapWithHttpInfo(string mapId);
		/// <summary>
		/// Get the list of grid layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>List&lt;GridLayer&gt;</returns>
		List<GridLayer> MapGetGridLayersByMap(string mapId);

		/// <summary>
		/// Get the list of grid layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of List&lt;GridLayer&gt;</returns>
		ApiResponse<List<GridLayer>> MapGetGridLayersByMapWithHttpInfo(string mapId);
		/// <summary>
		/// Get the list of Layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>List&lt;Layer&gt;</returns>
		List<Layer> MapGetLayersByMap(string mapId);

		/// <summary>
		/// Get the list of Layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of List&lt;Layer&gt;</returns>
		ApiResponse<List<Layer>> MapGetLayersByMapWithHttpInfo(string mapId);
		/// <summary>
		/// Get a map based on the map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Dictionary</returns>
		Map MapGetMap(string mapId);

		/// <summary>
		/// Get a map based on the map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of Dictionary</returns>
		ApiResponse<Map> MapGetMapWithHttpInfo(string mapId);
		/// <summary>
		/// Get all maps the requesting user has access to.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>List&lt;Dictionary&gt;</returns>
		List<Map> MapGetMaps();

		/// <summary>
		/// Get all maps the requesting user has access to.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of List&lt;Dictionary&gt;</returns>
		ApiResponse<List<Map>> MapGetMapsWithHttpInfo();
		/// <summary>
		/// Update a map properties based on the given parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>Dictionary</returns>
		Map MapUpdateMap(string mapId, MapUpdateParameter param);

		/// <summary>
		/// Update a map properties based on the given parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>ApiResponse of Dictionary</returns>
		ApiResponse<Map> MapUpdateMapWithHttpInfo(string mapId, MapUpdateParameter param);
		#endregion Synchronous Operations
		#region Asynchronous Operations
		/// <summary>
		/// Create a map based on the provided parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>Task of Dictionary</returns>
		System.Threading.Tasks.Task<Map> MapCreateMapAsync(MapCreateParameter param);

		/// <summary>
		/// Create a map based on the provided parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>Task of ApiResponse (Dictionary)</returns>
		System.Threading.Tasks.Task<ApiResponse<Map>> MapCreateMapAsyncWithHttpInfo(MapCreateParameter param);
		/// <summary>
		/// Delete a map by map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of void</returns>
		System.Threading.Tasks.Task MapDeleteMapAsync(string mapId);

		/// <summary>
		/// Delete a map by map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse</returns>
		System.Threading.Tasks.Task<ApiResponse<Object>> MapDeleteMapAsyncWithHttpInfo(string mapId);
		/// <summary>
		/// Get the list of grid layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of List&lt;GridLayer&gt;</returns>
		System.Threading.Tasks.Task<List<GridLayer>> MapGetGridLayersByMapAsync(string mapId);

		/// <summary>
		/// Get the list of grid layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse (List&lt;GridLayer&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<GridLayer>>> MapGetGridLayersByMapAsyncWithHttpInfo(string mapId);
		/// <summary>
		/// Get the list of Layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of List&lt;Layer&gt;</returns>
		System.Threading.Tasks.Task<List<Layer>> MapGetLayersByMapAsync(string mapId);

		/// <summary>
		/// Get the list of Layers used in a map.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse (List&lt;Layer&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<Layer>>> MapGetLayersByMapAsyncWithHttpInfo(string mapId);
		/// <summary>
		/// Get a map based on the map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of Dictionary</returns>
		System.Threading.Tasks.Task<Map> MapGetMapAsync(string mapId);

		/// <summary>
		/// Get a map based on the map id or a friendly identifier.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse (Dictionary)</returns>
		System.Threading.Tasks.Task<ApiResponse<Map>> MapGetMapAsyncWithHttpInfo(string mapId);
		/// <summary>
		/// Get all maps the requesting user has access to.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of List&lt;Dictionary&gt;</returns>
		System.Threading.Tasks.Task<List<Map>> MapGetMapsAsync();

		/// <summary>
		/// Get all maps the requesting user has access to.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of ApiResponse (List&lt;Dictionary&gt;)</returns>
		System.Threading.Tasks.Task<ApiResponse<List<Map>>> MapGetMapsAsyncWithHttpInfo();
		/// <summary>
		/// Update a map properties based on the given parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>Task of Dictionary</returns>
		System.Threading.Tasks.Task<Map> MapUpdateMapAsync(string mapId, MapUpdateParameter param);

		/// <summary>
		/// Update a map properties based on the given parameters.
		/// </summary>
		/// <remarks>
		/// 
		/// </remarks>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>Task of ApiResponse (Dictionary)</returns>
		System.Threading.Tasks.Task<ApiResponse<Map>> MapUpdateMapAsyncWithHttpInfo(string mapId, MapUpdateParameter param);
		#endregion Asynchronous Operations
	}

	/// <summary>
	/// Represents a collection of functions to interact with the API endpoints
	/// </summary>
	public partial class MapApi : IMapApi
	{
		private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

		/// <summary>
		/// Initializes a new instance of the <see cref="MapApi"/> class.
		/// </summary>
		/// <returns></returns>
		public MapApi(String basePath)
		{
			this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MapApi"/> class
		/// using Configuration object
		/// </summary>
		/// <param name="configuration">An instance of Configuration</param>
		/// <returns></returns>
		public MapApi(IO.Swagger.Client.Configuration configuration = null)
		{
			if (configuration == null) // use the default one in Configuration
				this.Configuration = IO.Swagger.Client.Configuration.Default;
			else
				this.Configuration = configuration;

			ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
		}

		/// <summary>
		/// Gets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		public String GetBasePath()
		{
			return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
		}

		/// <summary>
		/// Sets the base path of the API client.
		/// </summary>
		/// <value>The base path</value>
		[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
		public void SetBasePath(String basePath)
		{
			// do nothing
		}

		/// <summary>
		/// Gets or sets the configuration object
		/// </summary>
		/// <value>An instance of the Configuration</value>
		public IO.Swagger.Client.Configuration Configuration { get; set; }

		/// <summary>
		/// Provides a factory method hook for the creation of exceptions.
		/// </summary>
		public IO.Swagger.Client.ExceptionFactory ExceptionFactory
		{
			get
			{
				if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				{
					throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
				}
				return _exceptionFactory;
			}
			set { _exceptionFactory = value; }
		}

		/// <summary>
		/// Gets the default header.
		/// </summary>
		/// <returns>Dictionary of HTTP header</returns>
		[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
		public IDictionary<String, String> DefaultHeader()
		{
			return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
		}

		/// <summary>
		/// Add default header.
		/// </summary>
		/// <param name="key">Header field name.</param>
		/// <param name="value">Header field value.</param>
		/// <returns></returns>
		[Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
		public void AddDefaultHeader(string key, string value)
		{
			this.Configuration.AddDefaultHeader(key, value);
		}

		/// <summary>
		/// Create a map based on the provided parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>Dictionary</returns>
		public Map MapCreateMap(MapCreateParameter param)
		{
			ApiResponse<Map> localVarResponse = MapCreateMapWithHttpInfo(param);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Create a map based on the provided parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>ApiResponse of Dictionary</returns>
		public ApiResponse<Map> MapCreateMapWithHttpInfo(MapCreateParameter param)
		{
			// verify the required parameter 'param' is set
			if (param == null)
				throw new ApiException(400, "Missing required parameter 'param' when calling MapApi->MapCreateMap");

			var localVarPath = "/api/v1/maps";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
								"application/json",
								"text/json",
								"application/x-www-form-urlencoded"
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (param != null && param.GetType() != typeof(byte[]))
			{
				localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
			}
			else
			{
				localVarPostBody = param; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapCreateMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Map>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(Map)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
		}

		/// <summary>
		/// Create a map based on the provided parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>Task of Dictionary</returns>
		public async System.Threading.Tasks.Task<Map> MapCreateMapAsync(MapCreateParameter param)
		{
			ApiResponse<Map> localVarResponse = await MapCreateMapAsyncWithHttpInfo(param);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Create a map based on the provided parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="param">Parameters used to create the map.</param>
		/// <returns>Task of ApiResponse (Dictionary)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Map>> MapCreateMapAsyncWithHttpInfo(MapCreateParameter param)
		{
			// verify the required parameter 'param' is set
			if (param == null)
				throw new ApiException(400, "Missing required parameter 'param' when calling MapApi->MapCreateMap");

			var localVarPath = "/api/v1/maps";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
								"application/json",
								"text/json",
								"application/x-www-form-urlencoded"
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (param != null && param.GetType() != typeof(byte[]))
			{
				localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
			}
			else
			{
				localVarPostBody = param; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapCreateMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Map>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(Map)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
		}

		/// <summary>
		/// Delete a map by map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns></returns>
		public void MapDeleteMap(string mapId)
		{
			MapDeleteMapWithHttpInfo(mapId);
		}

		/// <summary>
		/// Delete a map by map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of Object(void)</returns>
		public ApiResponse<Object> MapDeleteMapWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapDeleteMap");

			var localVarPath = "/api/v1/maps/{mapId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapDeleteMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					null);
		}

		/// <summary>
		/// Delete a map by map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of void</returns>
		public async System.Threading.Tasks.Task MapDeleteMapAsync(string mapId)
		{
			await MapDeleteMapAsyncWithHttpInfo(mapId);

		}

		/// <summary>
		/// Delete a map by map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Object>> MapDeleteMapAsyncWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapDeleteMap");

			var localVarPath = "/api/v1/maps/{mapId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapDeleteMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Object>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					null);
		}

		/// <summary>
		/// Get the list of grid layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>List&lt;GridLayer&gt;</returns>
		public List<GridLayer> MapGetGridLayersByMap(string mapId)
		{
			ApiResponse<List<GridLayer>> localVarResponse = MapGetGridLayersByMapWithHttpInfo(mapId);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Get the list of grid layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of List&lt;GridLayer&gt;</returns>
		public ApiResponse<List<GridLayer>> MapGetGridLayersByMapWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapGetGridLayersByMap");

			var localVarPath = "/api/v1/maps/{mapId}/gridLayers";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetGridLayersByMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<GridLayer>>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(List<GridLayer>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GridLayer>)));
		}

		/// <summary>
		/// Get the list of grid layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of List&lt;GridLayer&gt;</returns>
		public async System.Threading.Tasks.Task<List<GridLayer>> MapGetGridLayersByMapAsync(string mapId)
		{
			ApiResponse<List<GridLayer>> localVarResponse = await MapGetGridLayersByMapAsyncWithHttpInfo(mapId);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Get the list of grid layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse (List&lt;GridLayer&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<GridLayer>>> MapGetGridLayersByMapAsyncWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapGetGridLayersByMap");

			var localVarPath = "/api/v1/maps/{mapId}/gridLayers";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetGridLayersByMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<GridLayer>>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(List<GridLayer>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GridLayer>)));
		}

		/// <summary>
		/// Get the list of Layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>List&lt;Layer&gt;</returns>
		public List<Layer> MapGetLayersByMap(string mapId)
		{
			ApiResponse<List<Layer>> localVarResponse = MapGetLayersByMapWithHttpInfo(mapId);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Get the list of Layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of List&lt;Layer&gt;</returns>
		public ApiResponse<List<Layer>> MapGetLayersByMapWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapGetLayersByMap");

			var localVarPath = "/api/v1/maps/{mapId}/layers";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetLayersByMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Layer>>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(List<Layer>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Layer>)));
		}

		/// <summary>
		/// Get the list of Layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of List&lt;Layer&gt;</returns>
		public async System.Threading.Tasks.Task<List<Layer>> MapGetLayersByMapAsync(string mapId)
		{
			ApiResponse<List<Layer>> localVarResponse = await MapGetLayersByMapAsyncWithHttpInfo(mapId);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Get the list of Layers used in a map. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse (List&lt;Layer&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<Layer>>> MapGetLayersByMapAsyncWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapGetLayersByMap");

			var localVarPath = "/api/v1/maps/{mapId}/layers";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetLayersByMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Layer>>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(List<Layer>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Layer>)));
		}

		/// <summary>
		/// Get a map based on the map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Dictionary</returns>
		public Map MapGetMap(string mapId)
		{
			ApiResponse<Map> localVarResponse = MapGetMapWithHttpInfo(mapId);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Get a map based on the map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>ApiResponse of Dictionary</returns>
		public ApiResponse<Map> MapGetMapWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapGetMap");

			var localVarPath = "/api/v1/maps/{mapId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Map>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(Map)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
		}

		/// <summary>
		/// Get a map based on the map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of Dictionary</returns>
		public async System.Threading.Tasks.Task<Map> MapGetMapAsync(string mapId)
		{
			ApiResponse<Map> localVarResponse = await MapGetMapAsyncWithHttpInfo(mapId);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Get a map based on the map id or a friendly identifier. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <returns>Task of ApiResponse (Dictionary)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Map>> MapGetMapAsyncWithHttpInfo(string mapId)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapGetMap");

			var localVarPath = "/api/v1/maps/{mapId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Map>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(Map)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
		}

		/// <summary>
		/// Get all maps the requesting user has access to. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>List&lt;Dictionary&gt;</returns>
		public List<Map> MapGetMaps()
		{
			ApiResponse<List<Map>> localVarResponse = MapGetMapsWithHttpInfo();
			return localVarResponse.Data;
		}

		/// <summary>
		/// Get all maps the requesting user has access to. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>ApiResponse of List&lt;Dictionary&gt;</returns>
		public ApiResponse<List<Map>> MapGetMapsWithHttpInfo()
		{

			var localVarPath = "/api/v1/maps";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetMaps", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Map>>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(List<Map>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Map>)));
		}

		/// <summary>
		/// Get all maps the requesting user has access to. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of List&lt;Dictionary&gt;</returns>
		public async System.Threading.Tasks.Task<List<Map>> MapGetMapsAsync()
		{
			ApiResponse<List<Map>> localVarResponse = await MapGetMapsAsyncWithHttpInfo();
			return localVarResponse.Data;

		}

		/// <summary>
		/// Get all maps the requesting user has access to. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <returns>Task of ApiResponse (List&lt;Dictionary&gt;)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<List<Map>>> MapGetMapsAsyncWithHttpInfo()
		{

			var localVarPath = "/api/v1/maps";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapGetMaps", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<List<Map>>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(List<Map>)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Map>)));
		}

		/// <summary>
		/// Update a map properties based on the given parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>Dictionary</returns>
		public Map MapUpdateMap(string mapId, MapUpdateParameter param)
		{
			ApiResponse<Map> localVarResponse = MapUpdateMapWithHttpInfo(mapId, param);
			return localVarResponse.Data;
		}

		/// <summary>
		/// Update a map properties based on the given parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>ApiResponse of Dictionary</returns>
		public ApiResponse<Map> MapUpdateMapWithHttpInfo(string mapId, MapUpdateParameter param)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapUpdateMap");
			// verify the required parameter 'param' is set
			if (param == null)
				throw new ApiException(400, "Missing required parameter 'param' when calling MapApi->MapUpdateMap");

			var localVarPath = "/api/v1/maps/{mapId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
								"application/json",
								"text/json",
								"application/x-www-form-urlencoded"
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter
			if (param != null && param.GetType() != typeof(byte[]))
			{
				localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
			}
			else
			{
				localVarPostBody = param; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
					Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapUpdateMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Map>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(Map)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
		}

		/// <summary>
		/// Update a map properties based on the given parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>Task of Dictionary</returns>
		public async System.Threading.Tasks.Task<Map> MapUpdateMapAsync(string mapId, MapUpdateParameter param)
		{
			ApiResponse<Map> localVarResponse = await MapUpdateMapAsyncWithHttpInfo(mapId, param);
			return localVarResponse.Data;

		}

		/// <summary>
		/// Update a map properties based on the given parameters. 
		/// </summary>
		/// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
		/// <param name="mapId">Map id or a friendly identifier.</param>
		/// <param name="param">Parameters used to update the map.</param>
		/// <returns>Task of ApiResponse (Dictionary)</returns>
		public async System.Threading.Tasks.Task<ApiResponse<Map>> MapUpdateMapAsyncWithHttpInfo(string mapId, MapUpdateParameter param)
		{
			// verify the required parameter 'mapId' is set
			if (mapId == null)
				throw new ApiException(400, "Missing required parameter 'mapId' when calling MapApi->MapUpdateMap");
			// verify the required parameter 'param' is set
			if (param == null)
				throw new ApiException(400, "Missing required parameter 'param' when calling MapApi->MapUpdateMap");

			var localVarPath = "/api/v1/maps/{mapId}";
			var localVarPathParams = new Dictionary<String, String>();
			var localVarQueryParams = new List<KeyValuePair<String, String>>();
			var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
			var localVarFormParams = new Dictionary<String, String>();
			var localVarFileParams = new Dictionary<String, FileParameter>();
			Object localVarPostBody = null;

			// to determine the Content-Type header
			String[] localVarHttpContentTypes = new String[] {
								"application/json",
								"text/json",
								"application/x-www-form-urlencoded"
						};
			String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			String[] localVarHttpHeaderAccepts = new String[] {
								"application/json",
								"text/json"
						};
			String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
			if (localVarHttpHeaderAccept != null)
				localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

			if (mapId != null) localVarPathParams.Add("mapId", this.Configuration.ApiClient.ParameterToString(mapId)); // path parameter
			if (param != null && param.GetType() != typeof(byte[]))
			{
				localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
			}
			else
			{
				localVarPostBody = param; // byte array
			}


			// make the HTTP request
			IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
					Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
					localVarPathParams, localVarHttpContentType);

			int localVarStatusCode = (int)localVarResponse.StatusCode;

			if (ExceptionFactory != null)
			{
				Exception exception = ExceptionFactory("MapUpdateMap", localVarResponse);
				if (exception != null) throw exception;
			}

			return new ApiResponse<Map>(localVarStatusCode,
					localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
					(Map)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Map)));
		}

	}
}

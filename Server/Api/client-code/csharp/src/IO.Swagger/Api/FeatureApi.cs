/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport FeatureCreateFeaturesFromGeoJSON (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> FeatureCreateFeaturesFromGeoJSONWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport FeatureCreateFeaturesFromLongLat (string layerIdentifier, List<FeatureLongLatCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> FeatureCreateFeaturesFromLongLatWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport FeatureCreateFeaturesFromWKT (string layerIdentifier, List<FeatureWKTCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> FeatureCreateFeaturesFromWKTWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport FeatureCreateUpdateFeaturesFromGeoJSON (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> FeatureCreateUpdateFeaturesFromGeoJSONWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        ApiInsertReport FeatureCreateUpdateFeaturesFromLongLat (string layerIdentifier, List<FeatureLongLatCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        ApiResponse<ApiInsertReport> FeatureCreateUpdateFeaturesFromLongLatWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiCreateUpdateReport</returns>
        ApiCreateUpdateReport FeatureCreateUpdateFeaturesFromWKT (string layerIdentifier, List<FeatureWKTCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiCreateUpdateReport</returns>
        ApiResponse<ApiCreateUpdateReport> FeatureCreateUpdateFeaturesFromWKTWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiDeleteReport</returns>
        ApiDeleteReport FeatureDeleteFeature (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of ApiDeleteReport</returns>
        ApiResponse<ApiDeleteReport> FeatureDeleteFeatureWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>ApiDeleteReport</returns>
        ApiDeleteReport FeatureDeleteFeatures (string layerIdentifier, List<string> featureIdentifiers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>ApiResponse of ApiDeleteReport</returns>
        ApiResponse<ApiDeleteReport> FeatureDeleteFeaturesWithHttpInfo (string layerIdentifier, List<string> featureIdentifiers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>FeatureGeoJSON</returns>
        FeatureGeoJSON FeatureGetFeatureInGeoJSON (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of FeatureGeoJSON</returns>
        ApiResponse<FeatureGeoJSON> FeatureGetFeatureInGeoJSONWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>FeatureLongLat</returns>
        FeatureLongLat FeatureGetFeatureInLongLat (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of FeatureLongLat</returns>
        ApiResponse<FeatureLongLat> FeatureGetFeatureInLongLatWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>FeatureWKT</returns>
        FeatureWKT FeatureGetFeatureInWKT (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of FeatureWKT</returns>
        ApiResponse<FeatureWKT> FeatureGetFeatureInWKTWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;DataRow&gt;</returns>
        List<DataRow> FeatureGetFeatures (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;DataRow&gt;</returns>
        ApiResponse<List<DataRow>> FeatureGetFeaturesWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;FeatureGeoJSON&gt;</returns>
        List<FeatureGeoJSON> FeatureGetFeaturesInGeoJSON (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;FeatureGeoJSON&gt;</returns>
        ApiResponse<List<FeatureGeoJSON>> FeatureGetFeaturesInGeoJSONWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;FeatureLongLat&gt;</returns>
        List<FeatureLongLat> FeatureGetFeaturesInLongLat (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;FeatureLongLat&gt;</returns>
        ApiResponse<List<FeatureLongLat>> FeatureGetFeaturesInLongLatWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;FeatureWKT&gt;</returns>
        List<FeatureWKT> FeatureGetFeaturesInWKT (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;FeatureWKT&gt;</returns>
        ApiResponse<List<FeatureWKT>> FeatureGetFeaturesInWKTWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>FeatureGeoJSON</returns>
        FeatureGeoJSON FeatureUpdateFromGeoJSON (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of FeatureGeoJSON</returns>
        ApiResponse<FeatureGeoJSON> FeatureUpdateFromGeoJSONWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>FeatureLongLat</returns>
        FeatureLongLat FeatureUpdateFromLongLat (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of FeatureLongLat</returns>
        ApiResponse<FeatureLongLat> FeatureUpdateFromLongLatWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>FeatureWKT</returns>
        FeatureWKT FeatureUpdateGeometryFromWKT (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of FeatureWKT</returns>
        ApiResponse<FeatureWKT> FeatureUpdateGeometryFromWKTWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataRow</returns>
        DataRow FeatureUpdateValues (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataRow</returns>
        ApiResponse<DataRow> FeatureUpdateValuesWithHttpInfo (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateFeaturesFromGeoJSONAsync (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateFeaturesFromGeoJSONAsyncWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateFeaturesFromLongLatAsync (string layerIdentifier, List<FeatureLongLatCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateFeaturesFromLongLatAsyncWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateFeaturesFromWKTAsync (string layerIdentifier, List<FeatureWKTCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateFeaturesFromWKTAsyncWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateUpdateFeaturesFromGeoJSONAsync (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateUpdateFeaturesFromGeoJSONAsyncWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateUpdateFeaturesFromLongLatAsync (string layerIdentifier, List<FeatureLongLatCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateUpdateFeaturesFromLongLatAsyncWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiCreateUpdateReport</returns>
        System.Threading.Tasks.Task<ApiCreateUpdateReport> FeatureCreateUpdateFeaturesFromWKTAsync (string layerIdentifier, List<FeatureWKTCreateParameter> param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiCreateUpdateReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCreateUpdateReport>> FeatureCreateUpdateFeaturesFromWKTAsyncWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiDeleteReport</returns>
        System.Threading.Tasks.Task<ApiDeleteReport> FeatureDeleteFeatureAsync (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (ApiDeleteReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiDeleteReport>> FeatureDeleteFeatureAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>Task of ApiDeleteReport</returns>
        System.Threading.Tasks.Task<ApiDeleteReport> FeatureDeleteFeaturesAsync (string layerIdentifier, List<string> featureIdentifiers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>Task of ApiResponse (ApiDeleteReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiDeleteReport>> FeatureDeleteFeaturesAsyncWithHttpInfo (string layerIdentifier, List<string> featureIdentifiers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of FeatureGeoJSON</returns>
        System.Threading.Tasks.Task<FeatureGeoJSON> FeatureGetFeatureInGeoJSONAsync (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (FeatureGeoJSON)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureGeoJSON>> FeatureGetFeatureInGeoJSONAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of FeatureLongLat</returns>
        System.Threading.Tasks.Task<FeatureLongLat> FeatureGetFeatureInLongLatAsync (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (FeatureLongLat)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureLongLat>> FeatureGetFeatureInLongLatAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of FeatureWKT</returns>
        System.Threading.Tasks.Task<FeatureWKT> FeatureGetFeatureInWKTAsync (string layerIdentifier, string featureIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (FeatureWKT)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureWKT>> FeatureGetFeatureInWKTAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;DataRow&gt;</returns>
        System.Threading.Tasks.Task<List<DataRow>> FeatureGetFeaturesAsync (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;DataRow&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DataRow>>> FeatureGetFeaturesAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;FeatureGeoJSON&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureGeoJSON>> FeatureGetFeaturesInGeoJSONAsync (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;FeatureGeoJSON&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureGeoJSON>>> FeatureGetFeaturesInGeoJSONAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;FeatureLongLat&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureLongLat>> FeatureGetFeaturesInLongLatAsync (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;FeatureLongLat&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureLongLat>>> FeatureGetFeaturesInLongLatAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;FeatureWKT&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureWKT>> FeatureGetFeaturesInWKTAsync (string layerIdentifier, FeaturesGetParameters param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;FeatureWKT&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureWKT>>> FeatureGetFeaturesInWKTAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of FeatureGeoJSON</returns>
        System.Threading.Tasks.Task<FeatureGeoJSON> FeatureUpdateFromGeoJSONAsync (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (FeatureGeoJSON)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureGeoJSON>> FeatureUpdateFromGeoJSONAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of FeatureLongLat</returns>
        System.Threading.Tasks.Task<FeatureLongLat> FeatureUpdateFromLongLatAsync (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (FeatureLongLat)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureLongLat>> FeatureUpdateFromLongLatAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of FeatureWKT</returns>
        System.Threading.Tasks.Task<FeatureWKT> FeatureUpdateGeometryFromWKTAsync (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (FeatureWKT)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureWKT>> FeatureUpdateGeometryFromWKTAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataRow</returns>
        System.Threading.Tasks.Task<DataRow> FeatureUpdateValuesAsync (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataRow)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataRow>> FeatureUpdateValuesAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeatureApi : IFeatureApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeatureApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport FeatureCreateFeaturesFromGeoJSON (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = FeatureCreateFeaturesFromGeoJSONWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > FeatureCreateFeaturesFromGeoJSONWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateFeaturesFromGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateFeaturesFromGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createFromGeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateFeaturesFromGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateFeaturesFromGeoJSONAsync (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await FeatureCreateFeaturesFromGeoJSONAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateFeaturesFromGeoJSONAsyncWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateFeaturesFromGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateFeaturesFromGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createFromGeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateFeaturesFromGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport FeatureCreateFeaturesFromLongLat (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = FeatureCreateFeaturesFromLongLatWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > FeatureCreateFeaturesFromLongLatWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateFeaturesFromLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateFeaturesFromLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createFromLongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateFeaturesFromLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateFeaturesFromLongLatAsync (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await FeatureCreateFeaturesFromLongLatAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateFeaturesFromLongLatAsyncWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateFeaturesFromLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateFeaturesFromLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createFromLongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateFeaturesFromLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport FeatureCreateFeaturesFromWKT (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = FeatureCreateFeaturesFromWKTWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > FeatureCreateFeaturesFromWKTWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateFeaturesFromWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateFeaturesFromWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createFromWKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateFeaturesFromWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateFeaturesFromWKTAsync (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await FeatureCreateFeaturesFromWKTAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateFeaturesFromWKTAsyncWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateFeaturesFromWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateFeaturesFromWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createFromWKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateFeaturesFromWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport FeatureCreateUpdateFeaturesFromGeoJSON (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = FeatureCreateUpdateFeaturesFromGeoJSONWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > FeatureCreateUpdateFeaturesFromGeoJSONWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateUpdateFeaturesFromGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateUpdateFeaturesFromGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromGeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateUpdateFeaturesFromGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateUpdateFeaturesFromGeoJSONAsync (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await FeatureCreateUpdateFeaturesFromGeoJSONAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateUpdateFeaturesFromGeoJSONAsyncWithHttpInfo (string layerIdentifier, List<FeatureGeoJSONCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateUpdateFeaturesFromGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateUpdateFeaturesFromGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromGeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateUpdateFeaturesFromGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiInsertReport</returns>
        public ApiInsertReport FeatureCreateUpdateFeaturesFromLongLat (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = FeatureCreateUpdateFeaturesFromLongLatWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiInsertReport</returns>
        public ApiResponse< ApiInsertReport > FeatureCreateUpdateFeaturesFromLongLatWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateUpdateFeaturesFromLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateUpdateFeaturesFromLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromLongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateUpdateFeaturesFromLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiInsertReport</returns>
        public async System.Threading.Tasks.Task<ApiInsertReport> FeatureCreateUpdateFeaturesFromLongLatAsync (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
             ApiResponse<ApiInsertReport> localVarResponse = await FeatureCreateUpdateFeaturesFromLongLatAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiInsertReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiInsertReport>> FeatureCreateUpdateFeaturesFromLongLatAsyncWithHttpInfo (string layerIdentifier, List<FeatureLongLatCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateUpdateFeaturesFromLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateUpdateFeaturesFromLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromLongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateUpdateFeaturesFromLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiInsertReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiInsertReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiInsertReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiCreateUpdateReport</returns>
        public ApiCreateUpdateReport FeatureCreateUpdateFeaturesFromWKT (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
             ApiResponse<ApiCreateUpdateReport> localVarResponse = FeatureCreateUpdateFeaturesFromWKTWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of ApiCreateUpdateReport</returns>
        public ApiResponse< ApiCreateUpdateReport > FeatureCreateUpdateFeaturesFromWKTWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateUpdateFeaturesFromWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateUpdateFeaturesFromWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromWKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateUpdateFeaturesFromWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCreateUpdateReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCreateUpdateReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCreateUpdateReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiCreateUpdateReport</returns>
        public async System.Threading.Tasks.Task<ApiCreateUpdateReport> FeatureCreateUpdateFeaturesFromWKTAsync (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
             ApiResponse<ApiCreateUpdateReport> localVarResponse = await FeatureCreateUpdateFeaturesFromWKTAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (ApiCreateUpdateReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCreateUpdateReport>> FeatureCreateUpdateFeaturesFromWKTAsyncWithHttpInfo (string layerIdentifier, List<FeatureWKTCreateParameter> param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureCreateUpdateFeaturesFromWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureCreateUpdateFeaturesFromWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromWKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureCreateUpdateFeaturesFromWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCreateUpdateReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiCreateUpdateReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCreateUpdateReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiDeleteReport</returns>
        public ApiDeleteReport FeatureDeleteFeature (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<ApiDeleteReport> localVarResponse = FeatureDeleteFeatureWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of ApiDeleteReport</returns>
        public ApiResponse< ApiDeleteReport > FeatureDeleteFeatureWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureDeleteFeature");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureDeleteFeature");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureDeleteFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiDeleteReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiDeleteReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiDeleteReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiDeleteReport</returns>
        public async System.Threading.Tasks.Task<ApiDeleteReport> FeatureDeleteFeatureAsync (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<ApiDeleteReport> localVarResponse = await FeatureDeleteFeatureAsyncWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (ApiDeleteReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiDeleteReport>> FeatureDeleteFeatureAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureDeleteFeature");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureDeleteFeature");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureDeleteFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiDeleteReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiDeleteReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiDeleteReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>ApiDeleteReport</returns>
        public ApiDeleteReport FeatureDeleteFeatures (string layerIdentifier, List<string> featureIdentifiers)
        {
             ApiResponse<ApiDeleteReport> localVarResponse = FeatureDeleteFeaturesWithHttpInfo(layerIdentifier, featureIdentifiers);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>ApiResponse of ApiDeleteReport</returns>
        public ApiResponse< ApiDeleteReport > FeatureDeleteFeaturesWithHttpInfo (string layerIdentifier, List<string> featureIdentifiers)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureDeleteFeatures");
            // verify the required parameter 'featureIdentifiers' is set
            if (featureIdentifiers == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifiers' when calling FeatureApi->FeatureDeleteFeatures");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifiers != null && featureIdentifiers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureIdentifiers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureIdentifiers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureDeleteFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiDeleteReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiDeleteReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiDeleteReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>Task of ApiDeleteReport</returns>
        public async System.Threading.Tasks.Task<ApiDeleteReport> FeatureDeleteFeaturesAsync (string layerIdentifier, List<string> featureIdentifiers)
        {
             ApiResponse<ApiDeleteReport> localVarResponse = await FeatureDeleteFeaturesAsyncWithHttpInfo(layerIdentifier, featureIdentifiers);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifiers"></param>
        /// <returns>Task of ApiResponse (ApiDeleteReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiDeleteReport>> FeatureDeleteFeaturesAsyncWithHttpInfo (string layerIdentifier, List<string> featureIdentifiers)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureDeleteFeatures");
            // verify the required parameter 'featureIdentifiers' is set
            if (featureIdentifiers == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifiers' when calling FeatureApi->FeatureDeleteFeatures");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifiers != null && featureIdentifiers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureIdentifiers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureIdentifiers; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureDeleteFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiDeleteReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiDeleteReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiDeleteReport)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>FeatureGeoJSON</returns>
        public FeatureGeoJSON FeatureGetFeatureInGeoJSON (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<FeatureGeoJSON> localVarResponse = FeatureGetFeatureInGeoJSONWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of FeatureGeoJSON</returns>
        public ApiResponse< FeatureGeoJSON > FeatureGetFeatureInGeoJSONWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatureInGeoJSON");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureGetFeatureInGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/GeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatureInGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureGeoJSON>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureGeoJSON) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureGeoJSON)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of FeatureGeoJSON</returns>
        public async System.Threading.Tasks.Task<FeatureGeoJSON> FeatureGetFeatureInGeoJSONAsync (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<FeatureGeoJSON> localVarResponse = await FeatureGetFeatureInGeoJSONAsyncWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (FeatureGeoJSON)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureGeoJSON>> FeatureGetFeatureInGeoJSONAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatureInGeoJSON");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureGetFeatureInGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/GeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatureInGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureGeoJSON>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureGeoJSON) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureGeoJSON)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>FeatureLongLat</returns>
        public FeatureLongLat FeatureGetFeatureInLongLat (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<FeatureLongLat> localVarResponse = FeatureGetFeatureInLongLatWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of FeatureLongLat</returns>
        public ApiResponse< FeatureLongLat > FeatureGetFeatureInLongLatWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatureInLongLat");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureGetFeatureInLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/LongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatureInLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureLongLat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureLongLat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureLongLat)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of FeatureLongLat</returns>
        public async System.Threading.Tasks.Task<FeatureLongLat> FeatureGetFeatureInLongLatAsync (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<FeatureLongLat> localVarResponse = await FeatureGetFeatureInLongLatAsyncWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (FeatureLongLat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureLongLat>> FeatureGetFeatureInLongLatAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatureInLongLat");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureGetFeatureInLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/LongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatureInLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureLongLat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureLongLat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureLongLat)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>FeatureWKT</returns>
        public FeatureWKT FeatureGetFeatureInWKT (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<FeatureWKT> localVarResponse = FeatureGetFeatureInWKTWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>ApiResponse of FeatureWKT</returns>
        public ApiResponse< FeatureWKT > FeatureGetFeatureInWKTWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatureInWKT");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureGetFeatureInWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/WKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatureInWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureWKT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureWKT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureWKT)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of FeatureWKT</returns>
        public async System.Threading.Tasks.Task<FeatureWKT> FeatureGetFeatureInWKTAsync (string layerIdentifier, string featureIdentifier)
        {
             ApiResponse<FeatureWKT> localVarResponse = await FeatureGetFeatureInWKTAsyncWithHttpInfo(layerIdentifier, featureIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <returns>Task of ApiResponse (FeatureWKT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureWKT>> FeatureGetFeatureInWKTAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatureInWKT");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureGetFeatureInWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/WKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatureInWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureWKT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureWKT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureWKT)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;DataRow&gt;</returns>
        public List<DataRow> FeatureGetFeatures (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<DataRow>> localVarResponse = FeatureGetFeaturesWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;DataRow&gt;</returns>
        public ApiResponse< List<DataRow> > FeatureGetFeaturesWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatures");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeatures");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataRow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataRow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataRow>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;DataRow&gt;</returns>
        public async System.Threading.Tasks.Task<List<DataRow>> FeatureGetFeaturesAsync (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<DataRow>> localVarResponse = await FeatureGetFeaturesAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;DataRow&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DataRow>>> FeatureGetFeaturesAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeatures");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeatures");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DataRow>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DataRow>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DataRow>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;FeatureGeoJSON&gt;</returns>
        public List<FeatureGeoJSON> FeatureGetFeaturesInGeoJSON (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<FeatureGeoJSON>> localVarResponse = FeatureGetFeaturesInGeoJSONWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;FeatureGeoJSON&gt;</returns>
        public ApiResponse< List<FeatureGeoJSON> > FeatureGetFeaturesInGeoJSONWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeaturesInGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeaturesInGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/GeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeaturesInGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureGeoJSON>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureGeoJSON>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureGeoJSON>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;FeatureGeoJSON&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureGeoJSON>> FeatureGetFeaturesInGeoJSONAsync (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<FeatureGeoJSON>> localVarResponse = await FeatureGetFeaturesInGeoJSONAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;FeatureGeoJSON&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureGeoJSON>>> FeatureGetFeaturesInGeoJSONAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeaturesInGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeaturesInGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/GeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeaturesInGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureGeoJSON>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureGeoJSON>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureGeoJSON>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;FeatureLongLat&gt;</returns>
        public List<FeatureLongLat> FeatureGetFeaturesInLongLat (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<FeatureLongLat>> localVarResponse = FeatureGetFeaturesInLongLatWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;FeatureLongLat&gt;</returns>
        public ApiResponse< List<FeatureLongLat> > FeatureGetFeaturesInLongLatWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeaturesInLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeaturesInLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/LongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeaturesInLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureLongLat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureLongLat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureLongLat>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;FeatureLongLat&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureLongLat>> FeatureGetFeaturesInLongLatAsync (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<FeatureLongLat>> localVarResponse = await FeatureGetFeaturesInLongLatAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;FeatureLongLat&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureLongLat>>> FeatureGetFeaturesInLongLatAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeaturesInLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeaturesInLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/LongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeaturesInLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureLongLat>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureLongLat>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureLongLat>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>List&lt;FeatureWKT&gt;</returns>
        public List<FeatureWKT> FeatureGetFeaturesInWKT (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<FeatureWKT>> localVarResponse = FeatureGetFeaturesInWKTWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of List&lt;FeatureWKT&gt;</returns>
        public ApiResponse< List<FeatureWKT> > FeatureGetFeaturesInWKTWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeaturesInWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeaturesInWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/WKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeaturesInWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureWKT>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureWKT>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureWKT>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of List&lt;FeatureWKT&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureWKT>> FeatureGetFeaturesInWKTAsync (string layerIdentifier, FeaturesGetParameters param)
        {
             ApiResponse<List<FeatureWKT>> localVarResponse = await FeatureGetFeaturesInWKTAsyncWithHttpInfo(layerIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (List&lt;FeatureWKT&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureWKT>>> FeatureGetFeaturesInWKTAsyncWithHttpInfo (string layerIdentifier, FeaturesGetParameters param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureGetFeaturesInWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureGetFeaturesInWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Features/WKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureGetFeaturesInWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureWKT>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureWKT>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureWKT>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>FeatureGeoJSON</returns>
        public FeatureGeoJSON FeatureUpdateFromGeoJSON (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param)
        {
             ApiResponse<FeatureGeoJSON> localVarResponse = FeatureUpdateFromGeoJSONWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of FeatureGeoJSON</returns>
        public ApiResponse< FeatureGeoJSON > FeatureUpdateFromGeoJSONWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateFromGeoJSON");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateFromGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateFromGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromGeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateFromGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureGeoJSON>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureGeoJSON) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureGeoJSON)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of FeatureGeoJSON</returns>
        public async System.Threading.Tasks.Task<FeatureGeoJSON> FeatureUpdateFromGeoJSONAsync (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param)
        {
             ApiResponse<FeatureGeoJSON> localVarResponse = await FeatureUpdateFromGeoJSONAsyncWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (FeatureGeoJSON)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureGeoJSON>> FeatureUpdateFromGeoJSONAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureGeoJSONUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateFromGeoJSON");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateFromGeoJSON");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateFromGeoJSON");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromGeoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateFromGeoJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureGeoJSON>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureGeoJSON) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureGeoJSON)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>FeatureLongLat</returns>
        public FeatureLongLat FeatureUpdateFromLongLat (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param)
        {
             ApiResponse<FeatureLongLat> localVarResponse = FeatureUpdateFromLongLatWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of FeatureLongLat</returns>
        public ApiResponse< FeatureLongLat > FeatureUpdateFromLongLatWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateFromLongLat");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateFromLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateFromLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromLongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateFromLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureLongLat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureLongLat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureLongLat)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of FeatureLongLat</returns>
        public async System.Threading.Tasks.Task<FeatureLongLat> FeatureUpdateFromLongLatAsync (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param)
        {
             ApiResponse<FeatureLongLat> localVarResponse = await FeatureUpdateFromLongLatAsyncWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (FeatureLongLat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureLongLat>> FeatureUpdateFromLongLatAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureLongLatUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateFromLongLat");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateFromLongLat");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateFromLongLat");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromLongLat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateFromLongLat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureLongLat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureLongLat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureLongLat)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>FeatureWKT</returns>
        public FeatureWKT FeatureUpdateGeometryFromWKT (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param)
        {
             ApiResponse<FeatureWKT> localVarResponse = FeatureUpdateGeometryFromWKTWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of FeatureWKT</returns>
        public ApiResponse< FeatureWKT > FeatureUpdateGeometryFromWKTWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateGeometryFromWKT");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateGeometryFromWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateGeometryFromWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateGeometryFromWKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateGeometryFromWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureWKT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureWKT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureWKT)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of FeatureWKT</returns>
        public async System.Threading.Tasks.Task<FeatureWKT> FeatureUpdateGeometryFromWKTAsync (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param)
        {
             ApiResponse<FeatureWKT> localVarResponse = await FeatureUpdateGeometryFromWKTAsyncWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (FeatureWKT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureWKT>> FeatureUpdateGeometryFromWKTAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, FeatureWKTUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateGeometryFromWKT");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateGeometryFromWKT");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateGeometryFromWKT");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateGeometryFromWKT";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateGeometryFromWKT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureWKT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureWKT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureWKT)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>DataRow</returns>
        public DataRow FeatureUpdateValues (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param)
        {
             ApiResponse<DataRow> localVarResponse = FeatureUpdateValuesWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>ApiResponse of DataRow</returns>
        public ApiResponse< DataRow > FeatureUpdateValuesWithHttpInfo (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateValues");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateValues");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateValues");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataRow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataRow)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of DataRow</returns>
        public async System.Threading.Tasks.Task<DataRow> FeatureUpdateValuesAsync (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param)
        {
             ApiResponse<DataRow> localVarResponse = await FeatureUpdateValuesAsyncWithHttpInfo(layerIdentifier, featureIdentifier, param);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="featureIdentifier"></param>
        /// <param name="param"></param>
        /// <returns>Task of ApiResponse (DataRow)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataRow>> FeatureUpdateValuesAsyncWithHttpInfo (string layerIdentifier, string featureIdentifier, DataRowUpdateParameter param)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling FeatureApi->FeatureUpdateValues");
            // verify the required parameter 'featureIdentifier' is set
            if (featureIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'featureIdentifier' when calling FeatureApi->FeatureUpdateValues");
            // verify the required parameter 'param' is set
            if (param == null)
                throw new ApiException(400, "Missing required parameter 'param' when calling FeatureApi->FeatureUpdateValues");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateValues";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (featureIdentifier != null) localVarPathParams.Add("featureIdentifier", this.Configuration.ApiClient.ParameterToString(featureIdentifier)); // path parameter
            if (param != null && param.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(param); // http body (model) parameter
            }
            else
            {
                localVarPostBody = param; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeatureUpdateValues", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataRow>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataRow) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataRow)));
        }

    }
}

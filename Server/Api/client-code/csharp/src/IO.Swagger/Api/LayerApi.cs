/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILayerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Layer</returns>
        Layer LayerCreateLayer (LayerCreateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerCreateLayerWithHttpInfo (LayerCreateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Layer</returns>
        Layer LayerCreateLayerFromZip (System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerCreateLayerFromZipWithHttpInfo (System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns></returns>
        void LayerDeleteLayerById (string layerIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LayerDeleteLayerByIdWithHttpInfo (string layerIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Layer</returns>
        Layer LayerGetLayerById (string layerIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerGetLayerByIdWithHttpInfo (string layerIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Layer&gt;</returns>
        List<Layer> LayerGetLayers ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Layer&gt;</returns>
        ApiResponse<List<Layer>> LayerGetLayersWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Layer</returns>
        Layer LayerSetDataColumnUniqueId (string layerIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerSetDataColumnUniqueIdWithHttpInfo (string layerIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Layer</returns>
        Layer LayerSetUniqueIdentifier (string layerIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerSetUniqueIdentifierWithHttpInfo (string layerIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Layer</returns>
        Layer LayerUpdateLayer (string layerIdentifier, LayerUpdateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerUpdateLayerWithHttpInfo (string layerIdentifier, LayerUpdateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Layer</returns>
        Layer LayerUpdateLayerFromZip (string layerIdentifier, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of Layer</returns>
        ApiResponse<Layer> LayerUpdateLayerFromZipWithHttpInfo (string layerIdentifier, System.IO.Stream _file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerCreateLayerAsync (LayerCreateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerCreateLayerAsyncWithHttpInfo (LayerCreateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerCreateLayerFromZipAsync (System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerCreateLayerFromZipAsyncWithHttpInfo (System.IO.Stream _file);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LayerDeleteLayerByIdAsync (string layerIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LayerDeleteLayerByIdAsyncWithHttpInfo (string layerIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerGetLayerByIdAsync (string layerIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerGetLayerByIdAsyncWithHttpInfo (string layerIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Layer&gt;</returns>
        System.Threading.Tasks.Task<List<Layer>> LayerGetLayersAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Layer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Layer>>> LayerGetLayersAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerSetDataColumnUniqueIdAsync (string layerIdentifier, string dataColumnIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerSetDataColumnUniqueIdAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerSetUniqueIdentifierAsync (string layerIdentifier, string newIdentifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerSetUniqueIdentifierAsyncWithHttpInfo (string layerIdentifier, string newIdentifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerUpdateLayerAsync (string layerIdentifier, LayerUpdateParameter parameters);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerUpdateLayerAsyncWithHttpInfo (string layerIdentifier, LayerUpdateParameter parameters);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of Layer</returns>
        System.Threading.Tasks.Task<Layer> LayerUpdateLayerFromZipAsync (string layerIdentifier, System.IO.Stream _file);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Layer>> LayerUpdateLayerFromZipAsyncWithHttpInfo (string layerIdentifier, System.IO.Stream _file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LayerApi : ILayerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LayerApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LayerApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Layer</returns>
        public Layer LayerCreateLayer (LayerCreateParameter parameters)
        {
             ApiResponse<Layer> localVarResponse = LayerCreateLayerWithHttpInfo(parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerCreateLayerWithHttpInfo (LayerCreateParameter parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling LayerApi->LayerCreateLayer");

            var localVarPath = "/api/v1/createLayer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerCreateLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerCreateLayerAsync (LayerCreateParameter parameters)
        {
             ApiResponse<Layer> localVarResponse = await LayerCreateLayerAsyncWithHttpInfo(parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerCreateLayerAsyncWithHttpInfo (LayerCreateParameter parameters)
        {
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling LayerApi->LayerCreateLayer");

            var localVarPath = "/api/v1/createLayer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerCreateLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Layer</returns>
        public Layer LayerCreateLayerFromZip (System.IO.Stream _file)
        {
             ApiResponse<Layer> localVarResponse = LayerCreateLayerFromZipWithHttpInfo(_file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerCreateLayerFromZipWithHttpInfo (System.IO.Stream _file)
        {
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling LayerApi->LayerCreateLayerFromZip");

            var localVarPath = "/api/v1/Layer/createFromZip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerCreateLayerFromZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerCreateLayerFromZipAsync (System.IO.Stream _file)
        {
             ApiResponse<Layer> localVarResponse = await LayerCreateLayerFromZipAsyncWithHttpInfo(_file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerCreateLayerFromZipAsyncWithHttpInfo (System.IO.Stream _file)
        {
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling LayerApi->LayerCreateLayerFromZip");

            var localVarPath = "/api/v1/Layer/createFromZip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerCreateLayerFromZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns></returns>
        public void LayerDeleteLayerById (string layerIdentifier)
        {
             LayerDeleteLayerByIdWithHttpInfo(layerIdentifier);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LayerDeleteLayerByIdWithHttpInfo (string layerIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerDeleteLayerById");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerDeleteLayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LayerDeleteLayerByIdAsync (string layerIdentifier)
        {
             await LayerDeleteLayerByIdAsyncWithHttpInfo(layerIdentifier);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LayerDeleteLayerByIdAsyncWithHttpInfo (string layerIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerDeleteLayerById");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerDeleteLayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Layer</returns>
        public Layer LayerGetLayerById (string layerIdentifier)
        {
             ApiResponse<Layer> localVarResponse = LayerGetLayerByIdWithHttpInfo(layerIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerGetLayerByIdWithHttpInfo (string layerIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerGetLayerById");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerGetLayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerGetLayerByIdAsync (string layerIdentifier)
        {
             ApiResponse<Layer> localVarResponse = await LayerGetLayerByIdAsyncWithHttpInfo(layerIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerGetLayerByIdAsyncWithHttpInfo (string layerIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerGetLayerById");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerGetLayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Layer&gt;</returns>
        public List<Layer> LayerGetLayers ()
        {
             ApiResponse<List<Layer>> localVarResponse = LayerGetLayersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Layer&gt;</returns>
        public ApiResponse< List<Layer> > LayerGetLayersWithHttpInfo ()
        {

            var localVarPath = "/api/v1/Layers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerGetLayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Layer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Layer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Layer>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Layer&gt;</returns>
        public async System.Threading.Tasks.Task<List<Layer>> LayerGetLayersAsync ()
        {
             ApiResponse<List<Layer>> localVarResponse = await LayerGetLayersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Layer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Layer>>> LayerGetLayersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/Layers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerGetLayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Layer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Layer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Layer>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Layer</returns>
        public Layer LayerSetDataColumnUniqueId (string layerIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<Layer> localVarResponse = LayerSetDataColumnUniqueIdWithHttpInfo(layerIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerSetDataColumnUniqueIdWithHttpInfo (string layerIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerSetDataColumnUniqueId");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling LayerApi->LayerSetDataColumnUniqueId");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/setDataColumnUniqueId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataColumnIdentifier", dataColumnIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerSetDataColumnUniqueId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerSetDataColumnUniqueIdAsync (string layerIdentifier, string dataColumnIdentifier)
        {
             ApiResponse<Layer> localVarResponse = await LayerSetDataColumnUniqueIdAsyncWithHttpInfo(layerIdentifier, dataColumnIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="dataColumnIdentifier"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerSetDataColumnUniqueIdAsyncWithHttpInfo (string layerIdentifier, string dataColumnIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerSetDataColumnUniqueId");
            // verify the required parameter 'dataColumnIdentifier' is set
            if (dataColumnIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'dataColumnIdentifier' when calling LayerApi->LayerSetDataColumnUniqueId");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/setDataColumnUniqueId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (dataColumnIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataColumnIdentifier", dataColumnIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerSetDataColumnUniqueId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Layer</returns>
        public Layer LayerSetUniqueIdentifier (string layerIdentifier, string newIdentifier)
        {
             ApiResponse<Layer> localVarResponse = LayerSetUniqueIdentifierWithHttpInfo(layerIdentifier, newIdentifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerSetUniqueIdentifierWithHttpInfo (string layerIdentifier, string newIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerSetUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling LayerApi->LayerSetUniqueIdentifier");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerSetUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerSetUniqueIdentifierAsync (string layerIdentifier, string newIdentifier)
        {
             ApiResponse<Layer> localVarResponse = await LayerSetUniqueIdentifierAsyncWithHttpInfo(layerIdentifier, newIdentifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="newIdentifier"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerSetUniqueIdentifierAsyncWithHttpInfo (string layerIdentifier, string newIdentifier)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerSetUniqueIdentifier");
            // verify the required parameter 'newIdentifier' is set
            if (newIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'newIdentifier' when calling LayerApi->LayerSetUniqueIdentifier");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/setUniqueIdentifier";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (newIdentifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "newIdentifier", newIdentifier)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerSetUniqueIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Layer</returns>
        public Layer LayerUpdateLayer (string layerIdentifier, LayerUpdateParameter parameters)
        {
             ApiResponse<Layer> localVarResponse = LayerUpdateLayerWithHttpInfo(layerIdentifier, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerUpdateLayerWithHttpInfo (string layerIdentifier, LayerUpdateParameter parameters)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerUpdateLayer");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling LayerApi->LayerUpdateLayer");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerUpdateLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerUpdateLayerAsync (string layerIdentifier, LayerUpdateParameter parameters)
        {
             ApiResponse<Layer> localVarResponse = await LayerUpdateLayerAsyncWithHttpInfo(layerIdentifier, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="parameters"></param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerUpdateLayerAsyncWithHttpInfo (string layerIdentifier, LayerUpdateParameter parameters)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerUpdateLayer");
            // verify the required parameter 'parameters' is set
            if (parameters == null)
                throw new ApiException(400, "Missing required parameter 'parameters' when calling LayerApi->LayerUpdateLayer");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerUpdateLayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Layer</returns>
        public Layer LayerUpdateLayerFromZip (string layerIdentifier, System.IO.Stream _file)
        {
             ApiResponse<Layer> localVarResponse = LayerUpdateLayerFromZipWithHttpInfo(layerIdentifier, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>ApiResponse of Layer</returns>
        public ApiResponse< Layer > LayerUpdateLayerFromZipWithHttpInfo (string layerIdentifier, System.IO.Stream _file)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerUpdateLayerFromZip");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling LayerApi->LayerUpdateLayerFromZip");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/updateFromZip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerUpdateLayerFromZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of Layer</returns>
        public async System.Threading.Tasks.Task<Layer> LayerUpdateLayerFromZipAsync (string layerIdentifier, System.IO.Stream _file)
        {
             ApiResponse<Layer> localVarResponse = await LayerUpdateLayerFromZipAsyncWithHttpInfo(layerIdentifier, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerIdentifier"></param>
        /// <param name="_file">Upload file</param>
        /// <returns>Task of ApiResponse (Layer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Layer>> LayerUpdateLayerFromZipAsyncWithHttpInfo (string layerIdentifier, System.IO.Stream _file)
        {
            // verify the required parameter 'layerIdentifier' is set
            if (layerIdentifier == null)
                throw new ApiException(400, "Missing required parameter 'layerIdentifier' when calling LayerApi->LayerUpdateLayerFromZip");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling LayerApi->LayerUpdateLayerFromZip");

            var localVarPath = "/api/v1/Layer/{layerIdentifier}/updateFromZip";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (layerIdentifier != null) localVarPathParams.Add("layerIdentifier", this.Configuration.ApiClient.ParameterToString(layerIdentifier)); // path parameter
            if (_file != null) localVarFileParams.Add("File", this.Configuration.ApiClient.ParameterToFile("File", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LayerUpdateLayerFromZip", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Layer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Layer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Layer)));
        }

    }
}

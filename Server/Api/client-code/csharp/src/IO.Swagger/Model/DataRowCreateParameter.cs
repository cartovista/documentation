/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DataRowCreateParameter
    /// </summary>
    [DataContract]
    public partial class DataRowCreateParameter :  IEquatable<DataRowCreateParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataRowCreateParameter" /> class.
        /// </summary>
        /// <param name="dataColumnsIdentifiers">dataColumnsIdentifiers.</param>
        /// <param name="values">values.</param>
        public DataRowCreateParameter(List<string> dataColumnsIdentifiers = default(List<string>), List<Object> values = default(List<Object>))
        {
            this.DataColumnsIdentifiers = dataColumnsIdentifiers;
            this.Values = values;
        }
        
        /// <summary>
        /// Gets or Sets DataColumnsIdentifiers
        /// </summary>
        [DataMember(Name="DataColumnsIdentifiers", EmitDefaultValue=false)]
        public List<string> DataColumnsIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="Values", EmitDefaultValue=false)]
        public List<Object> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataRowCreateParameter {\n");
            sb.Append("  DataColumnsIdentifiers: ").Append(DataColumnsIdentifiers).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataRowCreateParameter);
        }

        /// <summary>
        /// Returns true if DataRowCreateParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of DataRowCreateParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataRowCreateParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataColumnsIdentifiers == input.DataColumnsIdentifiers ||
                    this.DataColumnsIdentifiers != null &&
                    this.DataColumnsIdentifiers.SequenceEqual(input.DataColumnsIdentifiers)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataColumnsIdentifiers != null)
                    hashCode = hashCode * 59 + this.DataColumnsIdentifiers.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RouteParams
    /// </summary>
    [DataContract]
    public partial class RouteParams :  IEquatable<RouteParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteParams" /> class.
        /// </summary>
        /// <param name="originLatitude">originLatitude.</param>
        /// <param name="originLongitude">originLongitude.</param>
        /// <param name="destinationLatitude">destinationLatitude.</param>
        /// <param name="destinationLongitude">destinationLongitude.</param>
        public RouteParams(double? originLatitude = default(double?), double? originLongitude = default(double?), double? destinationLatitude = default(double?), double? destinationLongitude = default(double?))
        {
            this.OriginLatitude = originLatitude;
            this.OriginLongitude = originLongitude;
            this.DestinationLatitude = destinationLatitude;
            this.DestinationLongitude = destinationLongitude;
        }
        
        /// <summary>
        /// Gets or Sets OriginLatitude
        /// </summary>
        [DataMember(Name="originLatitude", EmitDefaultValue=false)]
        public double? OriginLatitude { get; set; }

        /// <summary>
        /// Gets or Sets OriginLongitude
        /// </summary>
        [DataMember(Name="originLongitude", EmitDefaultValue=false)]
        public double? OriginLongitude { get; set; }

        /// <summary>
        /// Gets or Sets DestinationLatitude
        /// </summary>
        [DataMember(Name="destinationLatitude", EmitDefaultValue=false)]
        public double? DestinationLatitude { get; set; }

        /// <summary>
        /// Gets or Sets DestinationLongitude
        /// </summary>
        [DataMember(Name="destinationLongitude", EmitDefaultValue=false)]
        public double? DestinationLongitude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RouteParams {\n");
            sb.Append("  OriginLatitude: ").Append(OriginLatitude).Append("\n");
            sb.Append("  OriginLongitude: ").Append(OriginLongitude).Append("\n");
            sb.Append("  DestinationLatitude: ").Append(DestinationLatitude).Append("\n");
            sb.Append("  DestinationLongitude: ").Append(DestinationLongitude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RouteParams);
        }

        /// <summary>
        /// Returns true if RouteParams instances are equal
        /// </summary>
        /// <param name="input">Instance of RouteParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RouteParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginLatitude == input.OriginLatitude ||
                    (this.OriginLatitude != null &&
                    this.OriginLatitude.Equals(input.OriginLatitude))
                ) && 
                (
                    this.OriginLongitude == input.OriginLongitude ||
                    (this.OriginLongitude != null &&
                    this.OriginLongitude.Equals(input.OriginLongitude))
                ) && 
                (
                    this.DestinationLatitude == input.DestinationLatitude ||
                    (this.DestinationLatitude != null &&
                    this.DestinationLatitude.Equals(input.DestinationLatitude))
                ) && 
                (
                    this.DestinationLongitude == input.DestinationLongitude ||
                    (this.DestinationLongitude != null &&
                    this.DestinationLongitude.Equals(input.DestinationLongitude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginLatitude != null)
                    hashCode = hashCode * 59 + this.OriginLatitude.GetHashCode();
                if (this.OriginLongitude != null)
                    hashCode = hashCode * 59 + this.OriginLongitude.GetHashCode();
                if (this.DestinationLatitude != null)
                    hashCode = hashCode * 59 + this.DestinationLatitude.GetHashCode();
                if (this.DestinationLongitude != null)
                    hashCode = hashCode * 59 + this.DestinationLongitude.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

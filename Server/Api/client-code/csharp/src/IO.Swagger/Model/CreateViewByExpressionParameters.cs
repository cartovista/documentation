/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateViewByExpressionParameters
    /// </summary>
    [DataContract]
    public partial class CreateViewByExpressionParameters :  IEquatable<CreateViewByExpressionParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateViewByExpressionParameters" /> class.
        /// </summary>
        /// <param name="title">The view title..</param>
        /// <param name="expression">The view expression. Column friendly identifier can be used and must be surrounded by square bracket.  Ex: [Name] &#x3D; &#39;Test&#39;.</param>
        public CreateViewByExpressionParameters(string title = default(string), string expression = default(string))
        {
            this.Title = title;
            this.Expression = expression;
        }
        
        /// <summary>
        /// The view title.
        /// </summary>
        /// <value>The view title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The view expression. Column friendly identifier can be used and must be surrounded by square bracket.  Ex: [Name] &#x3D; &#39;Test&#39;
        /// </summary>
        /// <value>The view expression. Column friendly identifier can be used and must be surrounded by square bracket.  Ex: [Name] &#x3D; &#39;Test&#39;</value>
        [DataMember(Name="expression", EmitDefaultValue=false)]
        public string Expression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateViewByExpressionParameters {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateViewByExpressionParameters);
        }

        /// <summary>
        /// Returns true if CreateViewByExpressionParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateViewByExpressionParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateViewByExpressionParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                    this.Expression.Equals(input.Expression))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

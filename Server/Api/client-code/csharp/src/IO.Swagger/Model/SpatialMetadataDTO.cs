/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SpatialMetadataDTO
    /// </summary>
    [DataContract]
    public partial class SpatialMetadataDTO :  IEquatable<SpatialMetadataDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines GeometryTypekBackingField
        /// </summary>
        public enum GeometryTypekBackingFieldEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3
        }

        /// <summary>
        /// Gets or Sets GeometryTypekBackingField
        /// </summary>
        [DataMember(Name="&lt;geometryType&gt;k__BackingField", EmitDefaultValue=false)]
        public GeometryTypekBackingFieldEnum? GeometryTypekBackingField { get; set; }
        /// <summary>
        /// Defines VectorQualityTypekBackingField
        /// </summary>
        public enum VectorQualityTypekBackingFieldEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            
            NUMBER_8 = 8,
            
            /// <summary>
            /// Enum NUMBER_16 for value: 16
            /// </summary>
            
            NUMBER_16 = 16,
            
            /// <summary>
            /// Enum NUMBER_32 for value: 32
            /// </summary>
            
            NUMBER_32 = 32
        }

        /// <summary>
        /// Gets or Sets VectorQualityTypekBackingField
        /// </summary>
        [DataMember(Name="&lt;vectorQualityType&gt;k__BackingField", EmitDefaultValue=false)]
        public VectorQualityTypekBackingFieldEnum? VectorQualityTypekBackingField { get; set; }
        /// <summary>
        /// Defines StatuskBackingField
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatuskBackingFieldEnum
        {
            
            /// <summary>
            /// Enum READY for value: READY
            /// </summary>
            [EnumMember(Value = "READY")]
            READY = 1,
            
            /// <summary>
            /// Enum NOTREADY for value: NOT_READY
            /// </summary>
            [EnumMember(Value = "NOT_READY")]
            NOTREADY = 2
        }

        /// <summary>
        /// Gets or Sets StatuskBackingField
        /// </summary>
        [DataMember(Name="&lt;Status&gt;k__BackingField", EmitDefaultValue=false)]
        public StatuskBackingFieldEnum? StatuskBackingField { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpatialMetadataDTO" /> class.
        /// </summary>
        /// <param name="dataTableIdkBackingField">dataTableIdkBackingField.</param>
        /// <param name="dataTableLinkingColumnIdkBackingField">dataTableLinkingColumnIdkBackingField.</param>
        /// <param name="isUniqueColumnSetkBackingField">isUniqueColumnSetkBackingField.</param>
        /// <param name="spatialSourceColumnkBackingField">spatialSourceColumnkBackingField.</param>
        /// <param name="spatialTableRefkBackingField">spatialTableRefkBackingField.</param>
        /// <param name="uniqueIDColumnkBackingField">uniqueIDColumnkBackingField.</param>
        /// <param name="proj4kBackingField">proj4kBackingField.</param>
        /// <param name="geometryTypekBackingField">geometryTypekBackingField.</param>
        /// <param name="mapUseCountkBackingField">mapUseCountkBackingField.</param>
        /// <param name="minXkBackingField">minXkBackingField.</param>
        /// <param name="minYkBackingField">minYkBackingField.</param>
        /// <param name="maxXkBackingField">maxXkBackingField.</param>
        /// <param name="maxYkBackingField">maxYkBackingField.</param>
        /// <param name="sridkBackingField">sridkBackingField.</param>
        /// <param name="tiledkBackingField">tiledkBackingField.</param>
        /// <param name="vectorQualityTypekBackingField">vectorQualityTypekBackingField.</param>
        /// <param name="cacheEnabledkBackingField">cacheEnabledkBackingField.</param>
        /// <param name="clusterMetadatakBackingField">clusterMetadatakBackingField.</param>
        /// <param name="userFriendlyProjkBackingField">userFriendlyProjkBackingField.</param>
        /// <param name="permissionskBackingField">permissionskBackingField.</param>
        /// <param name="publicAccesskBackingField">publicAccesskBackingField.</param>
        /// <param name="identifierkBackingField">identifierkBackingField.</param>
        /// <param name="pathkBackingField">pathkBackingField.</param>
        /// <param name="metadatakBackingField">metadatakBackingField.</param>
        /// <param name="descriptionkBackingField">descriptionkBackingField.</param>
        /// <param name="isUsedByTerritoryManagerkBackingField">isUsedByTerritoryManagerkBackingField.</param>
        /// <param name="serverViewCountkBackingField">serverViewCountkBackingField.</param>
        /// <param name="statuskBackingField">statuskBackingField.</param>
        /// <param name="recordCountkBackingField">recordCountkBackingField.</param>
        /// <param name="idkBackingField">idkBackingField.</param>
        /// <param name="namekBackingField">namekBackingField.</param>
        /// <param name="ownerNamekBackingField">ownerNamekBackingField.</param>
        /// <param name="creationTimekBackingField">creationTimekBackingField.</param>
        /// <param name="modifiedTimekBackingField">modifiedTimekBackingField.</param>
        /// <param name="folderIdkBackingField">folderIdkBackingField.</param>
        /// <param name="currentUserHasModifyPermissionkBackingField">currentUserHasModifyPermissionkBackingField.</param>
        public SpatialMetadataDTO(Guid? dataTableIdkBackingField = default(Guid?), Guid? dataTableLinkingColumnIdkBackingField = default(Guid?), bool? isUniqueColumnSetkBackingField = default(bool?), string spatialSourceColumnkBackingField = default(string), string spatialTableRefkBackingField = default(string), string uniqueIDColumnkBackingField = default(string), string proj4kBackingField = default(string), GeometryTypekBackingFieldEnum? geometryTypekBackingField = default(GeometryTypekBackingFieldEnum?), int? mapUseCountkBackingField = default(int?), double? minXkBackingField = default(double?), double? minYkBackingField = default(double?), double? maxXkBackingField = default(double?), double? maxYkBackingField = default(double?), int? sridkBackingField = default(int?), bool? tiledkBackingField = default(bool?), VectorQualityTypekBackingFieldEnum? vectorQualityTypekBackingField = default(VectorQualityTypekBackingFieldEnum?), bool? cacheEnabledkBackingField = default(bool?), ClusterMetadataDTO clusterMetadatakBackingField = default(ClusterMetadataDTO), string userFriendlyProjkBackingField = default(string), List<PermissionPairComplexDTO> permissionskBackingField = default(List<PermissionPairComplexDTO>), bool? publicAccesskBackingField = default(bool?), string identifierkBackingField = default(string), string pathkBackingField = default(string), string metadatakBackingField = default(string), string descriptionkBackingField = default(string), bool? isUsedByTerritoryManagerkBackingField = default(bool?), int? serverViewCountkBackingField = default(int?), StatuskBackingFieldEnum? statuskBackingField = default(StatuskBackingFieldEnum?), int? recordCountkBackingField = default(int?), Guid? idkBackingField = default(Guid?), string namekBackingField = default(string), string ownerNamekBackingField = default(string), DateTime? creationTimekBackingField = default(DateTime?), DateTime? modifiedTimekBackingField = default(DateTime?), Guid? folderIdkBackingField = default(Guid?), bool? currentUserHasModifyPermissionkBackingField = default(bool?))
        {
            this.DataTableIdkBackingField = dataTableIdkBackingField;
            this.DataTableLinkingColumnIdkBackingField = dataTableLinkingColumnIdkBackingField;
            this.IsUniqueColumnSetkBackingField = isUniqueColumnSetkBackingField;
            this.SpatialSourceColumnkBackingField = spatialSourceColumnkBackingField;
            this.SpatialTableRefkBackingField = spatialTableRefkBackingField;
            this.UniqueIDColumnkBackingField = uniqueIDColumnkBackingField;
            this.Proj4kBackingField = proj4kBackingField;
            this.GeometryTypekBackingField = geometryTypekBackingField;
            this.MapUseCountkBackingField = mapUseCountkBackingField;
            this.MinXkBackingField = minXkBackingField;
            this.MinYkBackingField = minYkBackingField;
            this.MaxXkBackingField = maxXkBackingField;
            this.MaxYkBackingField = maxYkBackingField;
            this.SridkBackingField = sridkBackingField;
            this.TiledkBackingField = tiledkBackingField;
            this.VectorQualityTypekBackingField = vectorQualityTypekBackingField;
            this.CacheEnabledkBackingField = cacheEnabledkBackingField;
            this.ClusterMetadatakBackingField = clusterMetadatakBackingField;
            this.UserFriendlyProjkBackingField = userFriendlyProjkBackingField;
            this.PermissionskBackingField = permissionskBackingField;
            this.PublicAccesskBackingField = publicAccesskBackingField;
            this.IdentifierkBackingField = identifierkBackingField;
            this.PathkBackingField = pathkBackingField;
            this.MetadatakBackingField = metadatakBackingField;
            this.DescriptionkBackingField = descriptionkBackingField;
            this.IsUsedByTerritoryManagerkBackingField = isUsedByTerritoryManagerkBackingField;
            this.ServerViewCountkBackingField = serverViewCountkBackingField;
            this.StatuskBackingField = statuskBackingField;
            this.RecordCountkBackingField = recordCountkBackingField;
            this.IdkBackingField = idkBackingField;
            this.NamekBackingField = namekBackingField;
            this.OwnerNamekBackingField = ownerNamekBackingField;
            this.CreationTimekBackingField = creationTimekBackingField;
            this.ModifiedTimekBackingField = modifiedTimekBackingField;
            this.FolderIdkBackingField = folderIdkBackingField;
            this.CurrentUserHasModifyPermissionkBackingField = currentUserHasModifyPermissionkBackingField;
        }
        
        /// <summary>
        /// Gets or Sets DataTableIdkBackingField
        /// </summary>
        [DataMember(Name="&lt;DataTableId&gt;k__BackingField", EmitDefaultValue=false)]
        public Guid? DataTableIdkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets DataTableLinkingColumnIdkBackingField
        /// </summary>
        [DataMember(Name="&lt;DataTableLinkingColumnId&gt;k__BackingField", EmitDefaultValue=false)]
        public Guid? DataTableLinkingColumnIdkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets IsUniqueColumnSetkBackingField
        /// </summary>
        [DataMember(Name="&lt;IsUniqueColumnSet&gt;k__BackingField", EmitDefaultValue=false)]
        public bool? IsUniqueColumnSetkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets SpatialSourceColumnkBackingField
        /// </summary>
        [DataMember(Name="&lt;SpatialSourceColumn&gt;k__BackingField", EmitDefaultValue=false)]
        public string SpatialSourceColumnkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets SpatialTableRefkBackingField
        /// </summary>
        [DataMember(Name="&lt;SpatialTableRef&gt;k__BackingField", EmitDefaultValue=false)]
        public string SpatialTableRefkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets UniqueIDColumnkBackingField
        /// </summary>
        [DataMember(Name="&lt;UniqueIDColumn&gt;k__BackingField", EmitDefaultValue=false)]
        public string UniqueIDColumnkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets Proj4kBackingField
        /// </summary>
        [DataMember(Name="&lt;proj4&gt;k__BackingField", EmitDefaultValue=false)]
        public string Proj4kBackingField { get; set; }


        /// <summary>
        /// Gets or Sets MapUseCountkBackingField
        /// </summary>
        [DataMember(Name="&lt;MapUseCount&gt;k__BackingField", EmitDefaultValue=false)]
        public int? MapUseCountkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets MinXkBackingField
        /// </summary>
        [DataMember(Name="&lt;minX&gt;k__BackingField", EmitDefaultValue=false)]
        public double? MinXkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets MinYkBackingField
        /// </summary>
        [DataMember(Name="&lt;minY&gt;k__BackingField", EmitDefaultValue=false)]
        public double? MinYkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets MaxXkBackingField
        /// </summary>
        [DataMember(Name="&lt;maxX&gt;k__BackingField", EmitDefaultValue=false)]
        public double? MaxXkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets MaxYkBackingField
        /// </summary>
        [DataMember(Name="&lt;maxY&gt;k__BackingField", EmitDefaultValue=false)]
        public double? MaxYkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets SridkBackingField
        /// </summary>
        [DataMember(Name="&lt;srid&gt;k__BackingField", EmitDefaultValue=false)]
        public int? SridkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets TiledkBackingField
        /// </summary>
        [DataMember(Name="&lt;tiled&gt;k__BackingField", EmitDefaultValue=false)]
        public bool? TiledkBackingField { get; set; }


        /// <summary>
        /// Gets or Sets CacheEnabledkBackingField
        /// </summary>
        [DataMember(Name="&lt;cacheEnabled&gt;k__BackingField", EmitDefaultValue=false)]
        public bool? CacheEnabledkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets ClusterMetadatakBackingField
        /// </summary>
        [DataMember(Name="&lt;ClusterMetadata&gt;k__BackingField", EmitDefaultValue=false)]
        public ClusterMetadataDTO ClusterMetadatakBackingField { get; set; }

        /// <summary>
        /// Gets or Sets UserFriendlyProjkBackingField
        /// </summary>
        [DataMember(Name="&lt;UserFriendlyProj&gt;k__BackingField", EmitDefaultValue=false)]
        public string UserFriendlyProjkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets PermissionskBackingField
        /// </summary>
        [DataMember(Name="&lt;Permissions&gt;k__BackingField", EmitDefaultValue=false)]
        public List<PermissionPairComplexDTO> PermissionskBackingField { get; set; }

        /// <summary>
        /// Gets or Sets PublicAccesskBackingField
        /// </summary>
        [DataMember(Name="&lt;PublicAccess&gt;k__BackingField", EmitDefaultValue=false)]
        public bool? PublicAccesskBackingField { get; set; }

        /// <summary>
        /// Gets or Sets IdentifierkBackingField
        /// </summary>
        [DataMember(Name="&lt;Identifier&gt;k__BackingField", EmitDefaultValue=false)]
        public string IdentifierkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets PathkBackingField
        /// </summary>
        [DataMember(Name="&lt;Path&gt;k__BackingField", EmitDefaultValue=false)]
        public string PathkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets MetadatakBackingField
        /// </summary>
        [DataMember(Name="&lt;Metadata&gt;k__BackingField", EmitDefaultValue=false)]
        public string MetadatakBackingField { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionkBackingField
        /// </summary>
        [DataMember(Name="&lt;Description&gt;k__BackingField", EmitDefaultValue=false)]
        public string DescriptionkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets IsUsedByTerritoryManagerkBackingField
        /// </summary>
        [DataMember(Name="&lt;IsUsedByTerritoryManager&gt;k__BackingField", EmitDefaultValue=false)]
        public bool? IsUsedByTerritoryManagerkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets ServerViewCountkBackingField
        /// </summary>
        [DataMember(Name="&lt;ServerViewCount&gt;k__BackingField", EmitDefaultValue=false)]
        public int? ServerViewCountkBackingField { get; set; }


        /// <summary>
        /// Gets or Sets RecordCountkBackingField
        /// </summary>
        [DataMember(Name="&lt;RecordCount&gt;k__BackingField", EmitDefaultValue=false)]
        public int? RecordCountkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets IdkBackingField
        /// </summary>
        [DataMember(Name="&lt;Id&gt;k__BackingField", EmitDefaultValue=false)]
        public Guid? IdkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets NamekBackingField
        /// </summary>
        [DataMember(Name="&lt;Name&gt;k__BackingField", EmitDefaultValue=false)]
        public string NamekBackingField { get; set; }

        /// <summary>
        /// Gets or Sets OwnerNamekBackingField
        /// </summary>
        [DataMember(Name="&lt;OwnerName&gt;k__BackingField", EmitDefaultValue=false)]
        public string OwnerNamekBackingField { get; set; }

        /// <summary>
        /// Gets or Sets CreationTimekBackingField
        /// </summary>
        [DataMember(Name="&lt;CreationTime&gt;k__BackingField", EmitDefaultValue=false)]
        public DateTime? CreationTimekBackingField { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedTimekBackingField
        /// </summary>
        [DataMember(Name="&lt;ModifiedTime&gt;k__BackingField", EmitDefaultValue=false)]
        public DateTime? ModifiedTimekBackingField { get; set; }

        /// <summary>
        /// Gets or Sets FolderIdkBackingField
        /// </summary>
        [DataMember(Name="&lt;FolderId&gt;k__BackingField", EmitDefaultValue=false)]
        public Guid? FolderIdkBackingField { get; set; }

        /// <summary>
        /// Gets or Sets CurrentUserHasModifyPermissionkBackingField
        /// </summary>
        [DataMember(Name="&lt;CurrentUserHasModifyPermission&gt;k__BackingField", EmitDefaultValue=false)]
        public bool? CurrentUserHasModifyPermissionkBackingField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpatialMetadataDTO {\n");
            sb.Append("  DataTableIdkBackingField: ").Append(DataTableIdkBackingField).Append("\n");
            sb.Append("  DataTableLinkingColumnIdkBackingField: ").Append(DataTableLinkingColumnIdkBackingField).Append("\n");
            sb.Append("  IsUniqueColumnSetkBackingField: ").Append(IsUniqueColumnSetkBackingField).Append("\n");
            sb.Append("  SpatialSourceColumnkBackingField: ").Append(SpatialSourceColumnkBackingField).Append("\n");
            sb.Append("  SpatialTableRefkBackingField: ").Append(SpatialTableRefkBackingField).Append("\n");
            sb.Append("  UniqueIDColumnkBackingField: ").Append(UniqueIDColumnkBackingField).Append("\n");
            sb.Append("  Proj4kBackingField: ").Append(Proj4kBackingField).Append("\n");
            sb.Append("  GeometryTypekBackingField: ").Append(GeometryTypekBackingField).Append("\n");
            sb.Append("  MapUseCountkBackingField: ").Append(MapUseCountkBackingField).Append("\n");
            sb.Append("  MinXkBackingField: ").Append(MinXkBackingField).Append("\n");
            sb.Append("  MinYkBackingField: ").Append(MinYkBackingField).Append("\n");
            sb.Append("  MaxXkBackingField: ").Append(MaxXkBackingField).Append("\n");
            sb.Append("  MaxYkBackingField: ").Append(MaxYkBackingField).Append("\n");
            sb.Append("  SridkBackingField: ").Append(SridkBackingField).Append("\n");
            sb.Append("  TiledkBackingField: ").Append(TiledkBackingField).Append("\n");
            sb.Append("  VectorQualityTypekBackingField: ").Append(VectorQualityTypekBackingField).Append("\n");
            sb.Append("  CacheEnabledkBackingField: ").Append(CacheEnabledkBackingField).Append("\n");
            sb.Append("  ClusterMetadatakBackingField: ").Append(ClusterMetadatakBackingField).Append("\n");
            sb.Append("  UserFriendlyProjkBackingField: ").Append(UserFriendlyProjkBackingField).Append("\n");
            sb.Append("  PermissionskBackingField: ").Append(PermissionskBackingField).Append("\n");
            sb.Append("  PublicAccesskBackingField: ").Append(PublicAccesskBackingField).Append("\n");
            sb.Append("  IdentifierkBackingField: ").Append(IdentifierkBackingField).Append("\n");
            sb.Append("  PathkBackingField: ").Append(PathkBackingField).Append("\n");
            sb.Append("  MetadatakBackingField: ").Append(MetadatakBackingField).Append("\n");
            sb.Append("  DescriptionkBackingField: ").Append(DescriptionkBackingField).Append("\n");
            sb.Append("  IsUsedByTerritoryManagerkBackingField: ").Append(IsUsedByTerritoryManagerkBackingField).Append("\n");
            sb.Append("  ServerViewCountkBackingField: ").Append(ServerViewCountkBackingField).Append("\n");
            sb.Append("  StatuskBackingField: ").Append(StatuskBackingField).Append("\n");
            sb.Append("  RecordCountkBackingField: ").Append(RecordCountkBackingField).Append("\n");
            sb.Append("  IdkBackingField: ").Append(IdkBackingField).Append("\n");
            sb.Append("  NamekBackingField: ").Append(NamekBackingField).Append("\n");
            sb.Append("  OwnerNamekBackingField: ").Append(OwnerNamekBackingField).Append("\n");
            sb.Append("  CreationTimekBackingField: ").Append(CreationTimekBackingField).Append("\n");
            sb.Append("  ModifiedTimekBackingField: ").Append(ModifiedTimekBackingField).Append("\n");
            sb.Append("  FolderIdkBackingField: ").Append(FolderIdkBackingField).Append("\n");
            sb.Append("  CurrentUserHasModifyPermissionkBackingField: ").Append(CurrentUserHasModifyPermissionkBackingField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpatialMetadataDTO);
        }

        /// <summary>
        /// Returns true if SpatialMetadataDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SpatialMetadataDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpatialMetadataDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataTableIdkBackingField == input.DataTableIdkBackingField ||
                    (this.DataTableIdkBackingField != null &&
                    this.DataTableIdkBackingField.Equals(input.DataTableIdkBackingField))
                ) && 
                (
                    this.DataTableLinkingColumnIdkBackingField == input.DataTableLinkingColumnIdkBackingField ||
                    (this.DataTableLinkingColumnIdkBackingField != null &&
                    this.DataTableLinkingColumnIdkBackingField.Equals(input.DataTableLinkingColumnIdkBackingField))
                ) && 
                (
                    this.IsUniqueColumnSetkBackingField == input.IsUniqueColumnSetkBackingField ||
                    (this.IsUniqueColumnSetkBackingField != null &&
                    this.IsUniqueColumnSetkBackingField.Equals(input.IsUniqueColumnSetkBackingField))
                ) && 
                (
                    this.SpatialSourceColumnkBackingField == input.SpatialSourceColumnkBackingField ||
                    (this.SpatialSourceColumnkBackingField != null &&
                    this.SpatialSourceColumnkBackingField.Equals(input.SpatialSourceColumnkBackingField))
                ) && 
                (
                    this.SpatialTableRefkBackingField == input.SpatialTableRefkBackingField ||
                    (this.SpatialTableRefkBackingField != null &&
                    this.SpatialTableRefkBackingField.Equals(input.SpatialTableRefkBackingField))
                ) && 
                (
                    this.UniqueIDColumnkBackingField == input.UniqueIDColumnkBackingField ||
                    (this.UniqueIDColumnkBackingField != null &&
                    this.UniqueIDColumnkBackingField.Equals(input.UniqueIDColumnkBackingField))
                ) && 
                (
                    this.Proj4kBackingField == input.Proj4kBackingField ||
                    (this.Proj4kBackingField != null &&
                    this.Proj4kBackingField.Equals(input.Proj4kBackingField))
                ) && 
                (
                    this.GeometryTypekBackingField == input.GeometryTypekBackingField ||
                    (this.GeometryTypekBackingField != null &&
                    this.GeometryTypekBackingField.Equals(input.GeometryTypekBackingField))
                ) && 
                (
                    this.MapUseCountkBackingField == input.MapUseCountkBackingField ||
                    (this.MapUseCountkBackingField != null &&
                    this.MapUseCountkBackingField.Equals(input.MapUseCountkBackingField))
                ) && 
                (
                    this.MinXkBackingField == input.MinXkBackingField ||
                    (this.MinXkBackingField != null &&
                    this.MinXkBackingField.Equals(input.MinXkBackingField))
                ) && 
                (
                    this.MinYkBackingField == input.MinYkBackingField ||
                    (this.MinYkBackingField != null &&
                    this.MinYkBackingField.Equals(input.MinYkBackingField))
                ) && 
                (
                    this.MaxXkBackingField == input.MaxXkBackingField ||
                    (this.MaxXkBackingField != null &&
                    this.MaxXkBackingField.Equals(input.MaxXkBackingField))
                ) && 
                (
                    this.MaxYkBackingField == input.MaxYkBackingField ||
                    (this.MaxYkBackingField != null &&
                    this.MaxYkBackingField.Equals(input.MaxYkBackingField))
                ) && 
                (
                    this.SridkBackingField == input.SridkBackingField ||
                    (this.SridkBackingField != null &&
                    this.SridkBackingField.Equals(input.SridkBackingField))
                ) && 
                (
                    this.TiledkBackingField == input.TiledkBackingField ||
                    (this.TiledkBackingField != null &&
                    this.TiledkBackingField.Equals(input.TiledkBackingField))
                ) && 
                (
                    this.VectorQualityTypekBackingField == input.VectorQualityTypekBackingField ||
                    (this.VectorQualityTypekBackingField != null &&
                    this.VectorQualityTypekBackingField.Equals(input.VectorQualityTypekBackingField))
                ) && 
                (
                    this.CacheEnabledkBackingField == input.CacheEnabledkBackingField ||
                    (this.CacheEnabledkBackingField != null &&
                    this.CacheEnabledkBackingField.Equals(input.CacheEnabledkBackingField))
                ) && 
                (
                    this.ClusterMetadatakBackingField == input.ClusterMetadatakBackingField ||
                    (this.ClusterMetadatakBackingField != null &&
                    this.ClusterMetadatakBackingField.Equals(input.ClusterMetadatakBackingField))
                ) && 
                (
                    this.UserFriendlyProjkBackingField == input.UserFriendlyProjkBackingField ||
                    (this.UserFriendlyProjkBackingField != null &&
                    this.UserFriendlyProjkBackingField.Equals(input.UserFriendlyProjkBackingField))
                ) && 
                (
                    this.PermissionskBackingField == input.PermissionskBackingField ||
                    this.PermissionskBackingField != null &&
                    this.PermissionskBackingField.SequenceEqual(input.PermissionskBackingField)
                ) && 
                (
                    this.PublicAccesskBackingField == input.PublicAccesskBackingField ||
                    (this.PublicAccesskBackingField != null &&
                    this.PublicAccesskBackingField.Equals(input.PublicAccesskBackingField))
                ) && 
                (
                    this.IdentifierkBackingField == input.IdentifierkBackingField ||
                    (this.IdentifierkBackingField != null &&
                    this.IdentifierkBackingField.Equals(input.IdentifierkBackingField))
                ) && 
                (
                    this.PathkBackingField == input.PathkBackingField ||
                    (this.PathkBackingField != null &&
                    this.PathkBackingField.Equals(input.PathkBackingField))
                ) && 
                (
                    this.MetadatakBackingField == input.MetadatakBackingField ||
                    (this.MetadatakBackingField != null &&
                    this.MetadatakBackingField.Equals(input.MetadatakBackingField))
                ) && 
                (
                    this.DescriptionkBackingField == input.DescriptionkBackingField ||
                    (this.DescriptionkBackingField != null &&
                    this.DescriptionkBackingField.Equals(input.DescriptionkBackingField))
                ) && 
                (
                    this.IsUsedByTerritoryManagerkBackingField == input.IsUsedByTerritoryManagerkBackingField ||
                    (this.IsUsedByTerritoryManagerkBackingField != null &&
                    this.IsUsedByTerritoryManagerkBackingField.Equals(input.IsUsedByTerritoryManagerkBackingField))
                ) && 
                (
                    this.ServerViewCountkBackingField == input.ServerViewCountkBackingField ||
                    (this.ServerViewCountkBackingField != null &&
                    this.ServerViewCountkBackingField.Equals(input.ServerViewCountkBackingField))
                ) && 
                (
                    this.StatuskBackingField == input.StatuskBackingField ||
                    (this.StatuskBackingField != null &&
                    this.StatuskBackingField.Equals(input.StatuskBackingField))
                ) && 
                (
                    this.RecordCountkBackingField == input.RecordCountkBackingField ||
                    (this.RecordCountkBackingField != null &&
                    this.RecordCountkBackingField.Equals(input.RecordCountkBackingField))
                ) && 
                (
                    this.IdkBackingField == input.IdkBackingField ||
                    (this.IdkBackingField != null &&
                    this.IdkBackingField.Equals(input.IdkBackingField))
                ) && 
                (
                    this.NamekBackingField == input.NamekBackingField ||
                    (this.NamekBackingField != null &&
                    this.NamekBackingField.Equals(input.NamekBackingField))
                ) && 
                (
                    this.OwnerNamekBackingField == input.OwnerNamekBackingField ||
                    (this.OwnerNamekBackingField != null &&
                    this.OwnerNamekBackingField.Equals(input.OwnerNamekBackingField))
                ) && 
                (
                    this.CreationTimekBackingField == input.CreationTimekBackingField ||
                    (this.CreationTimekBackingField != null &&
                    this.CreationTimekBackingField.Equals(input.CreationTimekBackingField))
                ) && 
                (
                    this.ModifiedTimekBackingField == input.ModifiedTimekBackingField ||
                    (this.ModifiedTimekBackingField != null &&
                    this.ModifiedTimekBackingField.Equals(input.ModifiedTimekBackingField))
                ) && 
                (
                    this.FolderIdkBackingField == input.FolderIdkBackingField ||
                    (this.FolderIdkBackingField != null &&
                    this.FolderIdkBackingField.Equals(input.FolderIdkBackingField))
                ) && 
                (
                    this.CurrentUserHasModifyPermissionkBackingField == input.CurrentUserHasModifyPermissionkBackingField ||
                    (this.CurrentUserHasModifyPermissionkBackingField != null &&
                    this.CurrentUserHasModifyPermissionkBackingField.Equals(input.CurrentUserHasModifyPermissionkBackingField))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataTableIdkBackingField != null)
                    hashCode = hashCode * 59 + this.DataTableIdkBackingField.GetHashCode();
                if (this.DataTableLinkingColumnIdkBackingField != null)
                    hashCode = hashCode * 59 + this.DataTableLinkingColumnIdkBackingField.GetHashCode();
                if (this.IsUniqueColumnSetkBackingField != null)
                    hashCode = hashCode * 59 + this.IsUniqueColumnSetkBackingField.GetHashCode();
                if (this.SpatialSourceColumnkBackingField != null)
                    hashCode = hashCode * 59 + this.SpatialSourceColumnkBackingField.GetHashCode();
                if (this.SpatialTableRefkBackingField != null)
                    hashCode = hashCode * 59 + this.SpatialTableRefkBackingField.GetHashCode();
                if (this.UniqueIDColumnkBackingField != null)
                    hashCode = hashCode * 59 + this.UniqueIDColumnkBackingField.GetHashCode();
                if (this.Proj4kBackingField != null)
                    hashCode = hashCode * 59 + this.Proj4kBackingField.GetHashCode();
                if (this.GeometryTypekBackingField != null)
                    hashCode = hashCode * 59 + this.GeometryTypekBackingField.GetHashCode();
                if (this.MapUseCountkBackingField != null)
                    hashCode = hashCode * 59 + this.MapUseCountkBackingField.GetHashCode();
                if (this.MinXkBackingField != null)
                    hashCode = hashCode * 59 + this.MinXkBackingField.GetHashCode();
                if (this.MinYkBackingField != null)
                    hashCode = hashCode * 59 + this.MinYkBackingField.GetHashCode();
                if (this.MaxXkBackingField != null)
                    hashCode = hashCode * 59 + this.MaxXkBackingField.GetHashCode();
                if (this.MaxYkBackingField != null)
                    hashCode = hashCode * 59 + this.MaxYkBackingField.GetHashCode();
                if (this.SridkBackingField != null)
                    hashCode = hashCode * 59 + this.SridkBackingField.GetHashCode();
                if (this.TiledkBackingField != null)
                    hashCode = hashCode * 59 + this.TiledkBackingField.GetHashCode();
                if (this.VectorQualityTypekBackingField != null)
                    hashCode = hashCode * 59 + this.VectorQualityTypekBackingField.GetHashCode();
                if (this.CacheEnabledkBackingField != null)
                    hashCode = hashCode * 59 + this.CacheEnabledkBackingField.GetHashCode();
                if (this.ClusterMetadatakBackingField != null)
                    hashCode = hashCode * 59 + this.ClusterMetadatakBackingField.GetHashCode();
                if (this.UserFriendlyProjkBackingField != null)
                    hashCode = hashCode * 59 + this.UserFriendlyProjkBackingField.GetHashCode();
                if (this.PermissionskBackingField != null)
                    hashCode = hashCode * 59 + this.PermissionskBackingField.GetHashCode();
                if (this.PublicAccesskBackingField != null)
                    hashCode = hashCode * 59 + this.PublicAccesskBackingField.GetHashCode();
                if (this.IdentifierkBackingField != null)
                    hashCode = hashCode * 59 + this.IdentifierkBackingField.GetHashCode();
                if (this.PathkBackingField != null)
                    hashCode = hashCode * 59 + this.PathkBackingField.GetHashCode();
                if (this.MetadatakBackingField != null)
                    hashCode = hashCode * 59 + this.MetadatakBackingField.GetHashCode();
                if (this.DescriptionkBackingField != null)
                    hashCode = hashCode * 59 + this.DescriptionkBackingField.GetHashCode();
                if (this.IsUsedByTerritoryManagerkBackingField != null)
                    hashCode = hashCode * 59 + this.IsUsedByTerritoryManagerkBackingField.GetHashCode();
                if (this.ServerViewCountkBackingField != null)
                    hashCode = hashCode * 59 + this.ServerViewCountkBackingField.GetHashCode();
                if (this.StatuskBackingField != null)
                    hashCode = hashCode * 59 + this.StatuskBackingField.GetHashCode();
                if (this.RecordCountkBackingField != null)
                    hashCode = hashCode * 59 + this.RecordCountkBackingField.GetHashCode();
                if (this.IdkBackingField != null)
                    hashCode = hashCode * 59 + this.IdkBackingField.GetHashCode();
                if (this.NamekBackingField != null)
                    hashCode = hashCode * 59 + this.NamekBackingField.GetHashCode();
                if (this.OwnerNamekBackingField != null)
                    hashCode = hashCode * 59 + this.OwnerNamekBackingField.GetHashCode();
                if (this.CreationTimekBackingField != null)
                    hashCode = hashCode * 59 + this.CreationTimekBackingField.GetHashCode();
                if (this.ModifiedTimekBackingField != null)
                    hashCode = hashCode * 59 + this.ModifiedTimekBackingField.GetHashCode();
                if (this.FolderIdkBackingField != null)
                    hashCode = hashCode * 59 + this.FolderIdkBackingField.GetHashCode();
                if (this.CurrentUserHasModifyPermissionkBackingField != null)
                    hashCode = hashCode * 59 + this.CurrentUserHasModifyPermissionkBackingField.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

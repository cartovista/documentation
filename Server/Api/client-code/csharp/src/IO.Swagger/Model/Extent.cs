/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Extent
    /// </summary>
    [DataContract]
    public partial class Extent :  IEquatable<Extent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Extent" /> class.
        /// </summary>
        /// <param name="minX">minX.</param>
        /// <param name="minY">minY.</param>
        /// <param name="maxX">maxX.</param>
        /// <param name="maxY">maxY.</param>
        public Extent(double? minX = default(double?), double? minY = default(double?), double? maxX = default(double?), double? maxY = default(double?))
        {
            this.MinX = minX;
            this.MinY = minY;
            this.MaxX = maxX;
            this.MaxY = maxY;
        }
        
        /// <summary>
        /// Gets or Sets MinX
        /// </summary>
        [DataMember(Name="minX", EmitDefaultValue=false)]
        public double? MinX { get; set; }

        /// <summary>
        /// Gets or Sets MinY
        /// </summary>
        [DataMember(Name="minY", EmitDefaultValue=false)]
        public double? MinY { get; set; }

        /// <summary>
        /// Gets or Sets MaxX
        /// </summary>
        [DataMember(Name="maxX", EmitDefaultValue=false)]
        public double? MaxX { get; set; }

        /// <summary>
        /// Gets or Sets MaxY
        /// </summary>
        [DataMember(Name="maxY", EmitDefaultValue=false)]
        public double? MaxY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Extent {\n");
            sb.Append("  MinX: ").Append(MinX).Append("\n");
            sb.Append("  MinY: ").Append(MinY).Append("\n");
            sb.Append("  MaxX: ").Append(MaxX).Append("\n");
            sb.Append("  MaxY: ").Append(MaxY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Extent);
        }

        /// <summary>
        /// Returns true if Extent instances are equal
        /// </summary>
        /// <param name="input">Instance of Extent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Extent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MinX == input.MinX ||
                    (this.MinX != null &&
                    this.MinX.Equals(input.MinX))
                ) && 
                (
                    this.MinY == input.MinY ||
                    (this.MinY != null &&
                    this.MinY.Equals(input.MinY))
                ) && 
                (
                    this.MaxX == input.MaxX ||
                    (this.MaxX != null &&
                    this.MaxX.Equals(input.MaxX))
                ) && 
                (
                    this.MaxY == input.MaxY ||
                    (this.MaxY != null &&
                    this.MaxY.Equals(input.MaxY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MinX != null)
                    hashCode = hashCode * 59 + this.MinX.GetHashCode();
                if (this.MinY != null)
                    hashCode = hashCode * 59 + this.MinY.GetHashCode();
                if (this.MaxX != null)
                    hashCode = hashCode * 59 + this.MaxX.GetHashCode();
                if (this.MaxY != null)
                    hashCode = hashCode * 59 + this.MaxY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

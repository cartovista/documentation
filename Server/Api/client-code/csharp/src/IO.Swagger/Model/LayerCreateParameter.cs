/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LayerCreateParameter
    /// </summary>
    [DataContract]
    public partial class LayerCreateParameter :  IEquatable<LayerCreateParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayerCreateParameter" /> class.
        /// </summary>
        /// <param name="identifier">identifier.</param>
        /// <param name="proj4">proj4.</param>
        /// <param name="name">name.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="geometryType">geometryType.</param>
        /// <param name="description">description.</param>
        /// <param name="vectorTiling">vectorTiling.</param>
        /// <param name="systemIdentifier">systemIdentifier.</param>
        /// <param name="dataTableSystemIdentifier">dataTableSystemIdentifier.</param>
        /// <param name="featureIdColumnSystemIdentifier">featureIdColumnSystemIdentifier.</param>
        public LayerCreateParameter(string identifier = default(string), string proj4 = default(string), string name = default(string), string metadata = default(string), string geometryType = default(string), string description = default(string), bool? vectorTiling = default(bool?), Guid? systemIdentifier = default(Guid?), Guid? dataTableSystemIdentifier = default(Guid?), Guid? featureIdColumnSystemIdentifier = default(Guid?))
        {
            this.Identifier = identifier;
            this.Proj4 = proj4;
            this.Name = name;
            this.Metadata = metadata;
            this.GeometryType = geometryType;
            this.Description = description;
            this.VectorTiling = vectorTiling;
            this.SystemIdentifier = systemIdentifier;
            this.DataTableSystemIdentifier = dataTableSystemIdentifier;
            this.FeatureIdColumnSystemIdentifier = featureIdColumnSystemIdentifier;
        }
        
        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Proj4
        /// </summary>
        [DataMember(Name="Proj4", EmitDefaultValue=false)]
        public string Proj4 { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="Metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets GeometryType
        /// </summary>
        [DataMember(Name="GeometryType", EmitDefaultValue=false)]
        public string GeometryType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets VectorTiling
        /// </summary>
        [DataMember(Name="VectorTiling", EmitDefaultValue=false)]
        public bool? VectorTiling { get; set; }

        /// <summary>
        /// Gets or Sets SystemIdentifier
        /// </summary>
        [DataMember(Name="SystemIdentifier", EmitDefaultValue=false)]
        public Guid? SystemIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets DataTableSystemIdentifier
        /// </summary>
        [DataMember(Name="DataTableSystemIdentifier", EmitDefaultValue=false)]
        public Guid? DataTableSystemIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets FeatureIdColumnSystemIdentifier
        /// </summary>
        [DataMember(Name="FeatureIdColumnSystemIdentifier", EmitDefaultValue=false)]
        public Guid? FeatureIdColumnSystemIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayerCreateParameter {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Proj4: ").Append(Proj4).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  GeometryType: ").Append(GeometryType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  VectorTiling: ").Append(VectorTiling).Append("\n");
            sb.Append("  SystemIdentifier: ").Append(SystemIdentifier).Append("\n");
            sb.Append("  DataTableSystemIdentifier: ").Append(DataTableSystemIdentifier).Append("\n");
            sb.Append("  FeatureIdColumnSystemIdentifier: ").Append(FeatureIdColumnSystemIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LayerCreateParameter);
        }

        /// <summary>
        /// Returns true if LayerCreateParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of LayerCreateParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayerCreateParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Proj4 == input.Proj4 ||
                    (this.Proj4 != null &&
                    this.Proj4.Equals(input.Proj4))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.GeometryType == input.GeometryType ||
                    (this.GeometryType != null &&
                    this.GeometryType.Equals(input.GeometryType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.VectorTiling == input.VectorTiling ||
                    (this.VectorTiling != null &&
                    this.VectorTiling.Equals(input.VectorTiling))
                ) && 
                (
                    this.SystemIdentifier == input.SystemIdentifier ||
                    (this.SystemIdentifier != null &&
                    this.SystemIdentifier.Equals(input.SystemIdentifier))
                ) && 
                (
                    this.DataTableSystemIdentifier == input.DataTableSystemIdentifier ||
                    (this.DataTableSystemIdentifier != null &&
                    this.DataTableSystemIdentifier.Equals(input.DataTableSystemIdentifier))
                ) && 
                (
                    this.FeatureIdColumnSystemIdentifier == input.FeatureIdColumnSystemIdentifier ||
                    (this.FeatureIdColumnSystemIdentifier != null &&
                    this.FeatureIdColumnSystemIdentifier.Equals(input.FeatureIdColumnSystemIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.Proj4 != null)
                    hashCode = hashCode * 59 + this.Proj4.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.GeometryType != null)
                    hashCode = hashCode * 59 + this.GeometryType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.VectorTiling != null)
                    hashCode = hashCode * 59 + this.VectorTiling.GetHashCode();
                if (this.SystemIdentifier != null)
                    hashCode = hashCode * 59 + this.SystemIdentifier.GetHashCode();
                if (this.DataTableSystemIdentifier != null)
                    hashCode = hashCode * 59 + this.DataTableSystemIdentifier.GetHashCode();
                if (this.FeatureIdColumnSystemIdentifier != null)
                    hashCode = hashCode * 59 + this.FeatureIdColumnSystemIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

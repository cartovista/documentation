/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ViewReadPermission
    /// </summary>
    [DataContract]
    public partial class ViewReadPermission :  IEquatable<ViewReadPermission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewReadPermission" /> class.
        /// </summary>
        /// <param name="viewId">viewId.</param>
        /// <param name="identityId">identityId.</param>
        /// <param name="isGroup">isGroup.</param>
        public ViewReadPermission(Guid? viewId = default(Guid?), Guid? identityId = default(Guid?), bool? isGroup = default(bool?))
        {
            this.ViewId = viewId;
            this.IdentityId = identityId;
            this.IsGroup = isGroup;
        }
        
        /// <summary>
        /// Gets or Sets ViewId
        /// </summary>
        [DataMember(Name="viewId", EmitDefaultValue=false)]
        public Guid? ViewId { get; set; }

        /// <summary>
        /// Gets or Sets IdentityId
        /// </summary>
        [DataMember(Name="identityId", EmitDefaultValue=false)]
        public Guid? IdentityId { get; set; }

        /// <summary>
        /// Gets or Sets IsGroup
        /// </summary>
        [DataMember(Name="isGroup", EmitDefaultValue=false)]
        public bool? IsGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ViewReadPermission {\n");
            sb.Append("  ViewId: ").Append(ViewId).Append("\n");
            sb.Append("  IdentityId: ").Append(IdentityId).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ViewReadPermission);
        }

        /// <summary>
        /// Returns true if ViewReadPermission instances are equal
        /// </summary>
        /// <param name="input">Instance of ViewReadPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewReadPermission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ViewId == input.ViewId ||
                    (this.ViewId != null &&
                    this.ViewId.Equals(input.ViewId))
                ) && 
                (
                    this.IdentityId == input.IdentityId ||
                    (this.IdentityId != null &&
                    this.IdentityId.Equals(input.IdentityId))
                ) && 
                (
                    this.IsGroup == input.IsGroup ||
                    (this.IsGroup != null &&
                    this.IsGroup.Equals(input.IsGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ViewId != null)
                    hashCode = hashCode * 59 + this.ViewId.GetHashCode();
                if (this.IdentityId != null)
                    hashCode = hashCode * 59 + this.IdentityId.GetHashCode();
                if (this.IsGroup != null)
                    hashCode = hashCode * 59 + this.IsGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

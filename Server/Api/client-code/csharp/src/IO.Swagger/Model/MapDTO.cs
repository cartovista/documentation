/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MapDTO
    /// </summary>
    [DataContract]
    public partial class MapDTO :  IEquatable<MapDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_1000 for value: 1000
            /// </summary>
            
            NUMBER_1000 = 1000
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MapDTO" /> class.
        /// </summary>
        /// <param name="configHTML5MapPathLocation">configHTML5MapPathLocation.</param>
        /// <param name="title">title.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="description">description.</param>
        /// <param name="status">status.</param>
        /// <param name="type">type.</param>
        /// <param name="typeDescription">typeDescription.</param>
        /// <param name="spatialMetaDataDTOs">spatialMetaDataDTOs.</param>
        /// <param name="publicAccess">publicAccess.</param>
        /// <param name="customViewer">customViewer.</param>
        /// <param name="originalMapPackageTimestamp">originalMapPackageTimestamp.</param>
        /// <param name="isMapTerritoryReady">isMapTerritoryReady.</param>
        /// <param name="thumbnailVersion">thumbnailVersion.</param>
        /// <param name="folderId">folderId.</param>
        /// <param name="path">path.</param>
        /// <param name="editable">editable.</param>
        /// <param name="seoTitle">seoTitle.</param>
        /// <param name="seoDescription">seoDescription.</param>
        /// <param name="seoCustomHTML">seoCustomHTML.</param>
        /// <param name="scoringEnabled">scoringEnabled.</param>
        /// <param name="modifiedThumbnail">modifiedThumbnail.</param>
        /// <param name="languageDescription">languageDescription.</param>
        /// <param name="creationTime">creationTime.</param>
        /// <param name="lastModifiedAuthor">lastModifiedAuthor.</param>
        /// <param name="lastModifiedTime">lastModifiedTime.</param>
        /// <param name="keywords">keywords.</param>
        /// <param name="ownerName">ownerName.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="currentUserHasModifyPermission">currentUserHasModifyPermission.</param>
        /// <param name="representationUseCount">representationUseCount.</param>
        /// <param name="webApplicationPath">webApplicationPath.</param>
        /// <param name="id">id.</param>
        public MapDTO(string configHTML5MapPathLocation = default(string), string title = default(string), string identifier = default(string), string description = default(string), StatusEnum? status = default(StatusEnum?), TypeEnum? type = default(TypeEnum?), string typeDescription = default(string), List<SpatialMetadataDTO> spatialMetaDataDTOs = default(List<SpatialMetadataDTO>), bool? publicAccess = default(bool?), bool? customViewer = default(bool?), DateTime? originalMapPackageTimestamp = default(DateTime?), bool? isMapTerritoryReady = default(bool?), string thumbnailVersion = default(string), Guid? folderId = default(Guid?), string path = default(string), bool? editable = default(bool?), string seoTitle = default(string), string seoDescription = default(string), string seoCustomHTML = default(string), bool? scoringEnabled = default(bool?), byte[] modifiedThumbnail = default(byte[]), string languageDescription = default(string), DateTime? creationTime = default(DateTime?), string lastModifiedAuthor = default(string), DateTime? lastModifiedTime = default(DateTime?), List<KeywordDTO> keywords = default(List<KeywordDTO>), string ownerName = default(string), List<PermissionPairComplexDTO> permissions = default(List<PermissionPairComplexDTO>), bool? currentUserHasModifyPermission = default(bool?), int? representationUseCount = default(int?), string webApplicationPath = default(string), Guid? id = default(Guid?))
        {
            this.ConfigHTML5MapPathLocation = configHTML5MapPathLocation;
            this.Title = title;
            this.Identifier = identifier;
            this.Description = description;
            this.Status = status;
            this.Type = type;
            this.TypeDescription = typeDescription;
            this.SpatialMetaDataDTOs = spatialMetaDataDTOs;
            this.PublicAccess = publicAccess;
            this.CustomViewer = customViewer;
            this.OriginalMapPackageTimestamp = originalMapPackageTimestamp;
            this.IsMapTerritoryReady = isMapTerritoryReady;
            this.ThumbnailVersion = thumbnailVersion;
            this.FolderId = folderId;
            this.Path = path;
            this.Editable = editable;
            this.SeoTitle = seoTitle;
            this.SeoDescription = seoDescription;
            this.SeoCustomHTML = seoCustomHTML;
            this.ScoringEnabled = scoringEnabled;
            this.ModifiedThumbnail = modifiedThumbnail;
            this.LanguageDescription = languageDescription;
            this.CreationTime = creationTime;
            this.LastModifiedAuthor = lastModifiedAuthor;
            this.LastModifiedTime = lastModifiedTime;
            this.Keywords = keywords;
            this.OwnerName = ownerName;
            this.Permissions = permissions;
            this.CurrentUserHasModifyPermission = currentUserHasModifyPermission;
            this.RepresentationUseCount = representationUseCount;
            this.WebApplicationPath = webApplicationPath;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets ConfigHTML5MapPathLocation
        /// </summary>
        [DataMember(Name="ConfigHTML5MapPathLocation", EmitDefaultValue=false)]
        public string ConfigHTML5MapPathLocation { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }



        /// <summary>
        /// Gets or Sets TypeDescription
        /// </summary>
        [DataMember(Name="TypeDescription", EmitDefaultValue=false)]
        public string TypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets SpatialMetaDataDTOs
        /// </summary>
        [DataMember(Name="spatialMetaDataDTOs", EmitDefaultValue=false)]
        public List<SpatialMetadataDTO> SpatialMetaDataDTOs { get; set; }

        /// <summary>
        /// Gets or Sets PublicAccess
        /// </summary>
        [DataMember(Name="PublicAccess", EmitDefaultValue=false)]
        public bool? PublicAccess { get; set; }

        /// <summary>
        /// Gets or Sets CustomViewer
        /// </summary>
        [DataMember(Name="CustomViewer", EmitDefaultValue=false)]
        public bool? CustomViewer { get; set; }

        /// <summary>
        /// Gets or Sets OriginalMapPackageTimestamp
        /// </summary>
        [DataMember(Name="OriginalMapPackageTimestamp", EmitDefaultValue=false)]
        public DateTime? OriginalMapPackageTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets IsMapTerritoryReady
        /// </summary>
        [DataMember(Name="IsMapTerritoryReady", EmitDefaultValue=false)]
        public bool? IsMapTerritoryReady { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailVersion
        /// </summary>
        [DataMember(Name="ThumbnailVersion", EmitDefaultValue=false)]
        public string ThumbnailVersion { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="FolderId", EmitDefaultValue=false)]
        public Guid? FolderId { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Editable
        /// </summary>
        [DataMember(Name="Editable", EmitDefaultValue=false)]
        public bool? Editable { get; set; }

        /// <summary>
        /// Gets or Sets SeoTitle
        /// </summary>
        [DataMember(Name="seoTitle", EmitDefaultValue=false)]
        public string SeoTitle { get; set; }

        /// <summary>
        /// Gets or Sets SeoDescription
        /// </summary>
        [DataMember(Name="seoDescription", EmitDefaultValue=false)]
        public string SeoDescription { get; set; }

        /// <summary>
        /// Gets or Sets SeoCustomHTML
        /// </summary>
        [DataMember(Name="seoCustomHTML", EmitDefaultValue=false)]
        public string SeoCustomHTML { get; set; }

        /// <summary>
        /// Gets or Sets ScoringEnabled
        /// </summary>
        [DataMember(Name="ScoringEnabled", EmitDefaultValue=false)]
        public bool? ScoringEnabled { get; set; }

        /// <summary>
        /// Gets or Sets StoragePath
        /// </summary>
        [DataMember(Name="StoragePath", EmitDefaultValue=false)]
        public string StoragePath { get; private set; }

        /// <summary>
        /// Gets or Sets DynamicThumbnailURL
        /// </summary>
        [DataMember(Name="DynamicThumbnailURL", EmitDefaultValue=false)]
        public string DynamicThumbnailURL { get; private set; }

        /// <summary>
        /// Gets or Sets ModifiedThumbnail
        /// </summary>
        [DataMember(Name="ModifiedThumbnail", EmitDefaultValue=false)]
        public byte[] ModifiedThumbnail { get; set; }

        /// <summary>
        /// Gets or Sets MapUrl
        /// </summary>
        [DataMember(Name="MapUrl", EmitDefaultValue=false)]
        public string MapUrl { get; private set; }

        /// <summary>
        /// Gets or Sets LanguageDescription
        /// </summary>
        [DataMember(Name="LanguageDescription", EmitDefaultValue=false)]
        public string LanguageDescription { get; set; }

        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name="CreationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedAuthor
        /// </summary>
        [DataMember(Name="LastModifiedAuthor", EmitDefaultValue=false)]
        public string LastModifiedAuthor { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedTime
        /// </summary>
        [DataMember(Name="LastModifiedTime", EmitDefaultValue=false)]
        public DateTime? LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Keywords
        /// </summary>
        [DataMember(Name="Keywords", EmitDefaultValue=false)]
        public List<KeywordDTO> Keywords { get; set; }

        /// <summary>
        /// Gets or Sets OwnerName
        /// </summary>
        [DataMember(Name="OwnerName", EmitDefaultValue=false)]
        public string OwnerName { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="Permissions", EmitDefaultValue=false)]
        public List<PermissionPairComplexDTO> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets CurrentUserHasModifyPermission
        /// </summary>
        [DataMember(Name="CurrentUserHasModifyPermission", EmitDefaultValue=false)]
        public bool? CurrentUserHasModifyPermission { get; set; }

        /// <summary>
        /// Gets or Sets RepresentationUseCount
        /// </summary>
        [DataMember(Name="RepresentationUseCount", EmitDefaultValue=false)]
        public int? RepresentationUseCount { get; set; }

        /// <summary>
        /// Gets or Sets WebApplicationPath
        /// </summary>
        [DataMember(Name="WebApplicationPath", EmitDefaultValue=false)]
        public string WebApplicationPath { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MapDTO {\n");
            sb.Append("  ConfigHTML5MapPathLocation: ").Append(ConfigHTML5MapPathLocation).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TypeDescription: ").Append(TypeDescription).Append("\n");
            sb.Append("  SpatialMetaDataDTOs: ").Append(SpatialMetaDataDTOs).Append("\n");
            sb.Append("  PublicAccess: ").Append(PublicAccess).Append("\n");
            sb.Append("  CustomViewer: ").Append(CustomViewer).Append("\n");
            sb.Append("  OriginalMapPackageTimestamp: ").Append(OriginalMapPackageTimestamp).Append("\n");
            sb.Append("  IsMapTerritoryReady: ").Append(IsMapTerritoryReady).Append("\n");
            sb.Append("  ThumbnailVersion: ").Append(ThumbnailVersion).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  SeoTitle: ").Append(SeoTitle).Append("\n");
            sb.Append("  SeoDescription: ").Append(SeoDescription).Append("\n");
            sb.Append("  SeoCustomHTML: ").Append(SeoCustomHTML).Append("\n");
            sb.Append("  ScoringEnabled: ").Append(ScoringEnabled).Append("\n");
            sb.Append("  StoragePath: ").Append(StoragePath).Append("\n");
            sb.Append("  DynamicThumbnailURL: ").Append(DynamicThumbnailURL).Append("\n");
            sb.Append("  ModifiedThumbnail: ").Append(ModifiedThumbnail).Append("\n");
            sb.Append("  MapUrl: ").Append(MapUrl).Append("\n");
            sb.Append("  LanguageDescription: ").Append(LanguageDescription).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedAuthor: ").Append(LastModifiedAuthor).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  CurrentUserHasModifyPermission: ").Append(CurrentUserHasModifyPermission).Append("\n");
            sb.Append("  RepresentationUseCount: ").Append(RepresentationUseCount).Append("\n");
            sb.Append("  WebApplicationPath: ").Append(WebApplicationPath).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MapDTO);
        }

        /// <summary>
        /// Returns true if MapDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MapDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfigHTML5MapPathLocation == input.ConfigHTML5MapPathLocation ||
                    (this.ConfigHTML5MapPathLocation != null &&
                    this.ConfigHTML5MapPathLocation.Equals(input.ConfigHTML5MapPathLocation))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TypeDescription == input.TypeDescription ||
                    (this.TypeDescription != null &&
                    this.TypeDescription.Equals(input.TypeDescription))
                ) && 
                (
                    this.SpatialMetaDataDTOs == input.SpatialMetaDataDTOs ||
                    this.SpatialMetaDataDTOs != null &&
                    this.SpatialMetaDataDTOs.SequenceEqual(input.SpatialMetaDataDTOs)
                ) && 
                (
                    this.PublicAccess == input.PublicAccess ||
                    (this.PublicAccess != null &&
                    this.PublicAccess.Equals(input.PublicAccess))
                ) && 
                (
                    this.CustomViewer == input.CustomViewer ||
                    (this.CustomViewer != null &&
                    this.CustomViewer.Equals(input.CustomViewer))
                ) && 
                (
                    this.OriginalMapPackageTimestamp == input.OriginalMapPackageTimestamp ||
                    (this.OriginalMapPackageTimestamp != null &&
                    this.OriginalMapPackageTimestamp.Equals(input.OriginalMapPackageTimestamp))
                ) && 
                (
                    this.IsMapTerritoryReady == input.IsMapTerritoryReady ||
                    (this.IsMapTerritoryReady != null &&
                    this.IsMapTerritoryReady.Equals(input.IsMapTerritoryReady))
                ) && 
                (
                    this.ThumbnailVersion == input.ThumbnailVersion ||
                    (this.ThumbnailVersion != null &&
                    this.ThumbnailVersion.Equals(input.ThumbnailVersion))
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Editable == input.Editable ||
                    (this.Editable != null &&
                    this.Editable.Equals(input.Editable))
                ) && 
                (
                    this.SeoTitle == input.SeoTitle ||
                    (this.SeoTitle != null &&
                    this.SeoTitle.Equals(input.SeoTitle))
                ) && 
                (
                    this.SeoDescription == input.SeoDescription ||
                    (this.SeoDescription != null &&
                    this.SeoDescription.Equals(input.SeoDescription))
                ) && 
                (
                    this.SeoCustomHTML == input.SeoCustomHTML ||
                    (this.SeoCustomHTML != null &&
                    this.SeoCustomHTML.Equals(input.SeoCustomHTML))
                ) && 
                (
                    this.ScoringEnabled == input.ScoringEnabled ||
                    (this.ScoringEnabled != null &&
                    this.ScoringEnabled.Equals(input.ScoringEnabled))
                ) && 
                (
                    this.StoragePath == input.StoragePath ||
                    (this.StoragePath != null &&
                    this.StoragePath.Equals(input.StoragePath))
                ) && 
                (
                    this.DynamicThumbnailURL == input.DynamicThumbnailURL ||
                    (this.DynamicThumbnailURL != null &&
                    this.DynamicThumbnailURL.Equals(input.DynamicThumbnailURL))
                ) && 
                (
                    this.ModifiedThumbnail == input.ModifiedThumbnail ||
                    (this.ModifiedThumbnail != null &&
                    this.ModifiedThumbnail.Equals(input.ModifiedThumbnail))
                ) && 
                (
                    this.MapUrl == input.MapUrl ||
                    (this.MapUrl != null &&
                    this.MapUrl.Equals(input.MapUrl))
                ) && 
                (
                    this.LanguageDescription == input.LanguageDescription ||
                    (this.LanguageDescription != null &&
                    this.LanguageDescription.Equals(input.LanguageDescription))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.LastModifiedAuthor == input.LastModifiedAuthor ||
                    (this.LastModifiedAuthor != null &&
                    this.LastModifiedAuthor.Equals(input.LastModifiedAuthor))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && 
                (
                    this.OwnerName == input.OwnerName ||
                    (this.OwnerName != null &&
                    this.OwnerName.Equals(input.OwnerName))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.CurrentUserHasModifyPermission == input.CurrentUserHasModifyPermission ||
                    (this.CurrentUserHasModifyPermission != null &&
                    this.CurrentUserHasModifyPermission.Equals(input.CurrentUserHasModifyPermission))
                ) && 
                (
                    this.RepresentationUseCount == input.RepresentationUseCount ||
                    (this.RepresentationUseCount != null &&
                    this.RepresentationUseCount.Equals(input.RepresentationUseCount))
                ) && 
                (
                    this.WebApplicationPath == input.WebApplicationPath ||
                    (this.WebApplicationPath != null &&
                    this.WebApplicationPath.Equals(input.WebApplicationPath))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfigHTML5MapPathLocation != null)
                    hashCode = hashCode * 59 + this.ConfigHTML5MapPathLocation.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TypeDescription != null)
                    hashCode = hashCode * 59 + this.TypeDescription.GetHashCode();
                if (this.SpatialMetaDataDTOs != null)
                    hashCode = hashCode * 59 + this.SpatialMetaDataDTOs.GetHashCode();
                if (this.PublicAccess != null)
                    hashCode = hashCode * 59 + this.PublicAccess.GetHashCode();
                if (this.CustomViewer != null)
                    hashCode = hashCode * 59 + this.CustomViewer.GetHashCode();
                if (this.OriginalMapPackageTimestamp != null)
                    hashCode = hashCode * 59 + this.OriginalMapPackageTimestamp.GetHashCode();
                if (this.IsMapTerritoryReady != null)
                    hashCode = hashCode * 59 + this.IsMapTerritoryReady.GetHashCode();
                if (this.ThumbnailVersion != null)
                    hashCode = hashCode * 59 + this.ThumbnailVersion.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Editable != null)
                    hashCode = hashCode * 59 + this.Editable.GetHashCode();
                if (this.SeoTitle != null)
                    hashCode = hashCode * 59 + this.SeoTitle.GetHashCode();
                if (this.SeoDescription != null)
                    hashCode = hashCode * 59 + this.SeoDescription.GetHashCode();
                if (this.SeoCustomHTML != null)
                    hashCode = hashCode * 59 + this.SeoCustomHTML.GetHashCode();
                if (this.ScoringEnabled != null)
                    hashCode = hashCode * 59 + this.ScoringEnabled.GetHashCode();
                if (this.StoragePath != null)
                    hashCode = hashCode * 59 + this.StoragePath.GetHashCode();
                if (this.DynamicThumbnailURL != null)
                    hashCode = hashCode * 59 + this.DynamicThumbnailURL.GetHashCode();
                if (this.ModifiedThumbnail != null)
                    hashCode = hashCode * 59 + this.ModifiedThumbnail.GetHashCode();
                if (this.MapUrl != null)
                    hashCode = hashCode * 59 + this.MapUrl.GetHashCode();
                if (this.LanguageDescription != null)
                    hashCode = hashCode * 59 + this.LanguageDescription.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.LastModifiedAuthor != null)
                    hashCode = hashCode * 59 + this.LastModifiedAuthor.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                if (this.OwnerName != null)
                    hashCode = hashCode * 59 + this.OwnerName.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.CurrentUserHasModifyPermission != null)
                    hashCode = hashCode * 59 + this.CurrentUserHasModifyPermission.GetHashCode();
                if (this.RepresentationUseCount != null)
                    hashCode = hashCode * 59 + this.RepresentationUseCount.GetHashCode();
                if (this.WebApplicationPath != null)
                    hashCode = hashCode * 59 + this.WebApplicationPath.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

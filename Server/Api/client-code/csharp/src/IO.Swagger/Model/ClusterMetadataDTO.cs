/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ClusterMetadataDTO
    /// </summary>
    [DataContract]
    public partial class ClusterMetadataDTO :  IEquatable<ClusterMetadataDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines ClusterStatus
        /// </summary>
        public enum ClusterStatusEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2
        }

        /// <summary>
        /// Gets or Sets ClusterStatus
        /// </summary>
        [DataMember(Name="ClusterStatus", EmitDefaultValue=false)]
        public ClusterStatusEnum? ClusterStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterMetadataDTO" /> class.
        /// </summary>
        /// <param name="clusterStatus">clusterStatus.</param>
        /// <param name="featureGroupTableRef">featureGroupTableRef.</param>
        /// <param name="featureGroupXREFTableRef">featureGroupXREFTableRef.</param>
        public ClusterMetadataDTO(ClusterStatusEnum? clusterStatus = default(ClusterStatusEnum?), string featureGroupTableRef = default(string), string featureGroupXREFTableRef = default(string))
        {
            this.ClusterStatus = clusterStatus;
            this.FeatureGroupTableRef = featureGroupTableRef;
            this.FeatureGroupXREFTableRef = featureGroupXREFTableRef;
        }
        

        /// <summary>
        /// Gets or Sets FeatureGroupTableRef
        /// </summary>
        [DataMember(Name="FeatureGroupTableRef", EmitDefaultValue=false)]
        public string FeatureGroupTableRef { get; set; }

        /// <summary>
        /// Gets or Sets FeatureGroupXREFTableRef
        /// </summary>
        [DataMember(Name="FeatureGroupXREFTableRef", EmitDefaultValue=false)]
        public string FeatureGroupXREFTableRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterMetadataDTO {\n");
            sb.Append("  ClusterStatus: ").Append(ClusterStatus).Append("\n");
            sb.Append("  FeatureGroupTableRef: ").Append(FeatureGroupTableRef).Append("\n");
            sb.Append("  FeatureGroupXREFTableRef: ").Append(FeatureGroupXREFTableRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClusterMetadataDTO);
        }

        /// <summary>
        /// Returns true if ClusterMetadataDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ClusterMetadataDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterMetadataDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClusterStatus == input.ClusterStatus ||
                    (this.ClusterStatus != null &&
                    this.ClusterStatus.Equals(input.ClusterStatus))
                ) && 
                (
                    this.FeatureGroupTableRef == input.FeatureGroupTableRef ||
                    (this.FeatureGroupTableRef != null &&
                    this.FeatureGroupTableRef.Equals(input.FeatureGroupTableRef))
                ) && 
                (
                    this.FeatureGroupXREFTableRef == input.FeatureGroupXREFTableRef ||
                    (this.FeatureGroupXREFTableRef != null &&
                    this.FeatureGroupXREFTableRef.Equals(input.FeatureGroupXREFTableRef))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClusterStatus != null)
                    hashCode = hashCode * 59 + this.ClusterStatus.GetHashCode();
                if (this.FeatureGroupTableRef != null)
                    hashCode = hashCode * 59 + this.FeatureGroupTableRef.GetHashCode();
                if (this.FeatureGroupXREFTableRef != null)
                    hashCode = hashCode * 59 + this.FeatureGroupXREFTableRef.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

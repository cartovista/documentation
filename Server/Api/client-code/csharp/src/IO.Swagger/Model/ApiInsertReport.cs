/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiInsertReport
    /// </summary>
    [DataContract]
    public partial class ApiInsertReport :  IEquatable<ApiInsertReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiInsertReport" /> class.
        /// </summary>
        /// <param name="createCount">createCount.</param>
        /// <param name="insertedIdentifiers">insertedIdentifiers.</param>
        /// <param name="updatedIdentifiers">updatedIdentifiers.</param>
        /// <param name="errorCount">errorCount.</param>
        /// <param name="errorDetails">errorDetails.</param>
        public ApiInsertReport(int? createCount = default(int?), List<string> insertedIdentifiers = default(List<string>), List<string> updatedIdentifiers = default(List<string>), int? errorCount = default(int?), List<ErrorDetail> errorDetails = default(List<ErrorDetail>))
        {
            this.CreateCount = createCount;
            this.InsertedIdentifiers = insertedIdentifiers;
            this.UpdatedIdentifiers = updatedIdentifiers;
            this.ErrorCount = errorCount;
            this.ErrorDetails = errorDetails;
        }
        
        /// <summary>
        /// Gets or Sets CreateCount
        /// </summary>
        [DataMember(Name="CreateCount", EmitDefaultValue=false)]
        public int? CreateCount { get; set; }

        /// <summary>
        /// Gets or Sets InsertedIdentifiers
        /// </summary>
        [DataMember(Name="InsertedIdentifiers", EmitDefaultValue=false)]
        public List<string> InsertedIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedIdentifiers
        /// </summary>
        [DataMember(Name="UpdatedIdentifiers", EmitDefaultValue=false)]
        public List<string> UpdatedIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCount
        /// </summary>
        [DataMember(Name="ErrorCount", EmitDefaultValue=false)]
        public int? ErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="ErrorDetails", EmitDefaultValue=false)]
        public List<ErrorDetail> ErrorDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiInsertReport {\n");
            sb.Append("  CreateCount: ").Append(CreateCount).Append("\n");
            sb.Append("  InsertedIdentifiers: ").Append(InsertedIdentifiers).Append("\n");
            sb.Append("  UpdatedIdentifiers: ").Append(UpdatedIdentifiers).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiInsertReport);
        }

        /// <summary>
        /// Returns true if ApiInsertReport instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiInsertReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiInsertReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateCount == input.CreateCount ||
                    (this.CreateCount != null &&
                    this.CreateCount.Equals(input.CreateCount))
                ) && 
                (
                    this.InsertedIdentifiers == input.InsertedIdentifiers ||
                    this.InsertedIdentifiers != null &&
                    this.InsertedIdentifiers.SequenceEqual(input.InsertedIdentifiers)
                ) && 
                (
                    this.UpdatedIdentifiers == input.UpdatedIdentifiers ||
                    this.UpdatedIdentifiers != null &&
                    this.UpdatedIdentifiers.SequenceEqual(input.UpdatedIdentifiers)
                ) && 
                (
                    this.ErrorCount == input.ErrorCount ||
                    (this.ErrorCount != null &&
                    this.ErrorCount.Equals(input.ErrorCount))
                ) && 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    this.ErrorDetails != null &&
                    this.ErrorDetails.SequenceEqual(input.ErrorDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateCount != null)
                    hashCode = hashCode * 59 + this.CreateCount.GetHashCode();
                if (this.InsertedIdentifiers != null)
                    hashCode = hashCode * 59 + this.InsertedIdentifiers.GetHashCode();
                if (this.UpdatedIdentifiers != null)
                    hashCode = hashCode * 59 + this.UpdatedIdentifiers.GetHashCode();
                if (this.ErrorCount != null)
                    hashCode = hashCode * 59 + this.ErrorCount.GetHashCode();
                if (this.ErrorDetails != null)
                    hashCode = hashCode * 59 + this.ErrorDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

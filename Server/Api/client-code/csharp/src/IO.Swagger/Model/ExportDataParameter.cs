/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ExportDataParameter
    /// </summary>
    [DataContract]
    public partial class ExportDataParameter :  IEquatable<ExportDataParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportDataParameter" /> class.
        /// </summary>
        /// <param name="layerIds">layerIds.</param>
        /// <param name="mapImageBase64">mapImageBase64.</param>
        public ExportDataParameter(List<Guid?> layerIds = default(List<Guid?>), string mapImageBase64 = default(string))
        {
            this.LayerIds = layerIds;
            this.MapImageBase64 = mapImageBase64;
        }
        
        /// <summary>
        /// Gets or Sets LayerIds
        /// </summary>
        [DataMember(Name="layerIds", EmitDefaultValue=false)]
        public List<Guid?> LayerIds { get; set; }

        /// <summary>
        /// Gets or Sets MapImageBase64
        /// </summary>
        [DataMember(Name="mapImageBase64", EmitDefaultValue=false)]
        public string MapImageBase64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExportDataParameter {\n");
            sb.Append("  LayerIds: ").Append(LayerIds).Append("\n");
            sb.Append("  MapImageBase64: ").Append(MapImageBase64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportDataParameter);
        }

        /// <summary>
        /// Returns true if ExportDataParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportDataParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportDataParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LayerIds == input.LayerIds ||
                    this.LayerIds != null &&
                    this.LayerIds.SequenceEqual(input.LayerIds)
                ) && 
                (
                    this.MapImageBase64 == input.MapImageBase64 ||
                    (this.MapImageBase64 != null &&
                    this.MapImageBase64.Equals(input.MapImageBase64))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LayerIds != null)
                    hashCode = hashCode * 59 + this.LayerIds.GetHashCode();
                if (this.MapImageBase64 != null)
                    hashCode = hashCode * 59 + this.MapImageBase64.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

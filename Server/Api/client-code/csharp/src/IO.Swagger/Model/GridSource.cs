/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GridSource
    /// </summary>
    [DataContract]
    public partial class GridSource :  IEquatable<GridSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GridSource" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="gridLayerId">gridLayerId.</param>
        /// <param name="uniqueIdentifier">uniqueIdentifier.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="fileMetadata">fileMetadata.</param>
        /// <param name="bandMetadata">bandMetadata.</param>
        /// <param name="band">band.</param>
        /// <param name="creationTime">creationTime.</param>
        /// <param name="modifiedTime">modifiedTime.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="noDataEnabled">noDataEnabled.</param>
        /// <param name="noDataValue">noDataValue.</param>
        /// <param name="minValue">minValue.</param>
        /// <param name="maxValue">maxValue.</param>
        public GridSource(Guid? id = default(Guid?), Guid? gridLayerId = default(Guid?), string uniqueIdentifier = default(string), string name = default(string), string description = default(string), string fileMetadata = default(string), string bandMetadata = default(string), int? band = default(int?), DateTime? creationTime = default(DateTime?), DateTime? modifiedTime = default(DateTime?), DateTime? timestamp = default(DateTime?), bool? noDataEnabled = default(bool?), string noDataValue = default(string), double? minValue = default(double?), double? maxValue = default(double?))
        {
            this.Id = id;
            this.GridLayerId = gridLayerId;
            this.UniqueIdentifier = uniqueIdentifier;
            this.Name = name;
            this.Description = description;
            this.FileMetadata = fileMetadata;
            this.BandMetadata = bandMetadata;
            this.Band = band;
            this.CreationTime = creationTime;
            this.ModifiedTime = modifiedTime;
            this.Timestamp = timestamp;
            this.NoDataEnabled = noDataEnabled;
            this.NoDataValue = noDataValue;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets GridLayerId
        /// </summary>
        [DataMember(Name="gridLayerId", EmitDefaultValue=false)]
        public Guid? GridLayerId { get; set; }

        /// <summary>
        /// Gets or Sets UniqueIdentifier
        /// </summary>
        [DataMember(Name="uniqueIdentifier", EmitDefaultValue=false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FileMetadata
        /// </summary>
        [DataMember(Name="fileMetadata", EmitDefaultValue=false)]
        public string FileMetadata { get; set; }

        /// <summary>
        /// Gets or Sets BandMetadata
        /// </summary>
        [DataMember(Name="bandMetadata", EmitDefaultValue=false)]
        public string BandMetadata { get; set; }

        /// <summary>
        /// Gets or Sets Band
        /// </summary>
        [DataMember(Name="band", EmitDefaultValue=false)]
        public int? Band { get; set; }

        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedTime
        /// </summary>
        [DataMember(Name="modifiedTime", EmitDefaultValue=false)]
        public DateTime? ModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets NoDataEnabled
        /// </summary>
        [DataMember(Name="noDataEnabled", EmitDefaultValue=false)]
        public bool? NoDataEnabled { get; set; }

        /// <summary>
        /// Gets or Sets NoDataValue
        /// </summary>
        [DataMember(Name="noDataValue", EmitDefaultValue=false)]
        public string NoDataValue { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="minValue", EmitDefaultValue=false)]
        public double? MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="maxValue", EmitDefaultValue=false)]
        public double? MaxValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GridSource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GridLayerId: ").Append(GridLayerId).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FileMetadata: ").Append(FileMetadata).Append("\n");
            sb.Append("  BandMetadata: ").Append(BandMetadata).Append("\n");
            sb.Append("  Band: ").Append(Band).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  NoDataEnabled: ").Append(NoDataEnabled).Append("\n");
            sb.Append("  NoDataValue: ").Append(NoDataValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GridSource);
        }

        /// <summary>
        /// Returns true if GridSource instances are equal
        /// </summary>
        /// <param name="input">Instance of GridSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GridSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GridLayerId == input.GridLayerId ||
                    (this.GridLayerId != null &&
                    this.GridLayerId.Equals(input.GridLayerId))
                ) && 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FileMetadata == input.FileMetadata ||
                    (this.FileMetadata != null &&
                    this.FileMetadata.Equals(input.FileMetadata))
                ) && 
                (
                    this.BandMetadata == input.BandMetadata ||
                    (this.BandMetadata != null &&
                    this.BandMetadata.Equals(input.BandMetadata))
                ) && 
                (
                    this.Band == input.Band ||
                    (this.Band != null &&
                    this.Band.Equals(input.Band))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.NoDataEnabled == input.NoDataEnabled ||
                    (this.NoDataEnabled != null &&
                    this.NoDataEnabled.Equals(input.NoDataEnabled))
                ) && 
                (
                    this.NoDataValue == input.NoDataValue ||
                    (this.NoDataValue != null &&
                    this.NoDataValue.Equals(input.NoDataValue))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GridLayerId != null)
                    hashCode = hashCode * 59 + this.GridLayerId.GetHashCode();
                if (this.UniqueIdentifier != null)
                    hashCode = hashCode * 59 + this.UniqueIdentifier.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FileMetadata != null)
                    hashCode = hashCode * 59 + this.FileMetadata.GetHashCode();
                if (this.BandMetadata != null)
                    hashCode = hashCode * 59 + this.BandMetadata.GetHashCode();
                if (this.Band != null)
                    hashCode = hashCode * 59 + this.Band.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.NoDataEnabled != null)
                    hashCode = hashCode * 59 + this.NoDataEnabled.GetHashCode();
                if (this.NoDataValue != null)
                    hashCode = hashCode * 59 + this.NoDataValue.GetHashCode();
                if (this.MinValue != null)
                    hashCode = hashCode * 59 + this.MinValue.GetHashCode();
                if (this.MaxValue != null)
                    hashCode = hashCode * 59 + this.MaxValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

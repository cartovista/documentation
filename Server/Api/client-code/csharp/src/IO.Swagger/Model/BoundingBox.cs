/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BoundingBox
    /// </summary>
    [DataContract]
    public partial class BoundingBox :  IEquatable<BoundingBox>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoundingBox" /> class.
        /// </summary>
        /// <param name="minx">minx.</param>
        /// <param name="miny">miny.</param>
        /// <param name="maxx">maxx.</param>
        /// <param name="maxy">maxy.</param>
        public BoundingBox(double? minx = default(double?), double? miny = default(double?), double? maxx = default(double?), double? maxy = default(double?))
        {
            this.Minx = minx;
            this.Miny = miny;
            this.Maxx = maxx;
            this.Maxy = maxy;
        }
        
        /// <summary>
        /// Gets or Sets Minx
        /// </summary>
        [DataMember(Name="minx", EmitDefaultValue=false)]
        public double? Minx { get; set; }

        /// <summary>
        /// Gets or Sets Miny
        /// </summary>
        [DataMember(Name="miny", EmitDefaultValue=false)]
        public double? Miny { get; set; }

        /// <summary>
        /// Gets or Sets Maxx
        /// </summary>
        [DataMember(Name="maxx", EmitDefaultValue=false)]
        public double? Maxx { get; set; }

        /// <summary>
        /// Gets or Sets Maxy
        /// </summary>
        [DataMember(Name="maxy", EmitDefaultValue=false)]
        public double? Maxy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BoundingBox {\n");
            sb.Append("  Minx: ").Append(Minx).Append("\n");
            sb.Append("  Miny: ").Append(Miny).Append("\n");
            sb.Append("  Maxx: ").Append(Maxx).Append("\n");
            sb.Append("  Maxy: ").Append(Maxy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoundingBox);
        }

        /// <summary>
        /// Returns true if BoundingBox instances are equal
        /// </summary>
        /// <param name="input">Instance of BoundingBox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoundingBox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Minx == input.Minx ||
                    (this.Minx != null &&
                    this.Minx.Equals(input.Minx))
                ) && 
                (
                    this.Miny == input.Miny ||
                    (this.Miny != null &&
                    this.Miny.Equals(input.Miny))
                ) && 
                (
                    this.Maxx == input.Maxx ||
                    (this.Maxx != null &&
                    this.Maxx.Equals(input.Maxx))
                ) && 
                (
                    this.Maxy == input.Maxy ||
                    (this.Maxy != null &&
                    this.Maxy.Equals(input.Maxy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Minx != null)
                    hashCode = hashCode * 59 + this.Minx.GetHashCode();
                if (this.Miny != null)
                    hashCode = hashCode * 59 + this.Miny.GetHashCode();
                if (this.Maxx != null)
                    hashCode = hashCode * 59 + this.Maxx.GetHashCode();
                if (this.Maxy != null)
                    hashCode = hashCode * 59 + this.Maxy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FeatureWKT
    /// </summary>
    [DataContract]
    public partial class FeatureWKT :  IEquatable<FeatureWKT>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureWKT" /> class.
        /// </summary>
        /// <param name="wKT">wKT.</param>
        /// <param name="geometryType">geometryType.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="values">values.</param>
        /// <param name="dataColumnsIdentifiers">dataColumnsIdentifiers.</param>
        /// <param name="dataColumnsSystemIdentifiers">dataColumnsSystemIdentifiers.</param>
        public FeatureWKT(string wKT = default(string), string geometryType = default(string), string identifier = default(string), List<Object> values = default(List<Object>), List<string> dataColumnsIdentifiers = default(List<string>), List<Guid?> dataColumnsSystemIdentifiers = default(List<Guid?>))
        {
            this.WKT = wKT;
            this.GeometryType = geometryType;
            this.Identifier = identifier;
            this.Values = values;
            this.DataColumnsIdentifiers = dataColumnsIdentifiers;
            this.DataColumnsSystemIdentifiers = dataColumnsSystemIdentifiers;
        }
        
        /// <summary>
        /// Gets or Sets WKT
        /// </summary>
        [DataMember(Name="WKT", EmitDefaultValue=false)]
        public string WKT { get; set; }

        /// <summary>
        /// Gets or Sets GeometryType
        /// </summary>
        [DataMember(Name="GeometryType", EmitDefaultValue=false)]
        public string GeometryType { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="Values", EmitDefaultValue=false)]
        public List<Object> Values { get; set; }

        /// <summary>
        /// Gets or Sets DataColumnsIdentifiers
        /// </summary>
        [DataMember(Name="DataColumnsIdentifiers", EmitDefaultValue=false)]
        public List<string> DataColumnsIdentifiers { get; set; }

        /// <summary>
        /// Gets or Sets DataColumnsSystemIdentifiers
        /// </summary>
        [DataMember(Name="DataColumnsSystemIdentifiers", EmitDefaultValue=false)]
        public List<Guid?> DataColumnsSystemIdentifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureWKT {\n");
            sb.Append("  WKT: ").Append(WKT).Append("\n");
            sb.Append("  GeometryType: ").Append(GeometryType).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  DataColumnsIdentifiers: ").Append(DataColumnsIdentifiers).Append("\n");
            sb.Append("  DataColumnsSystemIdentifiers: ").Append(DataColumnsSystemIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeatureWKT);
        }

        /// <summary>
        /// Returns true if FeatureWKT instances are equal
        /// </summary>
        /// <param name="input">Instance of FeatureWKT to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureWKT input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WKT == input.WKT ||
                    (this.WKT != null &&
                    this.WKT.Equals(input.WKT))
                ) && 
                (
                    this.GeometryType == input.GeometryType ||
                    (this.GeometryType != null &&
                    this.GeometryType.Equals(input.GeometryType))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.DataColumnsIdentifiers == input.DataColumnsIdentifiers ||
                    this.DataColumnsIdentifiers != null &&
                    this.DataColumnsIdentifiers.SequenceEqual(input.DataColumnsIdentifiers)
                ) && 
                (
                    this.DataColumnsSystemIdentifiers == input.DataColumnsSystemIdentifiers ||
                    this.DataColumnsSystemIdentifiers != null &&
                    this.DataColumnsSystemIdentifiers.SequenceEqual(input.DataColumnsSystemIdentifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WKT != null)
                    hashCode = hashCode * 59 + this.WKT.GetHashCode();
                if (this.GeometryType != null)
                    hashCode = hashCode * 59 + this.GeometryType.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.DataColumnsIdentifiers != null)
                    hashCode = hashCode * 59 + this.DataColumnsIdentifiers.GetHashCode();
                if (this.DataColumnsSystemIdentifiers != null)
                    hashCode = hashCode * 59 + this.DataColumnsSystemIdentifiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SecurityIdentityDTO
    /// </summary>
    [DataContract]
    public partial class SecurityIdentityDTO :  IEquatable<SecurityIdentityDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines Provider
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderEnum
        {
            
            /// <summary>
            /// Enum CartoVista for value: CartoVista
            /// </summary>
            [EnumMember(Value = "CartoVista")]
            CartoVista = 1,
            
            /// <summary>
            /// Enum ActiveDirectory for value: ActiveDirectory
            /// </summary>
            [EnumMember(Value = "ActiveDirectory")]
            ActiveDirectory = 2
        }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public ProviderEnum? Provider { get; set; }
        /// <summary>
        /// Defines ProviderStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderStatusEnum
        {
            
            /// <summary>
            /// Enum Available for value: Available
            /// </summary>
            [EnumMember(Value = "Available")]
            Available = 1,
            
            /// <summary>
            /// Enum Unavailable for value: Unavailable
            /// </summary>
            [EnumMember(Value = "Unavailable")]
            Unavailable = 2
        }

        /// <summary>
        /// Gets or Sets ProviderStatus
        /// </summary>
        [DataMember(Name="providerStatus", EmitDefaultValue=false)]
        public ProviderStatusEnum? ProviderStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityIdentityDTO" /> class.
        /// </summary>
        /// <param name="displayName">displayName.</param>
        /// <param name="name">name.</param>
        /// <param name="id">id.</param>
        /// <param name="isGroup">isGroup.</param>
        /// <param name="lastModificationTime">lastModificationTime.</param>
        /// <param name="creationTime">creationTime.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="provider">provider.</param>
        /// <param name="identifier">identifier.</param>
        /// <param name="providerStatus">providerStatus.</param>
        /// <param name="path">path.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="secureObjectPermissions">secureObjectPermissions.</param>
        public SecurityIdentityDTO(string displayName = default(string), string name = default(string), string id = default(string), bool? isGroup = default(bool?), DateTime? lastModificationTime = default(DateTime?), DateTime? creationTime = default(DateTime?), Guid? tenantId = default(Guid?), ProviderEnum? provider = default(ProviderEnum?), string identifier = default(string), ProviderStatusEnum? providerStatus = default(ProviderStatusEnum?), string path = default(string), List<string> permissions = default(List<string>), List<PermissionPairDTO> secureObjectPermissions = default(List<PermissionPairDTO>))
        {
            this.DisplayName = displayName;
            this.Name = name;
            this.Id = id;
            this.IsGroup = isGroup;
            this.LastModificationTime = lastModificationTime;
            this.CreationTime = creationTime;
            this.TenantId = tenantId;
            this.Provider = provider;
            this.Identifier = identifier;
            this.ProviderStatus = providerStatus;
            this.Path = path;
            this.Permissions = permissions;
            this.SecureObjectPermissions = secureObjectPermissions;
        }
        
        /// <summary>
        /// Gets or Sets IsAnynomous
        /// </summary>
        [DataMember(Name="isAnynomous", EmitDefaultValue=false)]
        public bool? IsAnynomous { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsGroup
        /// </summary>
        [DataMember(Name="isGroup", EmitDefaultValue=false)]
        public bool? IsGroup { get; set; }

        /// <summary>
        /// Gets or Sets LastModificationTime
        /// </summary>
        [DataMember(Name="lastModificationTime", EmitDefaultValue=false)]
        public DateTime? LastModificationTime { get; set; }

        /// <summary>
        /// Gets or Sets CreationTime
        /// </summary>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public Guid? TenantId { get; set; }


        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }


        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Gets or Sets SecureObjectPermissions
        /// </summary>
        [DataMember(Name="secureObjectPermissions", EmitDefaultValue=false)]
        public List<PermissionPairDTO> SecureObjectPermissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityIdentityDTO {\n");
            sb.Append("  IsAnynomous: ").Append(IsAnynomous).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  LastModificationTime: ").Append(LastModificationTime).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  ProviderStatus: ").Append(ProviderStatus).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  SecureObjectPermissions: ").Append(SecureObjectPermissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityIdentityDTO);
        }

        /// <summary>
        /// Returns true if SecurityIdentityDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityIdentityDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityIdentityDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsAnynomous == input.IsAnynomous ||
                    (this.IsAnynomous != null &&
                    this.IsAnynomous.Equals(input.IsAnynomous))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsGroup == input.IsGroup ||
                    (this.IsGroup != null &&
                    this.IsGroup.Equals(input.IsGroup))
                ) && 
                (
                    this.LastModificationTime == input.LastModificationTime ||
                    (this.LastModificationTime != null &&
                    this.LastModificationTime.Equals(input.LastModificationTime))
                ) && 
                (
                    this.CreationTime == input.CreationTime ||
                    (this.CreationTime != null &&
                    this.CreationTime.Equals(input.CreationTime))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.ProviderStatus == input.ProviderStatus ||
                    (this.ProviderStatus != null &&
                    this.ProviderStatus.Equals(input.ProviderStatus))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.SecureObjectPermissions == input.SecureObjectPermissions ||
                    this.SecureObjectPermissions != null &&
                    this.SecureObjectPermissions.SequenceEqual(input.SecureObjectPermissions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsAnynomous != null)
                    hashCode = hashCode * 59 + this.IsAnynomous.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsGroup != null)
                    hashCode = hashCode * 59 + this.IsGroup.GetHashCode();
                if (this.LastModificationTime != null)
                    hashCode = hashCode * 59 + this.LastModificationTime.GetHashCode();
                if (this.CreationTime != null)
                    hashCode = hashCode * 59 + this.CreationTime.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.ProviderStatus != null)
                    hashCode = hashCode * 59 + this.ProviderStatus.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.SecureObjectPermissions != null)
                    hashCode = hashCode * 59 + this.SecureObjectPermissions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

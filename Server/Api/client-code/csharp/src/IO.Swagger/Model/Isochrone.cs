/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Isochrone
    /// </summary>
    [DataContract]
    public partial class Isochrone :  IEquatable<Isochrone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Isochrone" /> class.
        /// </summary>
        /// <param name="longitude">longitude.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="range">range.</param>
        /// <param name="rangeType">rangeType.</param>
        /// <param name="mode">mode.</param>
        /// <param name="departureTime">departureTime.</param>
        /// <param name="isolineCoordinates">isolineCoordinates.</param>
        public Isochrone(double? longitude = default(double?), double? latitude = default(double?), string range = default(string), string rangeType = default(string), string mode = default(string), string departureTime = default(string), List<double?> isolineCoordinates = default(List<double?>))
        {
            this.Longitude = longitude;
            this.Latitude = latitude;
            this.Range = range;
            this.RangeType = rangeType;
            this.Mode = mode;
            this.DepartureTime = departureTime;
            this.IsolineCoordinates = isolineCoordinates;
        }
        
        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="Longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="Latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="Range", EmitDefaultValue=false)]
        public string Range { get; set; }

        /// <summary>
        /// Gets or Sets RangeType
        /// </summary>
        [DataMember(Name="RangeType", EmitDefaultValue=false)]
        public string RangeType { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="Mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets DepartureTime
        /// </summary>
        [DataMember(Name="DepartureTime", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }

        /// <summary>
        /// Gets or Sets IsolineCoordinates
        /// </summary>
        [DataMember(Name="IsolineCoordinates", EmitDefaultValue=false)]
        public List<double?> IsolineCoordinates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Isochrone {\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  RangeType: ").Append(RangeType).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  IsolineCoordinates: ").Append(IsolineCoordinates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Isochrone);
        }

        /// <summary>
        /// Returns true if Isochrone instances are equal
        /// </summary>
        /// <param name="input">Instance of Isochrone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Isochrone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.RangeType == input.RangeType ||
                    (this.RangeType != null &&
                    this.RangeType.Equals(input.RangeType))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.IsolineCoordinates == input.IsolineCoordinates ||
                    this.IsolineCoordinates != null &&
                    this.IsolineCoordinates.SequenceEqual(input.IsolineCoordinates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.RangeType != null)
                    hashCode = hashCode * 59 + this.RangeType.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.IsolineCoordinates != null)
                    hashCode = hashCode * 59 + this.IsolineCoordinates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

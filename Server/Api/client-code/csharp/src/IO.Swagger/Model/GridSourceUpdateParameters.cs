/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GridSourceUpdateParameters
    /// </summary>
    [DataContract]
    public partial class GridSourceUpdateParameters :  IEquatable<GridSourceUpdateParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GridSourceUpdateParameters" /> class.
        /// </summary>
        /// <param name="uniqueIdentifier">uniqueIdentifier.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="noDataEnabled">noDataEnabled.</param>
        /// <param name="noDataValue">noDataValue.</param>
        public GridSourceUpdateParameters(string uniqueIdentifier = default(string), string name = default(string), string description = default(string), DateTime? timestamp = default(DateTime?), bool? noDataEnabled = default(bool?), string noDataValue = default(string))
        {
            this.UniqueIdentifier = uniqueIdentifier;
            this.Name = name;
            this.Description = description;
            this.Timestamp = timestamp;
            this.NoDataEnabled = noDataEnabled;
            this.NoDataValue = noDataValue;
        }
        
        /// <summary>
        /// Gets or Sets UniqueIdentifier
        /// </summary>
        [DataMember(Name="uniqueIdentifier", EmitDefaultValue=false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets NoDataEnabled
        /// </summary>
        [DataMember(Name="noDataEnabled", EmitDefaultValue=false)]
        public bool? NoDataEnabled { get; set; }

        /// <summary>
        /// Gets or Sets NoDataValue
        /// </summary>
        [DataMember(Name="noDataValue", EmitDefaultValue=false)]
        public string NoDataValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GridSourceUpdateParameters {\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  NoDataEnabled: ").Append(NoDataEnabled).Append("\n");
            sb.Append("  NoDataValue: ").Append(NoDataValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GridSourceUpdateParameters);
        }

        /// <summary>
        /// Returns true if GridSourceUpdateParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of GridSourceUpdateParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GridSourceUpdateParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UniqueIdentifier == input.UniqueIdentifier ||
                    (this.UniqueIdentifier != null &&
                    this.UniqueIdentifier.Equals(input.UniqueIdentifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.NoDataEnabled == input.NoDataEnabled ||
                    (this.NoDataEnabled != null &&
                    this.NoDataEnabled.Equals(input.NoDataEnabled))
                ) && 
                (
                    this.NoDataValue == input.NoDataValue ||
                    (this.NoDataValue != null &&
                    this.NoDataValue.Equals(input.NoDataValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UniqueIdentifier != null)
                    hashCode = hashCode * 59 + this.UniqueIdentifier.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.NoDataEnabled != null)
                    hashCode = hashCode * 59 + this.NoDataEnabled.GetHashCode();
                if (this.NoDataValue != null)
                    hashCode = hashCode * 59 + this.NoDataValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

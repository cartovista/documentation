/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing LayerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LayerApiTests
    {
        private LayerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LayerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LayerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LayerApi
            //Assert.IsInstanceOfType(typeof(LayerApi), instance, "instance is a LayerApi");
        }

        
        /// <summary>
        /// Test LayerCreateLayer
        /// </summary>
        [Test]
        public void LayerCreateLayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LayerCreateParameter parameters = null;
            //var response = instance.LayerCreateLayer(parameters);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
        /// <summary>
        /// Test LayerCreateLayerFromZip
        /// </summary>
        [Test]
        public void LayerCreateLayerFromZipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream _file = null;
            //var response = instance.LayerCreateLayerFromZip(_file);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
        /// <summary>
        /// Test LayerDeleteLayerById
        /// </summary>
        [Test]
        public void LayerDeleteLayerByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layerIdentifier = null;
            //instance.LayerDeleteLayerById(layerIdentifier);
            
        }
        
        /// <summary>
        /// Test LayerGetLayerById
        /// </summary>
        [Test]
        public void LayerGetLayerByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layerIdentifier = null;
            //var response = instance.LayerGetLayerById(layerIdentifier);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
        /// <summary>
        /// Test LayerGetLayers
        /// </summary>
        [Test]
        public void LayerGetLayersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LayerGetLayers();
            //Assert.IsInstanceOf<List<Layer>> (response, "response is List<Layer>");
        }
        
        /// <summary>
        /// Test LayerSetDataColumnUniqueId
        /// </summary>
        [Test]
        public void LayerSetDataColumnUniqueIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layerIdentifier = null;
            //string dataColumnIdentifier = null;
            //var response = instance.LayerSetDataColumnUniqueId(layerIdentifier, dataColumnIdentifier);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
        /// <summary>
        /// Test LayerSetUniqueIdentifier
        /// </summary>
        [Test]
        public void LayerSetUniqueIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layerIdentifier = null;
            //string newIdentifier = null;
            //var response = instance.LayerSetUniqueIdentifier(layerIdentifier, newIdentifier);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
        /// <summary>
        /// Test LayerUpdateLayer
        /// </summary>
        [Test]
        public void LayerUpdateLayerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layerIdentifier = null;
            //LayerUpdateParameter parameters = null;
            //var response = instance.LayerUpdateLayer(layerIdentifier, parameters);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
        /// <summary>
        /// Test LayerUpdateLayerFromZip
        /// </summary>
        [Test]
        public void LayerUpdateLayerFromZipTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string layerIdentifier = null;
            //System.IO.Stream _file = null;
            //var response = instance.LayerUpdateLayerFromZip(layerIdentifier, _file);
            //Assert.IsInstanceOf<Layer> (response, "response is Layer");
        }
        
    }

}

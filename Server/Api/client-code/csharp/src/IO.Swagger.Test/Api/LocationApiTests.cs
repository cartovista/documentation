/* 
 * CartoVista.Server.API.v1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing LocationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LocationApiTests
    {
        private LocationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LocationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LocationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LocationApi
            //Assert.IsInstanceOfType(typeof(LocationApi), instance, "instance is a LocationApi");
        }

        
        /// <summary>
        /// Test LocationGeocode
        /// </summary>
        [Test]
        public void LocationGeocodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.LocationGeocode(address);
            //Assert.IsInstanceOf<List<GeocodedLocation>> (response, "response is List<GeocodedLocation>");
        }
        
        /// <summary>
        /// Test LocationGetRouteSummary
        /// </summary>
        [Test]
        public void LocationGetRouteSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //double? paramOriginLatitude = null;
            //double? paramOriginLongitude = null;
            //double? paramDestinationLatitude = null;
            //double? paramDestinationLongitude = null;
            //var response = instance.LocationGetRouteSummary(paramOriginLatitude, paramOriginLongitude, paramDestinationLatitude, paramDestinationLongitude);
            //Assert.IsInstanceOf<RouteSummary> (response, "response is RouteSummary");
        }
        
        /// <summary>
        /// Test LocationIsochrone
        /// </summary>
        [Test]
        public void LocationIsochroneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IsochroneParams param = null;
            //var response = instance.LocationIsochrone(param);
            //Assert.IsInstanceOf<Isochrone> (response, "response is Isochrone");
        }
        
        /// <summary>
        /// Test LocationReverseGeocode
        /// </summary>
        [Test]
        public void LocationReverseGeocodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReverseGeocodeParams param = null;
            //var response = instance.LocationReverseGeocode(param);
            //Assert.IsInstanceOf<List<GeocodedLocation>> (response, "response is List<GeocodedLocation>");
        }
        
    }

}

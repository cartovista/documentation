/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Layer', 'model/LayerCreateParameter', 'model/LayerUpdateParameter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Layer'), require('../model/LayerCreateParameter'), require('../model/LayerUpdateParameter'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.LayerApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.Layer, root.CartoVistaserverapiv1.LayerCreateParameter, root.CartoVistaserverapiv1.LayerUpdateParameter);
  }
}(this, function(ApiClient, Layer, LayerCreateParameter, LayerUpdateParameter) {
  'use strict';

  /**
   * Layer service.
   * @module api/LayerApi
   * @version v1
   */

  /**
   * Constructs a new LayerApi. 
   * @alias module:api/LayerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the layerCreateLayer operation.
     * @callback module:api/LayerApi~layerCreateLayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LayerCreateParameter} parameters 
     * @param {module:api/LayerApi~layerCreateLayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerCreateLayer = function(parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling layerCreateLayer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/createLayer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerCreateLayerFromZip operation.
     * @callback module:api/LayerApi~layerCreateLayerFromZipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {File} file Upload file
     * @param {module:api/LayerApi~layerCreateLayerFromZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerCreateLayerFromZip = function(file, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling layerCreateLayerFromZip");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/Layer/createFromZip', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerDeleteLayerById operation.
     * @callback module:api/LayerApi~layerDeleteLayerByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:api/LayerApi~layerDeleteLayerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.layerDeleteLayerById = function(layerIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling layerDeleteLayerById");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerGetLayerById operation.
     * @callback module:api/LayerApi~layerGetLayerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:api/LayerApi~layerGetLayerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerGetLayerById = function(layerIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling layerGetLayerById");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerGetLayers operation.
     * @callback module:api/LayerApi~layerGetLayersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Layer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/LayerApi~layerGetLayersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Layer>}
     */
    this.layerGetLayers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Layer];

      return this.apiClient.callApi(
        '/api/v1/Layers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerSetDataColumnUniqueId operation.
     * @callback module:api/LayerApi~layerSetDataColumnUniqueIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} dataColumnIdentifier 
     * @param {module:api/LayerApi~layerSetDataColumnUniqueIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerSetDataColumnUniqueId = function(layerIdentifier, dataColumnIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling layerSetDataColumnUniqueId");
      }

      // verify the required parameter 'dataColumnIdentifier' is set
      if (dataColumnIdentifier === undefined || dataColumnIdentifier === null) {
        throw new Error("Missing the required parameter 'dataColumnIdentifier' when calling layerSetDataColumnUniqueId");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
        'dataColumnIdentifier': dataColumnIdentifier,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/setDataColumnUniqueId', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerSetUniqueIdentifier operation.
     * @callback module:api/LayerApi~layerSetUniqueIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} newIdentifier 
     * @param {module:api/LayerApi~layerSetUniqueIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerSetUniqueIdentifier = function(layerIdentifier, newIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling layerSetUniqueIdentifier");
      }

      // verify the required parameter 'newIdentifier' is set
      if (newIdentifier === undefined || newIdentifier === null) {
        throw new Error("Missing the required parameter 'newIdentifier' when calling layerSetUniqueIdentifier");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
        'newIdentifier': newIdentifier,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/setUniqueIdentifier', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerUpdateLayer operation.
     * @callback module:api/LayerApi~layerUpdateLayerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:model/LayerUpdateParameter} parameters 
     * @param {module:api/LayerApi~layerUpdateLayerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerUpdateLayer = function(layerIdentifier, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling layerUpdateLayer");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling layerUpdateLayer");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the layerUpdateLayerFromZip operation.
     * @callback module:api/LayerApi~layerUpdateLayerFromZipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {File} file Upload file
     * @param {module:api/LayerApi~layerUpdateLayerFromZipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    this.layerUpdateLayerFromZip = function(layerIdentifier, file, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling layerUpdateLayerFromZip");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling layerUpdateLayerFromZip");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Layer;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/updateFromZip', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

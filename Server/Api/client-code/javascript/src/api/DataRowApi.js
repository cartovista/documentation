/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiCreateUpdateReport', 'model/ApiInsertReport', 'model/DataRow', 'model/DataRowCreateParameter', 'model/DataRowUpdateParameter', 'model/DataRowsGetParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiCreateUpdateReport'), require('../model/ApiInsertReport'), require('../model/DataRow'), require('../model/DataRowCreateParameter'), require('../model/DataRowUpdateParameter'), require('../model/DataRowsGetParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.DataRowApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.ApiCreateUpdateReport, root.CartoVistaserverapiv1.ApiInsertReport, root.CartoVistaserverapiv1.DataRow, root.CartoVistaserverapiv1.DataRowCreateParameter, root.CartoVistaserverapiv1.DataRowUpdateParameter, root.CartoVistaserverapiv1.DataRowsGetParameters);
  }
}(this, function(ApiClient, ApiCreateUpdateReport, ApiInsertReport, DataRow, DataRowCreateParameter, DataRowUpdateParameter, DataRowsGetParameters) {
  'use strict';

  /**
   * DataRow service.
   * @module api/DataRowApi
   * @version v1
   */

  /**
   * Constructs a new DataRowApi. 
   * @alias module:api/DataRowApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the dataRowCreateDataRows operation.
     * @callback module:api/DataRowApi~dataRowCreateDataRowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInsertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {Array.<module:model/DataRowCreateParameter>} param 
     * @param {module:api/DataRowApi~dataRowCreateDataRowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInsertReport}
     */
    this.dataRowCreateDataRows = function(dataTableIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowCreateDataRows");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling dataRowCreateDataRows");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiInsertReport;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/createDataRows', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataRowCreateUpdateDataRows operation.
     * @callback module:api/DataRowApi~dataRowCreateUpdateDataRowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCreateUpdateReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {Array.<module:model/DataRowCreateParameter>} param 
     * @param {module:api/DataRowApi~dataRowCreateUpdateDataRowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCreateUpdateReport}
     */
    this.dataRowCreateUpdateDataRows = function(dataTableIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowCreateUpdateDataRows");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling dataRowCreateUpdateDataRows");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiCreateUpdateReport;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/createUpdateDataRows', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataRowDeleteDatarow operation.
     * @callback module:api/DataRowApi~dataRowDeleteDatarowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {String} dataRowIdentifier 
     * @param {module:api/DataRowApi~dataRowDeleteDatarowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dataRowDeleteDatarow = function(dataTableIdentifier, dataRowIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowDeleteDatarow");
      }

      // verify the required parameter 'dataRowIdentifier' is set
      if (dataRowIdentifier === undefined || dataRowIdentifier === null) {
        throw new Error("Missing the required parameter 'dataRowIdentifier' when calling dataRowDeleteDatarow");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier,
        'dataRowIdentifier': dataRowIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataRowDeleteDatarows operation.
     * @callback module:api/DataRowApi~dataRowDeleteDatarowsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {Array.<module:model/String>} dataRowIdentifiers 
     * @param {module:api/DataRowApi~dataRowDeleteDatarowsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dataRowDeleteDatarows = function(dataTableIdentifier, dataRowIdentifiers, callback) {
      var postBody = dataRowIdentifiers;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowDeleteDatarows");
      }

      // verify the required parameter 'dataRowIdentifiers' is set
      if (dataRowIdentifiers === undefined || dataRowIdentifiers === null) {
        throw new Error("Missing the required parameter 'dataRowIdentifiers' when calling dataRowDeleteDatarows");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/DataRows', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataRowGetDataRow operation.
     * @callback module:api/DataRowApi~dataRowGetDataRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {String} dataRowIdentifier 
     * @param {module:api/DataRowApi~dataRowGetDataRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataRow}
     */
    this.dataRowGetDataRow = function(dataTableIdentifier, dataRowIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowGetDataRow");
      }

      // verify the required parameter 'dataRowIdentifier' is set
      if (dataRowIdentifier === undefined || dataRowIdentifier === null) {
        throw new Error("Missing the required parameter 'dataRowIdentifier' when calling dataRowGetDataRow");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier,
        'dataRowIdentifier': dataRowIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataRow;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataRowGetDataRows operation.
     * @callback module:api/DataRowApi~dataRowGetDataRowsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataRow>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {module:model/DataRowsGetParameters} param 
     * @param {module:api/DataRowApi~dataRowGetDataRowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataRow>}
     */
    this.dataRowGetDataRows = function(dataTableIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowGetDataRows");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling dataRowGetDataRows");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = [DataRow];

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/DataRows', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataRowUpdateDataRow operation.
     * @callback module:api/DataRowApi~dataRowUpdateDataRowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {String} dataRowIdentifier 
     * @param {module:model/DataRowUpdateParameter} param 
     * @param {module:api/DataRowApi~dataRowUpdateDataRowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataRow}
     */
    this.dataRowUpdateDataRow = function(dataTableIdentifier, dataRowIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataRowUpdateDataRow");
      }

      // verify the required parameter 'dataRowIdentifier' is set
      if (dataRowIdentifier === undefined || dataRowIdentifier === null) {
        throw new Error("Missing the required parameter 'dataRowIdentifier' when calling dataRowUpdateDataRow");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling dataRowUpdateDataRow");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier,
        'dataRowIdentifier': dataRowIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataRow;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/DataRow/{dataRowIdentifier}/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

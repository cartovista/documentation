/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataTable', 'model/DataTableCreateParameter', 'model/DataTableUpdateParameter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataTable'), require('../model/DataTableCreateParameter'), require('../model/DataTableUpdateParameter'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.DataTableApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.DataTable, root.CartoVistaserverapiv1.DataTableCreateParameter, root.CartoVistaserverapiv1.DataTableUpdateParameter);
  }
}(this, function(ApiClient, DataTable, DataTableCreateParameter, DataTableUpdateParameter) {
  'use strict';

  /**
   * DataTable service.
   * @module api/DataTableApi
   * @version v1
   */

  /**
   * Constructs a new DataTableApi. 
   * @alias module:api/DataTableApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the dataTableCreateDataTable operation.
     * @callback module:api/DataTableApi~dataTableCreateDataTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DataTableCreateParameter} parameters 
     * @param {module:api/DataTableApi~dataTableCreateDataTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableCreateDataTable = function(parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataTableCreateDataTable");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/createDataTable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableCreateFromCSV operation.
     * @callback module:api/DataTableApi~dataTableCreateFromCSVCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {File} file Upload file
     * @param {module:api/DataTableApi~dataTableCreateFromCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableCreateFromCSV = function(file, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling dataTableCreateFromCSV");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/createFromCSV', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableCreateFromExcel operation.
     * @callback module:api/DataTableApi~dataTableCreateFromExcelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {File} file Upload file
     * @param {module:api/DataTableApi~dataTableCreateFromExcelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableCreateFromExcel = function(file, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling dataTableCreateFromExcel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/createFromExcel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableCreateFromExcelSheetName operation.
     * @callback module:api/DataTableApi~dataTableCreateFromExcelSheetNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sheetName 
     * @param {File} file Upload file
     * @param {module:api/DataTableApi~dataTableCreateFromExcelSheetNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableCreateFromExcelSheetName = function(sheetName, file, callback) {
      var postBody = null;

      // verify the required parameter 'sheetName' is set
      if (sheetName === undefined || sheetName === null) {
        throw new Error("Missing the required parameter 'sheetName' when calling dataTableCreateFromExcelSheetName");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling dataTableCreateFromExcelSheetName");
      }


      var pathParams = {
        'sheetName': sheetName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/createFromExcel/{sheetName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableDeleteDataTable operation.
     * @callback module:api/DataTableApi~dataTableDeleteDataTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {module:api/DataTableApi~dataTableDeleteDataTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dataTableDeleteDataTable = function(dataTableIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableDeleteDataTable");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableGetDataTableByIdentifier operation.
     * @callback module:api/DataTableApi~dataTableGetDataTableByIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {module:api/DataTableApi~dataTableGetDataTableByIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableGetDataTableByIdentifier = function(dataTableIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableGetDataTableByIdentifier");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableGetDataTables operation.
     * @callback module:api/DataTableApi~dataTableGetDataTablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataTable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DataTableApi~dataTableGetDataTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataTable>}
     */
    this.dataTableGetDataTables = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [DataTable];

      return this.apiClient.callApi(
        '/api/v1/DataTables', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableSetDataColumnUniqueId operation.
     * @callback module:api/DataTableApi~dataTableSetDataColumnUniqueIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {String} dataColumnIdentifier 
     * @param {module:api/DataTableApi~dataTableSetDataColumnUniqueIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableSetDataColumnUniqueId = function(dataTableIdentifier, dataColumnIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableSetDataColumnUniqueId");
      }

      // verify the required parameter 'dataColumnIdentifier' is set
      if (dataColumnIdentifier === undefined || dataColumnIdentifier === null) {
        throw new Error("Missing the required parameter 'dataColumnIdentifier' when calling dataTableSetDataColumnUniqueId");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
        'dataColumnIdentifier': dataColumnIdentifier,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/setDataColumnUniqueId', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableSetUniqueIdentifier operation.
     * @callback module:api/DataTableApi~dataTableSetUniqueIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {String} newIdentifier 
     * @param {module:api/DataTableApi~dataTableSetUniqueIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableSetUniqueIdentifier = function(dataTableIdentifier, newIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableSetUniqueIdentifier");
      }

      // verify the required parameter 'newIdentifier' is set
      if (newIdentifier === undefined || newIdentifier === null) {
        throw new Error("Missing the required parameter 'newIdentifier' when calling dataTableSetUniqueIdentifier");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
        'newIdentifier': newIdentifier,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/setUniqueIdentifier', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableUpdateDataTable operation.
     * @callback module:api/DataTableApi~dataTableUpdateDataTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {module:model/DataTableUpdateParameter} parameters 
     * @param {module:api/DataTableApi~dataTableUpdateDataTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableUpdateDataTable = function(dataTableIdentifier, parameters, callback) {
      var postBody = parameters;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableUpdateDataTable");
      }

      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dataTableUpdateDataTable");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableUpdateFromCSV operation.
     * @callback module:api/DataTableApi~dataTableUpdateFromCSVCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {File} file Upload file
     * @param {module:api/DataTableApi~dataTableUpdateFromCSVCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableUpdateFromCSV = function(dataTableIdentifier, file, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableUpdateFromCSV");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling dataTableUpdateFromCSV");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/updateFromCSV', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableUpdateFromExcel operation.
     * @callback module:api/DataTableApi~dataTableUpdateFromExcelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {File} file Upload file
     * @param {module:api/DataTableApi~dataTableUpdateFromExcelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableUpdateFromExcel = function(dataTableIdentifier, file, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableUpdateFromExcel");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling dataTableUpdateFromExcel");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/updateFromExcel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dataTableUpdateFromExcelSheetName operation.
     * @callback module:api/DataTableApi~dataTableUpdateFromExcelSheetNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} dataTableIdentifier 
     * @param {String} sheetName 
     * @param {File} file Upload file
     * @param {module:api/DataTableApi~dataTableUpdateFromExcelSheetNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataTable}
     */
    this.dataTableUpdateFromExcelSheetName = function(dataTableIdentifier, sheetName, file, callback) {
      var postBody = null;

      // verify the required parameter 'dataTableIdentifier' is set
      if (dataTableIdentifier === undefined || dataTableIdentifier === null) {
        throw new Error("Missing the required parameter 'dataTableIdentifier' when calling dataTableUpdateFromExcelSheetName");
      }

      // verify the required parameter 'sheetName' is set
      if (sheetName === undefined || sheetName === null) {
        throw new Error("Missing the required parameter 'sheetName' when calling dataTableUpdateFromExcelSheetName");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling dataTableUpdateFromExcelSheetName");
      }


      var pathParams = {
        'dataTableIdentifier': dataTableIdentifier,
        'sheetName': sheetName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataTable;

      return this.apiClient.callApi(
        '/api/v1/DataTable/{dataTableIdentifier}/updateFromExcel/{sheetName}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

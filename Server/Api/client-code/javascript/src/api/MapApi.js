/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GridLayer', 'model/Layer', 'model/Map', 'model/MapCreateParameter', 'model/MapUpdateParameter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GridLayer'), require('../model/Layer'), require('../model/Map'), require('../model/MapCreateParameter'), require('../model/MapUpdateParameter'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.MapApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.GridLayer, root.CartoVistaserverapiv1.Layer, root.CartoVistaserverapiv1.Map, root.CartoVistaserverapiv1.MapCreateParameter, root.CartoVistaserverapiv1.MapUpdateParameter);
  }
}(this, function(ApiClient, GridLayer, Layer, Map, MapCreateParameter, MapUpdateParameter) {
  'use strict';

  /**
   * Map service.
   * @module api/MapApi
   * @version v1
   */

  /**
   * Constructs a new MapApi. 
   * @alias module:api/MapApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the mapCreateMap operation.
     * @callback module:api/MapApi~mapCreateMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a map based on the provided parameters.
     * @param {module:model/MapCreateParameter} param Parameters used to create the map.
     * @param {module:api/MapApi~mapCreateMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    this.mapCreateMap = function(param, callback) {
      var postBody = param;

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling mapCreateMap");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Map;

      return this.apiClient.callApi(
        '/api/v1/maps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapDeleteMap operation.
     * @callback module:api/MapApi~mapDeleteMapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a map by map id or a friendly identifier.
     * @param {String} mapId Map id or a friendly identifier.
     * @param {module:api/MapApi~mapDeleteMapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mapDeleteMap = function(mapId, callback) {
      var postBody = null;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapDeleteMap");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/maps/{mapId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapGetGridLayersByMap operation.
     * @callback module:api/MapApi~mapGetGridLayersByMapCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GridLayer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of grid layers used in a map.
     * @param {String} mapId Map id or a friendly identifier.
     * @param {module:api/MapApi~mapGetGridLayersByMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GridLayer>}
     */
    this.mapGetGridLayersByMap = function(mapId, callback) {
      var postBody = null;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapGetGridLayersByMap");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [GridLayer];

      return this.apiClient.callApi(
        '/api/v1/maps/{mapId}/gridLayers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapGetLayersByMap operation.
     * @callback module:api/MapApi~mapGetLayersByMapCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Layer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Layers used in a map.
     * @param {String} mapId Map id or a friendly identifier.
     * @param {module:api/MapApi~mapGetLayersByMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Layer>}
     */
    this.mapGetLayersByMap = function(mapId, callback) {
      var postBody = null;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapGetLayersByMap");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Layer];

      return this.apiClient.callApi(
        '/api/v1/maps/{mapId}/layers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapGetMap operation.
     * @callback module:api/MapApi~mapGetMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a map based on the map id or a friendly identifier.
     * @param {String} mapId Map id or a friendly identifier.
     * @param {module:api/MapApi~mapGetMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    this.mapGetMap = function(mapId, callback) {
      var postBody = null;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapGetMap");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Map;

      return this.apiClient.callApi(
        '/api/v1/maps/{mapId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapGetMaps operation.
     * @callback module:api/MapApi~mapGetMapsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Map>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all maps the requesting user has access to.
     * @param {module:api/MapApi~mapGetMapsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Map>}
     */
    this.mapGetMaps = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Map];

      return this.apiClient.callApi(
        '/api/v1/maps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapUpdateMap operation.
     * @callback module:api/MapApi~mapUpdateMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Map} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a map properties based on the given parameters.
     * @param {String} mapId Map id or a friendly identifier.
     * @param {module:model/MapUpdateParameter} param Parameters used to update the map.
     * @param {module:api/MapApi~mapUpdateMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Map}
     */
    this.mapUpdateMap = function(mapId, param, callback) {
      var postBody = param;

      // verify the required parameter 'mapId' is set
      if (mapId === undefined || mapId === null) {
        throw new Error("Missing the required parameter 'mapId' when calling mapUpdateMap");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling mapUpdateMap");
      }


      var pathParams = {
        'mapId': mapId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Map;

      return this.apiClient.callApi(
        '/api/v1/maps/{mapId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

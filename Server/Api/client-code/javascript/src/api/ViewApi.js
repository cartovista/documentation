/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateViewByExpressionParameters', 'model/UpdateViewParameter', 'model/View', 'model/ViewReadPermission'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateViewByExpressionParameters'), require('../model/UpdateViewParameter'), require('../model/View'), require('../model/ViewReadPermission'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.ViewApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.CreateViewByExpressionParameters, root.CartoVistaserverapiv1.UpdateViewParameter, root.CartoVistaserverapiv1.View, root.CartoVistaserverapiv1.ViewReadPermission);
  }
}(this, function(ApiClient, CreateViewByExpressionParameters, UpdateViewParameter, View, ViewReadPermission) {
  'use strict';

  /**
   * View service.
   * @module api/ViewApi
   * @version v1
   */

  /**
   * Constructs a new ViewApi. 
   * @alias module:api/ViewApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the viewCreateViewByExpression operation.
     * @callback module:api/ViewApi~viewCreateViewByExpressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a view based on an expression.
     * @param {String} layerId The layer system identifier.
     * @param {module:model/CreateViewByExpressionParameters} param The parameters to create the view.
     * @param {module:api/ViewApi~viewCreateViewByExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    this.viewCreateViewByExpression = function(layerId, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewCreateViewByExpression");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling viewCreateViewByExpression");
      }


      var pathParams = {
        'layerId': layerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = View;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views/createByExpression', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewCreateViewsFromColumn operation.
     * @callback module:api/ViewApi~viewCreateViewsFromColumnCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/View>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create views based on a layer column. This will generate one view for each unique value of the selected column.
     * @param {String} layerId The layer system identifier.
     * @param {String} columnId The column system identifier.
     * @param {module:api/ViewApi~viewCreateViewsFromColumnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/View>}
     */
    this.viewCreateViewsFromColumn = function(layerId, columnId, callback) {
      var postBody = columnId;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewCreateViewsFromColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling viewCreateViewsFromColumn");
      }


      var pathParams = {
        'layerId': layerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = [View];

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views/createByColumn', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewDeleteViews operation.
     * @callback module:api/ViewApi~viewDeleteViewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all the views associated with the layer.
     * @param {String} layerId The layer system identifier.
     * @param {module:api/ViewApi~viewDeleteViewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.viewDeleteViews = function(layerId, callback) {
      var postBody = null;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewDeleteViews");
      }


      var pathParams = {
        'layerId': layerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewGetView operation.
     * @callback module:api/ViewApi~viewGetViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific view by id.
     * @param {String} layerId The layer system identifier.
     * @param {String} viewId The view system identifier.
     * @param {module:api/ViewApi~viewGetViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    this.viewGetView = function(layerId, viewId, callback) {
      var postBody = null;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewGetView");
      }

      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling viewGetView");
      }


      var pathParams = {
        'layerId': layerId,
        'viewId': viewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = View;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views/{viewId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewGetViews operation.
     * @callback module:api/ViewApi~viewGetViewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/View>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of views associated with a layer.
     * @param {String} layerId The layer system identifier.
     * @param {module:api/ViewApi~viewGetViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/View>}
     */
    this.viewGetViews = function(layerId, callback) {
      var postBody = null;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewGetViews");
      }


      var pathParams = {
        'layerId': layerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [View];

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewUpdateView operation.
     * @callback module:api/ViewApi~viewUpdateViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the view parameters.
     * @param {String} layerId The layer system identifier.
     * @param {String} viewId The view system identifier.
     * @param {module:model/UpdateViewParameter} param The parameters to update.
     * @param {module:api/ViewApi~viewUpdateViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    this.viewUpdateView = function(layerId, viewId, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewUpdateView");
      }

      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling viewUpdateView");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling viewUpdateView");
      }


      var pathParams = {
        'layerId': layerId,
        'viewId': viewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = View;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views/{viewId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the viewUpdateViewPermissions operation.
     * @callback module:api/ViewApi~viewUpdateViewPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/View} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the view permissions.  Note: We need to list all the permissions on the view as the missing permissions will be deleted.
     * @param {String} layerId The layer system identifier.
     * @param {String} viewId The view system identifier.
     * @param {Array.<module:model/ViewReadPermission>} permissions The list of permissions to assign to the view.
     * @param {module:api/ViewApi~viewUpdateViewPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/View}
     */
    this.viewUpdateViewPermissions = function(layerId, viewId, permissions, callback) {
      var postBody = permissions;

      // verify the required parameter 'layerId' is set
      if (layerId === undefined || layerId === null) {
        throw new Error("Missing the required parameter 'layerId' when calling viewUpdateViewPermissions");
      }

      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling viewUpdateViewPermissions");
      }

      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling viewUpdateViewPermissions");
      }


      var pathParams = {
        'layerId': layerId,
        'viewId': viewId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = View;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerId}/views/{viewId}/permissions', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

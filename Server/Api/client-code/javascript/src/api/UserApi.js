/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/User', 'model/UserCreateParameter', 'model/UserUpdateParameter'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/User'), require('../model/UserCreateParameter'), require('../model/UserUpdateParameter'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.UserApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.User, root.CartoVistaserverapiv1.UserCreateParameter, root.CartoVistaserverapiv1.UserUpdateParameter);
  }
}(this, function(ApiClient, User, UserCreateParameter, UserUpdateParameter) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version v1
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the userCreateUser operation.
     * @callback module:api/UserApi~userCreateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserCreateParameter} param 
     * @param {module:api/UserApi~userCreateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.userCreateUser = function(param, callback) {
      var postBody = param;

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling userCreateUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/User/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userDeleteUser operation.
     * @callback module:api/UserApi~userDeleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userIdentifier 
     * @param {module:api/UserApi~userDeleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.userDeleteUser = function(userIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'userIdentifier' is set
      if (userIdentifier === undefined || userIdentifier === null) {
        throw new Error("Missing the required parameter 'userIdentifier' when calling userDeleteUser");
      }


      var pathParams = {
        'UserIdentifier': userIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/User/{UserIdentifier}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetUser operation.
     * @callback module:api/UserApi~userGetUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userIdentifier 
     * @param {module:api/UserApi~userGetUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.userGetUser = function(userIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'userIdentifier' is set
      if (userIdentifier === undefined || userIdentifier === null) {
        throw new Error("Missing the required parameter 'userIdentifier' when calling userGetUser");
      }


      var pathParams = {
        'UserIdentifier': userIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/User/{UserIdentifier}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userGetUsers operation.
     * @callback module:api/UserApi~userGetUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserApi~userGetUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.userGetUsers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/api/v1/Users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userUpdateUser operation.
     * @callback module:api/UserApi~userUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userIdentifier 
     * @param {module:model/UserUpdateParameter} param 
     * @param {module:api/UserApi~userUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.userUpdateUser = function(userIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'userIdentifier' is set
      if (userIdentifier === undefined || userIdentifier === null) {
        throw new Error("Missing the required parameter 'userIdentifier' when calling userUpdateUser");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling userUpdateUser");
      }


      var pathParams = {
        'UserIdentifier': userIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/v1/User/{UserIdentifier}/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiCreateUpdateReport', 'model/ApiDeleteReport', 'model/ApiInsertReport', 'model/DataRow', 'model/DataRowUpdateParameter', 'model/FeatureGeoJSON', 'model/FeatureGeoJSONCreateParameter', 'model/FeatureGeoJSONUpdateParameter', 'model/FeatureLongLat', 'model/FeatureLongLatCreateParameter', 'model/FeatureLongLatUpdateParameter', 'model/FeatureWKT', 'model/FeatureWKTCreateParameter', 'model/FeatureWKTUpdateParameter', 'model/FeaturesGetParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiCreateUpdateReport'), require('../model/ApiDeleteReport'), require('../model/ApiInsertReport'), require('../model/DataRow'), require('../model/DataRowUpdateParameter'), require('../model/FeatureGeoJSON'), require('../model/FeatureGeoJSONCreateParameter'), require('../model/FeatureGeoJSONUpdateParameter'), require('../model/FeatureLongLat'), require('../model/FeatureLongLatCreateParameter'), require('../model/FeatureLongLatUpdateParameter'), require('../model/FeatureWKT'), require('../model/FeatureWKTCreateParameter'), require('../model/FeatureWKTUpdateParameter'), require('../model/FeaturesGetParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.FeatureApi = factory(root.CartoVistaserverapiv1.ApiClient, root.CartoVistaserverapiv1.ApiCreateUpdateReport, root.CartoVistaserverapiv1.ApiDeleteReport, root.CartoVistaserverapiv1.ApiInsertReport, root.CartoVistaserverapiv1.DataRow, root.CartoVistaserverapiv1.DataRowUpdateParameter, root.CartoVistaserverapiv1.FeatureGeoJSON, root.CartoVistaserverapiv1.FeatureGeoJSONCreateParameter, root.CartoVistaserverapiv1.FeatureGeoJSONUpdateParameter, root.CartoVistaserverapiv1.FeatureLongLat, root.CartoVistaserverapiv1.FeatureLongLatCreateParameter, root.CartoVistaserverapiv1.FeatureLongLatUpdateParameter, root.CartoVistaserverapiv1.FeatureWKT, root.CartoVistaserverapiv1.FeatureWKTCreateParameter, root.CartoVistaserverapiv1.FeatureWKTUpdateParameter, root.CartoVistaserverapiv1.FeaturesGetParameters);
  }
}(this, function(ApiClient, ApiCreateUpdateReport, ApiDeleteReport, ApiInsertReport, DataRow, DataRowUpdateParameter, FeatureGeoJSON, FeatureGeoJSONCreateParameter, FeatureGeoJSONUpdateParameter, FeatureLongLat, FeatureLongLatCreateParameter, FeatureLongLatUpdateParameter, FeatureWKT, FeatureWKTCreateParameter, FeatureWKTUpdateParameter, FeaturesGetParameters) {
  'use strict';

  /**
   * Feature service.
   * @module api/FeatureApi
   * @version v1
   */

  /**
   * Constructs a new FeatureApi. 
   * @alias module:api/FeatureApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the featureCreateFeaturesFromGeoJSON operation.
     * @callback module:api/FeatureApi~featureCreateFeaturesFromGeoJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInsertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/FeatureGeoJSONCreateParameter>} param 
     * @param {module:api/FeatureApi~featureCreateFeaturesFromGeoJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInsertReport}
     */
    this.featureCreateFeaturesFromGeoJSON = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureCreateFeaturesFromGeoJSON");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureCreateFeaturesFromGeoJSON");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiInsertReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/createFromGeoJSON', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureCreateFeaturesFromLongLat operation.
     * @callback module:api/FeatureApi~featureCreateFeaturesFromLongLatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInsertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/FeatureLongLatCreateParameter>} param 
     * @param {module:api/FeatureApi~featureCreateFeaturesFromLongLatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInsertReport}
     */
    this.featureCreateFeaturesFromLongLat = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureCreateFeaturesFromLongLat");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureCreateFeaturesFromLongLat");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiInsertReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/createFromLongLat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureCreateFeaturesFromWKT operation.
     * @callback module:api/FeatureApi~featureCreateFeaturesFromWKTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInsertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/FeatureWKTCreateParameter>} param 
     * @param {module:api/FeatureApi~featureCreateFeaturesFromWKTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInsertReport}
     */
    this.featureCreateFeaturesFromWKT = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureCreateFeaturesFromWKT");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureCreateFeaturesFromWKT");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiInsertReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/createFromWKT', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureCreateUpdateFeaturesFromGeoJSON operation.
     * @callback module:api/FeatureApi~featureCreateUpdateFeaturesFromGeoJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInsertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/FeatureGeoJSONCreateParameter>} param 
     * @param {module:api/FeatureApi~featureCreateUpdateFeaturesFromGeoJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInsertReport}
     */
    this.featureCreateUpdateFeaturesFromGeoJSON = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureCreateUpdateFeaturesFromGeoJSON");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureCreateUpdateFeaturesFromGeoJSON");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiInsertReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromGeoJSON', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureCreateUpdateFeaturesFromLongLat operation.
     * @callback module:api/FeatureApi~featureCreateUpdateFeaturesFromLongLatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInsertReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/FeatureLongLatCreateParameter>} param 
     * @param {module:api/FeatureApi~featureCreateUpdateFeaturesFromLongLatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInsertReport}
     */
    this.featureCreateUpdateFeaturesFromLongLat = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureCreateUpdateFeaturesFromLongLat");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureCreateUpdateFeaturesFromLongLat");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiInsertReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromLongLat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureCreateUpdateFeaturesFromWKT operation.
     * @callback module:api/FeatureApi~featureCreateUpdateFeaturesFromWKTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCreateUpdateReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/FeatureWKTCreateParameter>} param 
     * @param {module:api/FeatureApi~featureCreateUpdateFeaturesFromWKTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCreateUpdateReport}
     */
    this.featureCreateUpdateFeaturesFromWKT = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureCreateUpdateFeaturesFromWKT");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureCreateUpdateFeaturesFromWKT");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiCreateUpdateReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromWKT', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureDeleteFeature operation.
     * @callback module:api/FeatureApi~featureDeleteFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeleteReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:api/FeatureApi~featureDeleteFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeleteReport}
     */
    this.featureDeleteFeature = function(layerIdentifier, featureIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureDeleteFeature");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureDeleteFeature");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiDeleteReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureDeleteFeatures operation.
     * @callback module:api/FeatureApi~featureDeleteFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDeleteReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {Array.<module:model/String>} featureIdentifiers 
     * @param {module:api/FeatureApi~featureDeleteFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDeleteReport}
     */
    this.featureDeleteFeatures = function(layerIdentifier, featureIdentifiers, callback) {
      var postBody = featureIdentifiers;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureDeleteFeatures");
      }

      // verify the required parameter 'featureIdentifiers' is set
      if (featureIdentifiers === undefined || featureIdentifiers === null) {
        throw new Error("Missing the required parameter 'featureIdentifiers' when calling featureDeleteFeatures");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApiDeleteReport;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeatureInGeoJSON operation.
     * @callback module:api/FeatureApi~featureGetFeatureInGeoJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureGeoJSON} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:api/FeatureApi~featureGetFeatureInGeoJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureGeoJSON}
     */
    this.featureGetFeatureInGeoJSON = function(layerIdentifier, featureIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeatureInGeoJSON");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureGetFeatureInGeoJSON");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = FeatureGeoJSON;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/GeoJSON', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeatureInLongLat operation.
     * @callback module:api/FeatureApi~featureGetFeatureInLongLatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureLongLat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:api/FeatureApi~featureGetFeatureInLongLatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureLongLat}
     */
    this.featureGetFeatureInLongLat = function(layerIdentifier, featureIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeatureInLongLat");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureGetFeatureInLongLat");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = FeatureLongLat;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/LongLat', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeatureInWKT operation.
     * @callback module:api/FeatureApi~featureGetFeatureInWKTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureWKT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:api/FeatureApi~featureGetFeatureInWKTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureWKT}
     */
    this.featureGetFeatureInWKT = function(layerIdentifier, featureIdentifier, callback) {
      var postBody = null;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeatureInWKT");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureGetFeatureInWKT");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = FeatureWKT;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/WKT', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeatures operation.
     * @callback module:api/FeatureApi~featureGetFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataRow>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:model/FeaturesGetParameters} param 
     * @param {module:api/FeatureApi~featureGetFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataRow>}
     */
    this.featureGetFeatures = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeatures");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureGetFeatures");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = [DataRow];

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeaturesInGeoJSON operation.
     * @callback module:api/FeatureApi~featureGetFeaturesInGeoJSONCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeatureGeoJSON>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:model/FeaturesGetParameters} param 
     * @param {module:api/FeatureApi~featureGetFeaturesInGeoJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeatureGeoJSON>}
     */
    this.featureGetFeaturesInGeoJSON = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeaturesInGeoJSON");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureGetFeaturesInGeoJSON");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = [FeatureGeoJSON];

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/GeoJSON', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeaturesInLongLat operation.
     * @callback module:api/FeatureApi~featureGetFeaturesInLongLatCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeatureLongLat>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:model/FeaturesGetParameters} param 
     * @param {module:api/FeatureApi~featureGetFeaturesInLongLatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeatureLongLat>}
     */
    this.featureGetFeaturesInLongLat = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeaturesInLongLat");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureGetFeaturesInLongLat");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = [FeatureLongLat];

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/LongLat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureGetFeaturesInWKT operation.
     * @callback module:api/FeatureApi~featureGetFeaturesInWKTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FeatureWKT>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {module:model/FeaturesGetParameters} param 
     * @param {module:api/FeatureApi~featureGetFeaturesInWKTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FeatureWKT>}
     */
    this.featureGetFeaturesInWKT = function(layerIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureGetFeaturesInWKT");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureGetFeaturesInWKT");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = [FeatureWKT];

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Features/WKT', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureUpdateFromGeoJSON operation.
     * @callback module:api/FeatureApi~featureUpdateFromGeoJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureGeoJSON} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:model/FeatureGeoJSONUpdateParameter} param 
     * @param {module:api/FeatureApi~featureUpdateFromGeoJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureGeoJSON}
     */
    this.featureUpdateFromGeoJSON = function(layerIdentifier, featureIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureUpdateFromGeoJSON");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureUpdateFromGeoJSON");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureUpdateFromGeoJSON");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = FeatureGeoJSON;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromGeoJSON', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureUpdateFromLongLat operation.
     * @callback module:api/FeatureApi~featureUpdateFromLongLatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureLongLat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:model/FeatureLongLatUpdateParameter} param 
     * @param {module:api/FeatureApi~featureUpdateFromLongLatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureLongLat}
     */
    this.featureUpdateFromLongLat = function(layerIdentifier, featureIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureUpdateFromLongLat");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureUpdateFromLongLat");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureUpdateFromLongLat");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = FeatureLongLat;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromLongLat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureUpdateGeometryFromWKT operation.
     * @callback module:api/FeatureApi~featureUpdateGeometryFromWKTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureWKT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:model/FeatureWKTUpdateParameter} param 
     * @param {module:api/FeatureApi~featureUpdateGeometryFromWKTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureWKT}
     */
    this.featureUpdateGeometryFromWKT = function(layerIdentifier, featureIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureUpdateGeometryFromWKT");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureUpdateGeometryFromWKT");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureUpdateGeometryFromWKT");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = FeatureWKT;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateGeometryFromWKT', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the featureUpdateValues operation.
     * @callback module:api/FeatureApi~featureUpdateValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} layerIdentifier 
     * @param {String} featureIdentifier 
     * @param {module:model/DataRowUpdateParameter} param 
     * @param {module:api/FeatureApi~featureUpdateValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataRow}
     */
    this.featureUpdateValues = function(layerIdentifier, featureIdentifier, param, callback) {
      var postBody = param;

      // verify the required parameter 'layerIdentifier' is set
      if (layerIdentifier === undefined || layerIdentifier === null) {
        throw new Error("Missing the required parameter 'layerIdentifier' when calling featureUpdateValues");
      }

      // verify the required parameter 'featureIdentifier' is set
      if (featureIdentifier === undefined || featureIdentifier === null) {
        throw new Error("Missing the required parameter 'featureIdentifier' when calling featureUpdateValues");
      }

      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling featureUpdateValues");
      }


      var pathParams = {
        'layerIdentifier': layerIdentifier,
        'featureIdentifier': featureIdentifier
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = DataRow;

      return this.apiClient.callApi(
        '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateValues', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

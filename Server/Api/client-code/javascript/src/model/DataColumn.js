/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.DataColumn = factory(root.CartoVistaserverapiv1.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The DataColumn model module.
   * @module model/DataColumn
   * @version v1
   */

  /**
   * Constructs a new <code>DataColumn</code>.
   * @alias module:model/DataColumn
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>DataColumn</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DataColumn} obj Optional instance to populate.
   * @return {module:model/DataColumn} The populated <code>DataColumn</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('SystemIdentifier'))
        obj.systemIdentifier = ApiClient.convertToType(data['SystemIdentifier'], 'String');
      if (data.hasOwnProperty('UniqueIdentifier'))
        obj.uniqueIdentifier = ApiClient.convertToType(data['UniqueIdentifier'], 'String');
      if (data.hasOwnProperty('DataTableIdentifier'))
        obj.dataTableIdentifier = ApiClient.convertToType(data['DataTableIdentifier'], 'String');
      if (data.hasOwnProperty('CartoVistaDataType'))
        obj.cartoVistaDataType = ApiClient.convertToType(data['CartoVistaDataType'], 'String');
      if (data.hasOwnProperty('Name'))
        obj.name = ApiClient.convertToType(data['Name'], 'String');
      if (data.hasOwnProperty('Description'))
        obj.description = ApiClient.convertToType(data['Description'], 'String');
      if (data.hasOwnProperty('Metadata'))
        obj.metadata = ApiClient.convertToType(data['Metadata'], 'String');
      if (data.hasOwnProperty('Units'))
        obj.units = ApiClient.convertToType(data['Units'], 'String');
      if (data.hasOwnProperty('AggregationType'))
        obj.aggregationType = ApiClient.convertToType(data['AggregationType'], 'String');
      if (data.hasOwnProperty('Mappable'))
        obj.mappable = ApiClient.convertToType(data['Mappable'], 'Boolean');
      if (data.hasOwnProperty('Precision'))
        obj.precision = ApiClient.convertToType(data['Precision'], 'Number');
      if (data.hasOwnProperty('RoundToPrecision'))
        obj.roundToPrecision = ApiClient.convertToType(data['RoundToPrecision'], 'Boolean');
      if (data.hasOwnProperty('TimeStamp'))
        obj.timeStamp = ApiClient.convertToType(data['TimeStamp'], Object);
      if (data.hasOwnProperty('TimeStampAccuracy'))
        obj.timeStampAccuracy = ApiClient.convertToType(data['TimeStampAccuracy'], Object);
      if (data.hasOwnProperty('NotAvailableValues'))
        obj.notAvailableValues = ApiClient.convertToType(data['NotAvailableValues'], 'Boolean');
      if (data.hasOwnProperty('ValueToConvert'))
        obj.valueToConvert = ApiClient.convertToType(data['ValueToConvert'], 'Number');
    }
    return obj;
  }

  /**
   * @member {String} systemIdentifier
   */
  exports.prototype.systemIdentifier = undefined;

  /**
   * @member {String} uniqueIdentifier
   */
  exports.prototype.uniqueIdentifier = undefined;

  /**
   * @member {String} dataTableIdentifier
   */
  exports.prototype.dataTableIdentifier = undefined;

  /**
   * @member {String} cartoVistaDataType
   */
  exports.prototype.cartoVistaDataType = undefined;

  /**
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * @member {String} metadata
   */
  exports.prototype.metadata = undefined;

  /**
   * @member {String} units
   */
  exports.prototype.units = undefined;

  /**
   * @member {String} aggregationType
   */
  exports.prototype.aggregationType = undefined;

  /**
   * @member {Boolean} mappable
   */
  exports.prototype.mappable = undefined;

  /**
   * @member {Number} precision
   */
  exports.prototype.precision = undefined;

  /**
   * @member {Boolean} roundToPrecision
   */
  exports.prototype.roundToPrecision = undefined;

  /**
   * @member {Object} timeStamp
   */
  exports.prototype.timeStamp = undefined;

  /**
   * @member {Object} timeStampAccuracy
   */
  exports.prototype.timeStampAccuracy = undefined;

  /**
   * @member {Boolean} notAvailableValues
   */
  exports.prototype.notAvailableValues = undefined;

  /**
   * @member {Number} valueToConvert
   */
  exports.prototype.valueToConvert = undefined;

  return exports;

}));

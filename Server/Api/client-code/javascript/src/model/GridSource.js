/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CartoVistaserverapiv1) {
      root.CartoVistaserverapiv1 = {};
    }
    root.CartoVistaserverapiv1.GridSource = factory(root.CartoVistaserverapiv1.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The GridSource model module.
   * @module model/GridSource
   * @version v1
   */

  /**
   * Constructs a new <code>GridSource</code>.
   * @alias module:model/GridSource
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>GridSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GridSource} obj Optional instance to populate.
   * @return {module:model/GridSource} The populated <code>GridSource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('gridLayerId'))
        obj.gridLayerId = ApiClient.convertToType(data['gridLayerId'], 'String');
      if (data.hasOwnProperty('uniqueIdentifier'))
        obj.uniqueIdentifier = ApiClient.convertToType(data['uniqueIdentifier'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('fileMetadata'))
        obj.fileMetadata = ApiClient.convertToType(data['fileMetadata'], 'String');
      if (data.hasOwnProperty('bandMetadata'))
        obj.bandMetadata = ApiClient.convertToType(data['bandMetadata'], 'String');
      if (data.hasOwnProperty('band'))
        obj.band = ApiClient.convertToType(data['band'], 'Number');
      if (data.hasOwnProperty('creationTime'))
        obj.creationTime = ApiClient.convertToType(data['creationTime'], 'Date');
      if (data.hasOwnProperty('modifiedTime'))
        obj.modifiedTime = ApiClient.convertToType(data['modifiedTime'], 'Date');
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Date');
      if (data.hasOwnProperty('noDataEnabled'))
        obj.noDataEnabled = ApiClient.convertToType(data['noDataEnabled'], 'Boolean');
      if (data.hasOwnProperty('noDataValue'))
        obj.noDataValue = ApiClient.convertToType(data['noDataValue'], 'String');
      if (data.hasOwnProperty('minValue'))
        obj.minValue = ApiClient.convertToType(data['minValue'], 'Number');
      if (data.hasOwnProperty('maxValue'))
        obj.maxValue = ApiClient.convertToType(data['maxValue'], 'Number');
    }
    return obj;
  }

  /**
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {String} gridLayerId
   */
  exports.prototype.gridLayerId = undefined;

  /**
   * @member {String} uniqueIdentifier
   */
  exports.prototype.uniqueIdentifier = undefined;

  /**
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * @member {String} fileMetadata
   */
  exports.prototype.fileMetadata = undefined;

  /**
   * @member {String} bandMetadata
   */
  exports.prototype.bandMetadata = undefined;

  /**
   * @member {Number} band
   */
  exports.prototype.band = undefined;

  /**
   * @member {Date} creationTime
   */
  exports.prototype.creationTime = undefined;

  /**
   * @member {Date} modifiedTime
   */
  exports.prototype.modifiedTime = undefined;

  /**
   * @member {Date} timestamp
   */
  exports.prototype.timestamp = undefined;

  /**
   * @member {Boolean} noDataEnabled
   */
  exports.prototype.noDataEnabled = undefined;

  /**
   * @member {String} noDataValue
   */
  exports.prototype.noDataValue = undefined;

  /**
   * @member {Number} minValue
   */
  exports.prototype.minValue = undefined;

  /**
   * @member {Number} maxValue
   */
  exports.prototype.maxValue = undefined;

  return exports;

}));

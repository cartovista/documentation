/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiCreateUpdateReport', 'model/ApiDeleteReport', 'model/ApiInsertReport', 'model/BoundingBox', 'model/ClusterMetadataDTO', 'model/CreateViewByExpressionParameters', 'model/DataColumn', 'model/DataColumnCreateParameter', 'model/DataColumnUpdateParameter', 'model/DataColumnUpdateParameterExtended', 'model/DataRow', 'model/DataRowCreateParameter', 'model/DataRowUpdateParameter', 'model/DataRowsGetParameters', 'model/DataTable', 'model/DataTableCreateParameter', 'model/DataTableUpdateParameter', 'model/ErrorDetail', 'model/ExportDataParameter', 'model/Extent', 'model/FeatureGeoJSON', 'model/FeatureGeoJSONCreateParameter', 'model/FeatureGeoJSONUpdateParameter', 'model/FeatureLongLat', 'model/FeatureLongLatCreateParameter', 'model/FeatureLongLatUpdateParameter', 'model/FeatureWKT', 'model/FeatureWKTCreateParameter', 'model/FeatureWKTUpdateParameter', 'model/FeaturesGetParameters', 'model/GeocodedLocation', 'model/GridLayer', 'model/GridLayerCreateParameters', 'model/GridLayerUpdateParameters', 'model/GridSource', 'model/GridSourceRenderParameter', 'model/GridSourceRenderStyleParameter', 'model/GridSourceUpdateParameters', 'model/Isochrone', 'model/IsochroneParams', 'model/KeywordDTO', 'model/Layer', 'model/LayerCreateParameter', 'model/LayerUpdateParameter', 'model/Map', 'model/MapCreateParameter', 'model/MapDTO', 'model/MapUpdateParameter', 'model/PermissionPairComplexDTO', 'model/PermissionPairDTO', 'model/ReverseGeocodeParams', 'model/RouteParams', 'model/RouteSummary', 'model/SecurityIdentityDTO', 'model/SpatialMetadataDTO', 'model/UpdateViewParameter', 'model/User', 'model/UserCreateParameter', 'model/UserUpdateParameter', 'model/View', 'model/ViewReadPermission', 'api/ApiKeyApi', 'api/DataColumnApi', 'api/DataRowApi', 'api/DataTableApi', 'api/FeatureApi', 'api/GridLayerApi', 'api/LayerApi', 'api/LocationApi', 'api/MapApi', 'api/UserApi', 'api/ViewApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ApiCreateUpdateReport'), require('./model/ApiDeleteReport'), require('./model/ApiInsertReport'), require('./model/BoundingBox'), require('./model/ClusterMetadataDTO'), require('./model/CreateViewByExpressionParameters'), require('./model/DataColumn'), require('./model/DataColumnCreateParameter'), require('./model/DataColumnUpdateParameter'), require('./model/DataColumnUpdateParameterExtended'), require('./model/DataRow'), require('./model/DataRowCreateParameter'), require('./model/DataRowUpdateParameter'), require('./model/DataRowsGetParameters'), require('./model/DataTable'), require('./model/DataTableCreateParameter'), require('./model/DataTableUpdateParameter'), require('./model/ErrorDetail'), require('./model/ExportDataParameter'), require('./model/Extent'), require('./model/FeatureGeoJSON'), require('./model/FeatureGeoJSONCreateParameter'), require('./model/FeatureGeoJSONUpdateParameter'), require('./model/FeatureLongLat'), require('./model/FeatureLongLatCreateParameter'), require('./model/FeatureLongLatUpdateParameter'), require('./model/FeatureWKT'), require('./model/FeatureWKTCreateParameter'), require('./model/FeatureWKTUpdateParameter'), require('./model/FeaturesGetParameters'), require('./model/GeocodedLocation'), require('./model/GridLayer'), require('./model/GridLayerCreateParameters'), require('./model/GridLayerUpdateParameters'), require('./model/GridSource'), require('./model/GridSourceRenderParameter'), require('./model/GridSourceRenderStyleParameter'), require('./model/GridSourceUpdateParameters'), require('./model/Isochrone'), require('./model/IsochroneParams'), require('./model/KeywordDTO'), require('./model/Layer'), require('./model/LayerCreateParameter'), require('./model/LayerUpdateParameter'), require('./model/Map'), require('./model/MapCreateParameter'), require('./model/MapDTO'), require('./model/MapUpdateParameter'), require('./model/PermissionPairComplexDTO'), require('./model/PermissionPairDTO'), require('./model/ReverseGeocodeParams'), require('./model/RouteParams'), require('./model/RouteSummary'), require('./model/SecurityIdentityDTO'), require('./model/SpatialMetadataDTO'), require('./model/UpdateViewParameter'), require('./model/User'), require('./model/UserCreateParameter'), require('./model/UserUpdateParameter'), require('./model/View'), require('./model/ViewReadPermission'), require('./api/ApiKeyApi'), require('./api/DataColumnApi'), require('./api/DataRowApi'), require('./api/DataTableApi'), require('./api/FeatureApi'), require('./api/GridLayerApi'), require('./api/LayerApi'), require('./api/LocationApi'), require('./api/MapApi'), require('./api/UserApi'), require('./api/ViewApi'));
  }
}(function(ApiClient, ApiCreateUpdateReport, ApiDeleteReport, ApiInsertReport, BoundingBox, ClusterMetadataDTO, CreateViewByExpressionParameters, DataColumn, DataColumnCreateParameter, DataColumnUpdateParameter, DataColumnUpdateParameterExtended, DataRow, DataRowCreateParameter, DataRowUpdateParameter, DataRowsGetParameters, DataTable, DataTableCreateParameter, DataTableUpdateParameter, ErrorDetail, ExportDataParameter, Extent, FeatureGeoJSON, FeatureGeoJSONCreateParameter, FeatureGeoJSONUpdateParameter, FeatureLongLat, FeatureLongLatCreateParameter, FeatureLongLatUpdateParameter, FeatureWKT, FeatureWKTCreateParameter, FeatureWKTUpdateParameter, FeaturesGetParameters, GeocodedLocation, GridLayer, GridLayerCreateParameters, GridLayerUpdateParameters, GridSource, GridSourceRenderParameter, GridSourceRenderStyleParameter, GridSourceUpdateParameters, Isochrone, IsochroneParams, KeywordDTO, Layer, LayerCreateParameter, LayerUpdateParameter, Map, MapCreateParameter, MapDTO, MapUpdateParameter, PermissionPairComplexDTO, PermissionPairDTO, ReverseGeocodeParams, RouteParams, RouteSummary, SecurityIdentityDTO, SpatialMetadataDTO, UpdateViewParameter, User, UserCreateParameter, UserUpdateParameter, View, ViewReadPermission, ApiKeyApi, DataColumnApi, DataRowApi, DataTableApi, FeatureApi, GridLayerApi, LayerApi, LocationApi, MapApi, UserApi, ViewApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var CartoVistaserverapiv1 = require('index'); // See note below*.
   * var xxxSvc = new CartoVistaserverapiv1.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new CartoVistaserverapiv1.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new CartoVistaserverapiv1.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new CartoVistaserverapiv1.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ApiCreateUpdateReport model constructor.
     * @property {module:model/ApiCreateUpdateReport}
     */
    ApiCreateUpdateReport: ApiCreateUpdateReport,
    /**
     * The ApiDeleteReport model constructor.
     * @property {module:model/ApiDeleteReport}
     */
    ApiDeleteReport: ApiDeleteReport,
    /**
     * The ApiInsertReport model constructor.
     * @property {module:model/ApiInsertReport}
     */
    ApiInsertReport: ApiInsertReport,
    /**
     * The BoundingBox model constructor.
     * @property {module:model/BoundingBox}
     */
    BoundingBox: BoundingBox,
    /**
     * The ClusterMetadataDTO model constructor.
     * @property {module:model/ClusterMetadataDTO}
     */
    ClusterMetadataDTO: ClusterMetadataDTO,
    /**
     * The CreateViewByExpressionParameters model constructor.
     * @property {module:model/CreateViewByExpressionParameters}
     */
    CreateViewByExpressionParameters: CreateViewByExpressionParameters,
    /**
     * The DataColumn model constructor.
     * @property {module:model/DataColumn}
     */
    DataColumn: DataColumn,
    /**
     * The DataColumnCreateParameter model constructor.
     * @property {module:model/DataColumnCreateParameter}
     */
    DataColumnCreateParameter: DataColumnCreateParameter,
    /**
     * The DataColumnUpdateParameter model constructor.
     * @property {module:model/DataColumnUpdateParameter}
     */
    DataColumnUpdateParameter: DataColumnUpdateParameter,
    /**
     * The DataColumnUpdateParameterExtended model constructor.
     * @property {module:model/DataColumnUpdateParameterExtended}
     */
    DataColumnUpdateParameterExtended: DataColumnUpdateParameterExtended,
    /**
     * The DataRow model constructor.
     * @property {module:model/DataRow}
     */
    DataRow: DataRow,
    /**
     * The DataRowCreateParameter model constructor.
     * @property {module:model/DataRowCreateParameter}
     */
    DataRowCreateParameter: DataRowCreateParameter,
    /**
     * The DataRowUpdateParameter model constructor.
     * @property {module:model/DataRowUpdateParameter}
     */
    DataRowUpdateParameter: DataRowUpdateParameter,
    /**
     * The DataRowsGetParameters model constructor.
     * @property {module:model/DataRowsGetParameters}
     */
    DataRowsGetParameters: DataRowsGetParameters,
    /**
     * The DataTable model constructor.
     * @property {module:model/DataTable}
     */
    DataTable: DataTable,
    /**
     * The DataTableCreateParameter model constructor.
     * @property {module:model/DataTableCreateParameter}
     */
    DataTableCreateParameter: DataTableCreateParameter,
    /**
     * The DataTableUpdateParameter model constructor.
     * @property {module:model/DataTableUpdateParameter}
     */
    DataTableUpdateParameter: DataTableUpdateParameter,
    /**
     * The ErrorDetail model constructor.
     * @property {module:model/ErrorDetail}
     */
    ErrorDetail: ErrorDetail,
    /**
     * The ExportDataParameter model constructor.
     * @property {module:model/ExportDataParameter}
     */
    ExportDataParameter: ExportDataParameter,
    /**
     * The Extent model constructor.
     * @property {module:model/Extent}
     */
    Extent: Extent,
    /**
     * The FeatureGeoJSON model constructor.
     * @property {module:model/FeatureGeoJSON}
     */
    FeatureGeoJSON: FeatureGeoJSON,
    /**
     * The FeatureGeoJSONCreateParameter model constructor.
     * @property {module:model/FeatureGeoJSONCreateParameter}
     */
    FeatureGeoJSONCreateParameter: FeatureGeoJSONCreateParameter,
    /**
     * The FeatureGeoJSONUpdateParameter model constructor.
     * @property {module:model/FeatureGeoJSONUpdateParameter}
     */
    FeatureGeoJSONUpdateParameter: FeatureGeoJSONUpdateParameter,
    /**
     * The FeatureLongLat model constructor.
     * @property {module:model/FeatureLongLat}
     */
    FeatureLongLat: FeatureLongLat,
    /**
     * The FeatureLongLatCreateParameter model constructor.
     * @property {module:model/FeatureLongLatCreateParameter}
     */
    FeatureLongLatCreateParameter: FeatureLongLatCreateParameter,
    /**
     * The FeatureLongLatUpdateParameter model constructor.
     * @property {module:model/FeatureLongLatUpdateParameter}
     */
    FeatureLongLatUpdateParameter: FeatureLongLatUpdateParameter,
    /**
     * The FeatureWKT model constructor.
     * @property {module:model/FeatureWKT}
     */
    FeatureWKT: FeatureWKT,
    /**
     * The FeatureWKTCreateParameter model constructor.
     * @property {module:model/FeatureWKTCreateParameter}
     */
    FeatureWKTCreateParameter: FeatureWKTCreateParameter,
    /**
     * The FeatureWKTUpdateParameter model constructor.
     * @property {module:model/FeatureWKTUpdateParameter}
     */
    FeatureWKTUpdateParameter: FeatureWKTUpdateParameter,
    /**
     * The FeaturesGetParameters model constructor.
     * @property {module:model/FeaturesGetParameters}
     */
    FeaturesGetParameters: FeaturesGetParameters,
    /**
     * The GeocodedLocation model constructor.
     * @property {module:model/GeocodedLocation}
     */
    GeocodedLocation: GeocodedLocation,
    /**
     * The GridLayer model constructor.
     * @property {module:model/GridLayer}
     */
    GridLayer: GridLayer,
    /**
     * The GridLayerCreateParameters model constructor.
     * @property {module:model/GridLayerCreateParameters}
     */
    GridLayerCreateParameters: GridLayerCreateParameters,
    /**
     * The GridLayerUpdateParameters model constructor.
     * @property {module:model/GridLayerUpdateParameters}
     */
    GridLayerUpdateParameters: GridLayerUpdateParameters,
    /**
     * The GridSource model constructor.
     * @property {module:model/GridSource}
     */
    GridSource: GridSource,
    /**
     * The GridSourceRenderParameter model constructor.
     * @property {module:model/GridSourceRenderParameter}
     */
    GridSourceRenderParameter: GridSourceRenderParameter,
    /**
     * The GridSourceRenderStyleParameter model constructor.
     * @property {module:model/GridSourceRenderStyleParameter}
     */
    GridSourceRenderStyleParameter: GridSourceRenderStyleParameter,
    /**
     * The GridSourceUpdateParameters model constructor.
     * @property {module:model/GridSourceUpdateParameters}
     */
    GridSourceUpdateParameters: GridSourceUpdateParameters,
    /**
     * The Isochrone model constructor.
     * @property {module:model/Isochrone}
     */
    Isochrone: Isochrone,
    /**
     * The IsochroneParams model constructor.
     * @property {module:model/IsochroneParams}
     */
    IsochroneParams: IsochroneParams,
    /**
     * The KeywordDTO model constructor.
     * @property {module:model/KeywordDTO}
     */
    KeywordDTO: KeywordDTO,
    /**
     * The Layer model constructor.
     * @property {module:model/Layer}
     */
    Layer: Layer,
    /**
     * The LayerCreateParameter model constructor.
     * @property {module:model/LayerCreateParameter}
     */
    LayerCreateParameter: LayerCreateParameter,
    /**
     * The LayerUpdateParameter model constructor.
     * @property {module:model/LayerUpdateParameter}
     */
    LayerUpdateParameter: LayerUpdateParameter,
    /**
     * The Map model constructor.
     * @property {module:model/Map}
     */
    Map: Map,
    /**
     * The MapCreateParameter model constructor.
     * @property {module:model/MapCreateParameter}
     */
    MapCreateParameter: MapCreateParameter,
    /**
     * The MapDTO model constructor.
     * @property {module:model/MapDTO}
     */
    MapDTO: MapDTO,
    /**
     * The MapUpdateParameter model constructor.
     * @property {module:model/MapUpdateParameter}
     */
    MapUpdateParameter: MapUpdateParameter,
    /**
     * The PermissionPairComplexDTO model constructor.
     * @property {module:model/PermissionPairComplexDTO}
     */
    PermissionPairComplexDTO: PermissionPairComplexDTO,
    /**
     * The PermissionPairDTO model constructor.
     * @property {module:model/PermissionPairDTO}
     */
    PermissionPairDTO: PermissionPairDTO,
    /**
     * The ReverseGeocodeParams model constructor.
     * @property {module:model/ReverseGeocodeParams}
     */
    ReverseGeocodeParams: ReverseGeocodeParams,
    /**
     * The RouteParams model constructor.
     * @property {module:model/RouteParams}
     */
    RouteParams: RouteParams,
    /**
     * The RouteSummary model constructor.
     * @property {module:model/RouteSummary}
     */
    RouteSummary: RouteSummary,
    /**
     * The SecurityIdentityDTO model constructor.
     * @property {module:model/SecurityIdentityDTO}
     */
    SecurityIdentityDTO: SecurityIdentityDTO,
    /**
     * The SpatialMetadataDTO model constructor.
     * @property {module:model/SpatialMetadataDTO}
     */
    SpatialMetadataDTO: SpatialMetadataDTO,
    /**
     * The UpdateViewParameter model constructor.
     * @property {module:model/UpdateViewParameter}
     */
    UpdateViewParameter: UpdateViewParameter,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserCreateParameter model constructor.
     * @property {module:model/UserCreateParameter}
     */
    UserCreateParameter: UserCreateParameter,
    /**
     * The UserUpdateParameter model constructor.
     * @property {module:model/UserUpdateParameter}
     */
    UserUpdateParameter: UserUpdateParameter,
    /**
     * The View model constructor.
     * @property {module:model/View}
     */
    View: View,
    /**
     * The ViewReadPermission model constructor.
     * @property {module:model/ViewReadPermission}
     */
    ViewReadPermission: ViewReadPermission,
    /**
     * The ApiKeyApi service constructor.
     * @property {module:api/ApiKeyApi}
     */
    ApiKeyApi: ApiKeyApi,
    /**
     * The DataColumnApi service constructor.
     * @property {module:api/DataColumnApi}
     */
    DataColumnApi: DataColumnApi,
    /**
     * The DataRowApi service constructor.
     * @property {module:api/DataRowApi}
     */
    DataRowApi: DataRowApi,
    /**
     * The DataTableApi service constructor.
     * @property {module:api/DataTableApi}
     */
    DataTableApi: DataTableApi,
    /**
     * The FeatureApi service constructor.
     * @property {module:api/FeatureApi}
     */
    FeatureApi: FeatureApi,
    /**
     * The GridLayerApi service constructor.
     * @property {module:api/GridLayerApi}
     */
    GridLayerApi: GridLayerApi,
    /**
     * The LayerApi service constructor.
     * @property {module:api/LayerApi}
     */
    LayerApi: LayerApi,
    /**
     * The LocationApi service constructor.
     * @property {module:api/LocationApi}
     */
    LocationApi: LocationApi,
    /**
     * The MapApi service constructor.
     * @property {module:api/MapApi}
     */
    MapApi: MapApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi,
    /**
     * The ViewApi service constructor.
     * @property {module:api/ViewApi}
     */
    ViewApi: ViewApi
  };

  return exports;
}));

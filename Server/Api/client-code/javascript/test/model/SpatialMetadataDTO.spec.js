/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpatialMetadataDTO', function() {
      beforeEach(function() {
        instance = new CartoVistaserverapiv1.SpatialMetadataDTO();
      });

      it('should create an instance of SpatialMetadataDTO', function() {
        // TODO: update the code to test SpatialMetadataDTO
        expect(instance).to.be.a(CartoVistaserverapiv1.SpatialMetadataDTO);
      });

      it('should have the property dataTableIdkBackingField (base name: "<DataTableId>k__BackingField")', function() {
        // TODO: update the code to test the property dataTableIdkBackingField
        expect(instance).to.have.property('dataTableIdkBackingField');
        // expect(instance.dataTableIdkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property dataTableLinkingColumnIdkBackingField (base name: "<DataTableLinkingColumnId>k__BackingField")', function() {
        // TODO: update the code to test the property dataTableLinkingColumnIdkBackingField
        expect(instance).to.have.property('dataTableLinkingColumnIdkBackingField');
        // expect(instance.dataTableLinkingColumnIdkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property isUniqueColumnSetkBackingField (base name: "<IsUniqueColumnSet>k__BackingField")', function() {
        // TODO: update the code to test the property isUniqueColumnSetkBackingField
        expect(instance).to.have.property('isUniqueColumnSetkBackingField');
        // expect(instance.isUniqueColumnSetkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property spatialSourceColumnkBackingField (base name: "<SpatialSourceColumn>k__BackingField")', function() {
        // TODO: update the code to test the property spatialSourceColumnkBackingField
        expect(instance).to.have.property('spatialSourceColumnkBackingField');
        // expect(instance.spatialSourceColumnkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property spatialTableRefkBackingField (base name: "<SpatialTableRef>k__BackingField")', function() {
        // TODO: update the code to test the property spatialTableRefkBackingField
        expect(instance).to.have.property('spatialTableRefkBackingField');
        // expect(instance.spatialTableRefkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueIDColumnkBackingField (base name: "<UniqueIDColumn>k__BackingField")', function() {
        // TODO: update the code to test the property uniqueIDColumnkBackingField
        expect(instance).to.have.property('uniqueIDColumnkBackingField');
        // expect(instance.uniqueIDColumnkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property proj4kBackingField (base name: "<proj4>k__BackingField")', function() {
        // TODO: update the code to test the property proj4kBackingField
        expect(instance).to.have.property('proj4kBackingField');
        // expect(instance.proj4kBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property geometryTypekBackingField (base name: "<geometryType>k__BackingField")', function() {
        // TODO: update the code to test the property geometryTypekBackingField
        expect(instance).to.have.property('geometryTypekBackingField');
        // expect(instance.geometryTypekBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property mapUseCountkBackingField (base name: "<MapUseCount>k__BackingField")', function() {
        // TODO: update the code to test the property mapUseCountkBackingField
        expect(instance).to.have.property('mapUseCountkBackingField');
        // expect(instance.mapUseCountkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property minXkBackingField (base name: "<minX>k__BackingField")', function() {
        // TODO: update the code to test the property minXkBackingField
        expect(instance).to.have.property('minXkBackingField');
        // expect(instance.minXkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property minYkBackingField (base name: "<minY>k__BackingField")', function() {
        // TODO: update the code to test the property minYkBackingField
        expect(instance).to.have.property('minYkBackingField');
        // expect(instance.minYkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property maxXkBackingField (base name: "<maxX>k__BackingField")', function() {
        // TODO: update the code to test the property maxXkBackingField
        expect(instance).to.have.property('maxXkBackingField');
        // expect(instance.maxXkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property maxYkBackingField (base name: "<maxY>k__BackingField")', function() {
        // TODO: update the code to test the property maxYkBackingField
        expect(instance).to.have.property('maxYkBackingField');
        // expect(instance.maxYkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property sridkBackingField (base name: "<srid>k__BackingField")', function() {
        // TODO: update the code to test the property sridkBackingField
        expect(instance).to.have.property('sridkBackingField');
        // expect(instance.sridkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property tiledkBackingField (base name: "<tiled>k__BackingField")', function() {
        // TODO: update the code to test the property tiledkBackingField
        expect(instance).to.have.property('tiledkBackingField');
        // expect(instance.tiledkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property vectorQualityTypekBackingField (base name: "<vectorQualityType>k__BackingField")', function() {
        // TODO: update the code to test the property vectorQualityTypekBackingField
        expect(instance).to.have.property('vectorQualityTypekBackingField');
        // expect(instance.vectorQualityTypekBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property cacheEnabledkBackingField (base name: "<cacheEnabled>k__BackingField")', function() {
        // TODO: update the code to test the property cacheEnabledkBackingField
        expect(instance).to.have.property('cacheEnabledkBackingField');
        // expect(instance.cacheEnabledkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property clusterMetadatakBackingField (base name: "<ClusterMetadata>k__BackingField")', function() {
        // TODO: update the code to test the property clusterMetadatakBackingField
        expect(instance).to.have.property('clusterMetadatakBackingField');
        // expect(instance.clusterMetadatakBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property userFriendlyProjkBackingField (base name: "<UserFriendlyProj>k__BackingField")', function() {
        // TODO: update the code to test the property userFriendlyProjkBackingField
        expect(instance).to.have.property('userFriendlyProjkBackingField');
        // expect(instance.userFriendlyProjkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property permissionskBackingField (base name: "<Permissions>k__BackingField")', function() {
        // TODO: update the code to test the property permissionskBackingField
        expect(instance).to.have.property('permissionskBackingField');
        // expect(instance.permissionskBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property publicAccesskBackingField (base name: "<PublicAccess>k__BackingField")', function() {
        // TODO: update the code to test the property publicAccesskBackingField
        expect(instance).to.have.property('publicAccesskBackingField');
        // expect(instance.publicAccesskBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property identifierkBackingField (base name: "<Identifier>k__BackingField")', function() {
        // TODO: update the code to test the property identifierkBackingField
        expect(instance).to.have.property('identifierkBackingField');
        // expect(instance.identifierkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property pathkBackingField (base name: "<Path>k__BackingField")', function() {
        // TODO: update the code to test the property pathkBackingField
        expect(instance).to.have.property('pathkBackingField');
        // expect(instance.pathkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property metadatakBackingField (base name: "<Metadata>k__BackingField")', function() {
        // TODO: update the code to test the property metadatakBackingField
        expect(instance).to.have.property('metadatakBackingField');
        // expect(instance.metadatakBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property descriptionkBackingField (base name: "<Description>k__BackingField")', function() {
        // TODO: update the code to test the property descriptionkBackingField
        expect(instance).to.have.property('descriptionkBackingField');
        // expect(instance.descriptionkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property isUsedByTerritoryManagerkBackingField (base name: "<IsUsedByTerritoryManager>k__BackingField")', function() {
        // TODO: update the code to test the property isUsedByTerritoryManagerkBackingField
        expect(instance).to.have.property('isUsedByTerritoryManagerkBackingField');
        // expect(instance.isUsedByTerritoryManagerkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property serverViewCountkBackingField (base name: "<ServerViewCount>k__BackingField")', function() {
        // TODO: update the code to test the property serverViewCountkBackingField
        expect(instance).to.have.property('serverViewCountkBackingField');
        // expect(instance.serverViewCountkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property statuskBackingField (base name: "<Status>k__BackingField")', function() {
        // TODO: update the code to test the property statuskBackingField
        expect(instance).to.have.property('statuskBackingField');
        // expect(instance.statuskBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property recordCountkBackingField (base name: "<RecordCount>k__BackingField")', function() {
        // TODO: update the code to test the property recordCountkBackingField
        expect(instance).to.have.property('recordCountkBackingField');
        // expect(instance.recordCountkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property idkBackingField (base name: "<Id>k__BackingField")', function() {
        // TODO: update the code to test the property idkBackingField
        expect(instance).to.have.property('idkBackingField');
        // expect(instance.idkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property namekBackingField (base name: "<Name>k__BackingField")', function() {
        // TODO: update the code to test the property namekBackingField
        expect(instance).to.have.property('namekBackingField');
        // expect(instance.namekBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property ownerNamekBackingField (base name: "<OwnerName>k__BackingField")', function() {
        // TODO: update the code to test the property ownerNamekBackingField
        expect(instance).to.have.property('ownerNamekBackingField');
        // expect(instance.ownerNamekBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property creationTimekBackingField (base name: "<CreationTime>k__BackingField")', function() {
        // TODO: update the code to test the property creationTimekBackingField
        expect(instance).to.have.property('creationTimekBackingField');
        // expect(instance.creationTimekBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedTimekBackingField (base name: "<ModifiedTime>k__BackingField")', function() {
        // TODO: update the code to test the property modifiedTimekBackingField
        expect(instance).to.have.property('modifiedTimekBackingField');
        // expect(instance.modifiedTimekBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property folderIdkBackingField (base name: "<FolderId>k__BackingField")', function() {
        // TODO: update the code to test the property folderIdkBackingField
        expect(instance).to.have.property('folderIdkBackingField');
        // expect(instance.folderIdkBackingField).to.be(expectedValueLiteral);
      });

      it('should have the property currentUserHasModifyPermissionkBackingField (base name: "<CurrentUserHasModifyPermission>k__BackingField")', function() {
        // TODO: update the code to test the property currentUserHasModifyPermissionkBackingField
        expect(instance).to.have.property('currentUserHasModifyPermissionkBackingField');
        // expect(instance.currentUserHasModifyPermissionkBackingField).to.be(expectedValueLiteral);
      });

    });
  });

}));

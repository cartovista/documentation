/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GridSource', function() {
      beforeEach(function() {
        instance = new CartoVistaserverapiv1.GridSource();
      });

      it('should create an instance of GridSource', function() {
        // TODO: update the code to test GridSource
        expect(instance).to.be.a(CartoVistaserverapiv1.GridSource);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property gridLayerId (base name: "gridLayerId")', function() {
        // TODO: update the code to test the property gridLayerId
        expect(instance).to.have.property('gridLayerId');
        // expect(instance.gridLayerId).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueIdentifier (base name: "uniqueIdentifier")', function() {
        // TODO: update the code to test the property uniqueIdentifier
        expect(instance).to.have.property('uniqueIdentifier');
        // expect(instance.uniqueIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property fileMetadata (base name: "fileMetadata")', function() {
        // TODO: update the code to test the property fileMetadata
        expect(instance).to.have.property('fileMetadata');
        // expect(instance.fileMetadata).to.be(expectedValueLiteral);
      });

      it('should have the property bandMetadata (base name: "bandMetadata")', function() {
        // TODO: update the code to test the property bandMetadata
        expect(instance).to.have.property('bandMetadata');
        // expect(instance.bandMetadata).to.be(expectedValueLiteral);
      });

      it('should have the property band (base name: "band")', function() {
        // TODO: update the code to test the property band
        expect(instance).to.have.property('band');
        // expect(instance.band).to.be(expectedValueLiteral);
      });

      it('should have the property creationTime (base name: "creationTime")', function() {
        // TODO: update the code to test the property creationTime
        expect(instance).to.have.property('creationTime');
        // expect(instance.creationTime).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedTime (base name: "modifiedTime")', function() {
        // TODO: update the code to test the property modifiedTime
        expect(instance).to.have.property('modifiedTime');
        // expect(instance.modifiedTime).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property noDataEnabled (base name: "noDataEnabled")', function() {
        // TODO: update the code to test the property noDataEnabled
        expect(instance).to.have.property('noDataEnabled');
        // expect(instance.noDataEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property noDataValue (base name: "noDataValue")', function() {
        // TODO: update the code to test the property noDataValue
        expect(instance).to.have.property('noDataValue');
        // expect(instance.noDataValue).to.be(expectedValueLiteral);
      });

      it('should have the property minValue (base name: "minValue")', function() {
        // TODO: update the code to test the property minValue
        expect(instance).to.have.property('minValue');
        // expect(instance.minValue).to.be(expectedValueLiteral);
      });

      it('should have the property maxValue (base name: "maxValue")', function() {
        // TODO: update the code to test the property maxValue
        expect(instance).to.have.property('maxValue');
        // expect(instance.maxValue).to.be(expectedValueLiteral);
      });

    });
  });

}));

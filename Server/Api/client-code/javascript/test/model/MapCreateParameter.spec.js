/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MapCreateParameter', function() {
      beforeEach(function() {
        instance = new CartoVistaserverapiv1.MapCreateParameter();
      });

      it('should create an instance of MapCreateParameter', function() {
        // TODO: update the code to test MapCreateParameter
        expect(instance).to.be.a(CartoVistaserverapiv1.MapCreateParameter);
      });

      it('should have the property systemIdentifier (base name: "systemIdentifier")', function() {
        // TODO: update the code to test the property systemIdentifier
        expect(instance).to.have.property('systemIdentifier');
        // expect(instance.systemIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueIdentifier (base name: "uniqueIdentifier")', function() {
        // TODO: update the code to test the property uniqueIdentifier
        expect(instance).to.have.property('uniqueIdentifier');
        // expect(instance.uniqueIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property editable (base name: "editable")', function() {
        // TODO: update the code to test the property editable
        expect(instance).to.have.property('editable');
        // expect(instance.editable).to.be(expectedValueLiteral);
      });

      it('should have the property seoTitle (base name: "seoTitle")', function() {
        // TODO: update the code to test the property seoTitle
        expect(instance).to.have.property('seoTitle');
        // expect(instance.seoTitle).to.be(expectedValueLiteral);
      });

      it('should have the property seoDescription (base name: "seoDescription")', function() {
        // TODO: update the code to test the property seoDescription
        expect(instance).to.have.property('seoDescription');
        // expect(instance.seoDescription).to.be(expectedValueLiteral);
      });

      it('should have the property seoCustomHTML (base name: "seoCustomHTML")', function() {
        // TODO: update the code to test the property seoCustomHTML
        expect(instance).to.have.property('seoCustomHTML');
        // expect(instance.seoCustomHTML).to.be(expectedValueLiteral);
      });

      it('should have the property scoringEnabled (base name: "scoringEnabled")', function() {
        // TODO: update the code to test the property scoringEnabled
        expect(instance).to.have.property('scoringEnabled');
        // expect(instance.scoringEnabled).to.be(expectedValueLiteral);
      });

    });
  });

}));

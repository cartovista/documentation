/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MapDTO', function() {
      beforeEach(function() {
        instance = new CartoVistaserverapiv1.MapDTO();
      });

      it('should create an instance of MapDTO', function() {
        // TODO: update the code to test MapDTO
        expect(instance).to.be.a(CartoVistaserverapiv1.MapDTO);
      });

      it('should have the property configHTML5MapPathLocation (base name: "ConfigHTML5MapPathLocation")', function() {
        // TODO: update the code to test the property configHTML5MapPathLocation
        expect(instance).to.have.property('configHTML5MapPathLocation');
        // expect(instance.configHTML5MapPathLocation).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "Title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property identifier (base name: "Identifier")', function() {
        // TODO: update the code to test the property identifier
        expect(instance).to.have.property('identifier');
        // expect(instance.identifier).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property typeDescription (base name: "TypeDescription")', function() {
        // TODO: update the code to test the property typeDescription
        expect(instance).to.have.property('typeDescription');
        // expect(instance.typeDescription).to.be(expectedValueLiteral);
      });

      it('should have the property spatialMetaDataDTOs (base name: "spatialMetaDataDTOs")', function() {
        // TODO: update the code to test the property spatialMetaDataDTOs
        expect(instance).to.have.property('spatialMetaDataDTOs');
        // expect(instance.spatialMetaDataDTOs).to.be(expectedValueLiteral);
      });

      it('should have the property publicAccess (base name: "PublicAccess")', function() {
        // TODO: update the code to test the property publicAccess
        expect(instance).to.have.property('publicAccess');
        // expect(instance.publicAccess).to.be(expectedValueLiteral);
      });

      it('should have the property customViewer (base name: "CustomViewer")', function() {
        // TODO: update the code to test the property customViewer
        expect(instance).to.have.property('customViewer');
        // expect(instance.customViewer).to.be(expectedValueLiteral);
      });

      it('should have the property originalMapPackageTimestamp (base name: "OriginalMapPackageTimestamp")', function() {
        // TODO: update the code to test the property originalMapPackageTimestamp
        expect(instance).to.have.property('originalMapPackageTimestamp');
        // expect(instance.originalMapPackageTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property isMapTerritoryReady (base name: "IsMapTerritoryReady")', function() {
        // TODO: update the code to test the property isMapTerritoryReady
        expect(instance).to.have.property('isMapTerritoryReady');
        // expect(instance.isMapTerritoryReady).to.be(expectedValueLiteral);
      });

      it('should have the property thumbnailVersion (base name: "ThumbnailVersion")', function() {
        // TODO: update the code to test the property thumbnailVersion
        expect(instance).to.have.property('thumbnailVersion');
        // expect(instance.thumbnailVersion).to.be(expectedValueLiteral);
      });

      it('should have the property folderId (base name: "FolderId")', function() {
        // TODO: update the code to test the property folderId
        expect(instance).to.have.property('folderId');
        // expect(instance.folderId).to.be(expectedValueLiteral);
      });

      it('should have the property path (base name: "Path")', function() {
        // TODO: update the code to test the property path
        expect(instance).to.have.property('path');
        // expect(instance.path).to.be(expectedValueLiteral);
      });

      it('should have the property editable (base name: "Editable")', function() {
        // TODO: update the code to test the property editable
        expect(instance).to.have.property('editable');
        // expect(instance.editable).to.be(expectedValueLiteral);
      });

      it('should have the property seoTitle (base name: "seoTitle")', function() {
        // TODO: update the code to test the property seoTitle
        expect(instance).to.have.property('seoTitle');
        // expect(instance.seoTitle).to.be(expectedValueLiteral);
      });

      it('should have the property seoDescription (base name: "seoDescription")', function() {
        // TODO: update the code to test the property seoDescription
        expect(instance).to.have.property('seoDescription');
        // expect(instance.seoDescription).to.be(expectedValueLiteral);
      });

      it('should have the property seoCustomHTML (base name: "seoCustomHTML")', function() {
        // TODO: update the code to test the property seoCustomHTML
        expect(instance).to.have.property('seoCustomHTML');
        // expect(instance.seoCustomHTML).to.be(expectedValueLiteral);
      });

      it('should have the property scoringEnabled (base name: "ScoringEnabled")', function() {
        // TODO: update the code to test the property scoringEnabled
        expect(instance).to.have.property('scoringEnabled');
        // expect(instance.scoringEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property storagePath (base name: "StoragePath")', function() {
        // TODO: update the code to test the property storagePath
        expect(instance).to.have.property('storagePath');
        // expect(instance.storagePath).to.be(expectedValueLiteral);
      });

      it('should have the property dynamicThumbnailURL (base name: "DynamicThumbnailURL")', function() {
        // TODO: update the code to test the property dynamicThumbnailURL
        expect(instance).to.have.property('dynamicThumbnailURL');
        // expect(instance.dynamicThumbnailURL).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedThumbnail (base name: "ModifiedThumbnail")', function() {
        // TODO: update the code to test the property modifiedThumbnail
        expect(instance).to.have.property('modifiedThumbnail');
        // expect(instance.modifiedThumbnail).to.be(expectedValueLiteral);
      });

      it('should have the property mapUrl (base name: "MapUrl")', function() {
        // TODO: update the code to test the property mapUrl
        expect(instance).to.have.property('mapUrl');
        // expect(instance.mapUrl).to.be(expectedValueLiteral);
      });

      it('should have the property languageDescription (base name: "LanguageDescription")', function() {
        // TODO: update the code to test the property languageDescription
        expect(instance).to.have.property('languageDescription');
        // expect(instance.languageDescription).to.be(expectedValueLiteral);
      });

      it('should have the property creationTime (base name: "CreationTime")', function() {
        // TODO: update the code to test the property creationTime
        expect(instance).to.have.property('creationTime');
        // expect(instance.creationTime).to.be(expectedValueLiteral);
      });

      it('should have the property lastModifiedAuthor (base name: "LastModifiedAuthor")', function() {
        // TODO: update the code to test the property lastModifiedAuthor
        expect(instance).to.have.property('lastModifiedAuthor');
        // expect(instance.lastModifiedAuthor).to.be(expectedValueLiteral);
      });

      it('should have the property lastModifiedTime (base name: "LastModifiedTime")', function() {
        // TODO: update the code to test the property lastModifiedTime
        expect(instance).to.have.property('lastModifiedTime');
        // expect(instance.lastModifiedTime).to.be(expectedValueLiteral);
      });

      it('should have the property keywords (base name: "Keywords")', function() {
        // TODO: update the code to test the property keywords
        expect(instance).to.have.property('keywords');
        // expect(instance.keywords).to.be(expectedValueLiteral);
      });

      it('should have the property ownerName (base name: "OwnerName")', function() {
        // TODO: update the code to test the property ownerName
        expect(instance).to.have.property('ownerName');
        // expect(instance.ownerName).to.be(expectedValueLiteral);
      });

      it('should have the property permissions (base name: "Permissions")', function() {
        // TODO: update the code to test the property permissions
        expect(instance).to.have.property('permissions');
        // expect(instance.permissions).to.be(expectedValueLiteral);
      });

      it('should have the property currentUserHasModifyPermission (base name: "CurrentUserHasModifyPermission")', function() {
        // TODO: update the code to test the property currentUserHasModifyPermission
        expect(instance).to.have.property('currentUserHasModifyPermission');
        // expect(instance.currentUserHasModifyPermission).to.be(expectedValueLiteral);
      });

      it('should have the property representationUseCount (base name: "RepresentationUseCount")', function() {
        // TODO: update the code to test the property representationUseCount
        expect(instance).to.have.property('representationUseCount');
        // expect(instance.representationUseCount).to.be(expectedValueLiteral);
      });

      it('should have the property webApplicationPath (base name: "WebApplicationPath")', function() {
        // TODO: update the code to test the property webApplicationPath
        expect(instance).to.have.property('webApplicationPath');
        // expect(instance.webApplicationPath).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

    });
  });

}));

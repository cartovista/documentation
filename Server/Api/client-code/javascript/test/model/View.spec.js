/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('View', function() {
      beforeEach(function() {
        instance = new CartoVistaserverapiv1.View();
      });

      it('should create an instance of View', function() {
        // TODO: update the code to test View
        expect(instance).to.be.a(CartoVistaserverapiv1.View);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property layerId (base name: "layerId")', function() {
        // TODO: update the code to test the property layerId
        expect(instance).to.have.property('layerId');
        // expect(instance.layerId).to.be(expectedValueLiteral);
      });

      it('should have the property recordCount (base name: "recordCount")', function() {
        // TODO: update the code to test the property recordCount
        expect(instance).to.have.property('recordCount');
        // expect(instance.recordCount).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property expression (base name: "expression")', function() {
        // TODO: update the code to test the property expression
        expect(instance).to.have.property('expression');
        // expect(instance.expression).to.be(expectedValueLiteral);
      });

      it('should have the property columnId (base name: "columnId")', function() {
        // TODO: update the code to test the property columnId
        expect(instance).to.have.property('columnId');
        // expect(instance.columnId).to.be(expectedValueLiteral);
      });

      it('should have the property columnName (base name: "columnName")', function() {
        // TODO: update the code to test the property columnName
        expect(instance).to.have.property('columnName');
        // expect(instance.columnName).to.be(expectedValueLiteral);
      });

      it('should have the property columnType (base name: "columnType")', function() {
        // TODO: update the code to test the property columnType
        expect(instance).to.have.property('columnType');
        // expect(instance.columnType).to.be(expectedValueLiteral);
      });

      it('should have the property creationTime (base name: "creationTime")', function() {
        // TODO: update the code to test the property creationTime
        expect(instance).to.have.property('creationTime');
        // expect(instance.creationTime).to.be(expectedValueLiteral);
      });

      it('should have the property modifiedTime (base name: "modifiedTime")', function() {
        // TODO: update the code to test the property modifiedTime
        expect(instance).to.have.property('modifiedTime');
        // expect(instance.modifiedTime).to.be(expectedValueLiteral);
      });

      it('should have the property permissions (base name: "permissions")', function() {
        // TODO: update the code to test the property permissions
        expect(instance).to.have.property('permissions');
        // expect(instance.permissions).to.be(expectedValueLiteral);
      });

      it('should have the property currentUserHasModifyPermission (base name: "currentUserHasModifyPermission")', function() {
        // TODO: update the code to test the property currentUserHasModifyPermission
        expect(instance).to.have.property('currentUserHasModifyPermission');
        // expect(instance.currentUserHasModifyPermission).to.be(expectedValueLiteral);
      });

    });
  });

}));

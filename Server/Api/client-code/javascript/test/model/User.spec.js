/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('User', function() {
      beforeEach(function() {
        instance = new CartoVistaserverapiv1.User();
      });

      it('should create an instance of User', function() {
        // TODO: update the code to test User
        expect(instance).to.be.a(CartoVistaserverapiv1.User);
      });

      it('should have the property securityIdentifier (base name: "SecurityIdentifier")', function() {
        // TODO: update the code to test the property securityIdentifier
        expect(instance).to.have.property('securityIdentifier');
        // expect(instance.securityIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property securityProviderIdentity (base name: "SecurityProviderIdentity")', function() {
        // TODO: update the code to test the property securityProviderIdentity
        expect(instance).to.have.property('securityProviderIdentity');
        // expect(instance.securityProviderIdentity).to.be(expectedValueLiteral);
      });

      it('should have the property emailAdress (base name: "EmailAdress")', function() {
        // TODO: update the code to test the property emailAdress
        expect(instance).to.have.property('emailAdress');
        // expect(instance.emailAdress).to.be(expectedValueLiteral);
      });

      it('should have the property userName (base name: "UserName")', function() {
        // TODO: update the code to test the property userName
        expect(instance).to.have.property('userName');
        // expect(instance.userName).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "FirstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "LastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property notes (base name: "Notes")', function() {
        // TODO: update the code to test the property notes
        expect(instance).to.have.property('notes');
        // expect(instance.notes).to.be(expectedValueLiteral);
      });

      it('should have the property roles (base name: "Roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "Enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property lastLoginTime (base name: "LastLoginTime")', function() {
        // TODO: update the code to test the property lastLoginTime
        expect(instance).to.have.property('lastLoginTime');
        // expect(instance.lastLoginTime).to.be(expectedValueLiteral);
      });

      it('should have the property creationTime (base name: "CreationTime")', function() {
        // TODO: update the code to test the property creationTime
        expect(instance).to.have.property('creationTime');
        // expect(instance.creationTime).to.be(expectedValueLiteral);
      });

      it('should have the property modificationTime (base name: "ModificationTime")', function() {
        // TODO: update the code to test the property modificationTime
        expect(instance).to.have.property('modificationTime');
        // expect(instance.modificationTime).to.be(expectedValueLiteral);
      });

      it('should have the property securityProvider (base name: "SecurityProvider")', function() {
        // TODO: update the code to test the property securityProvider
        expect(instance).to.have.property('securityProvider');
        // expect(instance.securityProvider).to.be(expectedValueLiteral);
      });

      it('should have the property providerStatus (base name: "ProviderStatus")', function() {
        // TODO: update the code to test the property providerStatus
        expect(instance).to.have.property('providerStatus');
        // expect(instance.providerStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));

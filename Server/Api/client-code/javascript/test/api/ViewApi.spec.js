/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.ViewApi();
  });

  describe('(package)', function() {
    describe('ViewApi', function() {
      describe('viewCreateViewByExpression', function() {
        it('should call viewCreateViewByExpression successfully', function(done) {
          // TODO: uncomment, update parameter values for viewCreateViewByExpression call and complete the assertions
          /*
          var layerId = "layerId_example";
          var param = new CartoVistaserverapiv1.CreateViewByExpressionParameters();
          param.title = "";
          param.expression = "";

          instance.viewCreateViewByExpression(layerId, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.View);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.layerId).to.be.a('string');
            expect(data.layerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.recordCount).to.be.a('number');
            expect(data.recordCount).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Column");
            expect(data.expression).to.be.a('string');
            expect(data.expression).to.be("");
            expect(data.columnId).to.be.a('string');
            expect(data.columnId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.columnName).to.be.a('string');
            expect(data.columnName).to.be("");
            expect(data.columnType).to.be.a('string');
            expect(data.columnType).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            {
              let dataCtr = data.permissions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ViewReadPermission);
                expect(data.viewId).to.be.a('string');
                expect(data.viewId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.identityId).to.be.a('string');
                expect(data.identityId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.isGroup).to.be.a('boolean');
                expect(data.isGroup).to.be(false);

                      }
            }
            expect(data.currentUserHasModifyPermission).to.be.a('boolean');
            expect(data.currentUserHasModifyPermission).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewCreateViewsFromColumn', function() {
        it('should call viewCreateViewsFromColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for viewCreateViewsFromColumn call and complete the assertions
          /*
          var layerId = "layerId_example";
          var columnId = "columnId_example";

          instance.viewCreateViewsFromColumn(layerId, columnId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.View);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.layerId).to.be.a('string');
              expect(data.layerId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.recordCount).to.be.a('number');
              expect(data.recordCount).to.be(0);
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("Column");
              expect(data.expression).to.be.a('string');
              expect(data.expression).to.be("");
              expect(data.columnId).to.be.a('string');
              expect(data.columnId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.columnName).to.be.a('string');
              expect(data.columnName).to.be("");
              expect(data.columnType).to.be.a('string');
              expect(data.columnType).to.be("");
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.modifiedTime).to.be.a(Date);
              expect(data.modifiedTime).to.be(new Date());
              {
                let dataCtr = data.permissions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CartoVistaserverapiv1.ViewReadPermission);
                  expect(data.viewId).to.be.a('string');
                  expect(data.viewId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.identityId).to.be.a('string');
                  expect(data.identityId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.isGroup).to.be.a('boolean');
                  expect(data.isGroup).to.be(false);
  
                        }
              }
              expect(data.currentUserHasModifyPermission).to.be.a('boolean');
              expect(data.currentUserHasModifyPermission).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewDeleteViews', function() {
        it('should call viewDeleteViews successfully', function(done) {
          // TODO: uncomment, update parameter values for viewDeleteViews call
          /*
          var layerId = "layerId_example";

          instance.viewDeleteViews(layerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewGetView', function() {
        it('should call viewGetView successfully', function(done) {
          // TODO: uncomment, update parameter values for viewGetView call and complete the assertions
          /*
          var layerId = "layerId_example";
          var viewId = "viewId_example";

          instance.viewGetView(layerId, viewId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.View);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.layerId).to.be.a('string');
            expect(data.layerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.recordCount).to.be.a('number');
            expect(data.recordCount).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Column");
            expect(data.expression).to.be.a('string');
            expect(data.expression).to.be("");
            expect(data.columnId).to.be.a('string');
            expect(data.columnId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.columnName).to.be.a('string');
            expect(data.columnName).to.be("");
            expect(data.columnType).to.be.a('string');
            expect(data.columnType).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            {
              let dataCtr = data.permissions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ViewReadPermission);
                expect(data.viewId).to.be.a('string');
                expect(data.viewId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.identityId).to.be.a('string');
                expect(data.identityId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.isGroup).to.be.a('boolean');
                expect(data.isGroup).to.be(false);

                      }
            }
            expect(data.currentUserHasModifyPermission).to.be.a('boolean');
            expect(data.currentUserHasModifyPermission).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewGetViews', function() {
        it('should call viewGetViews successfully', function(done) {
          // TODO: uncomment, update parameter values for viewGetViews call and complete the assertions
          /*
          var layerId = "layerId_example";

          instance.viewGetViews(layerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.View);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.layerId).to.be.a('string');
              expect(data.layerId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.recordCount).to.be.a('number');
              expect(data.recordCount).to.be(0);
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("Column");
              expect(data.expression).to.be.a('string');
              expect(data.expression).to.be("");
              expect(data.columnId).to.be.a('string');
              expect(data.columnId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.columnName).to.be.a('string');
              expect(data.columnName).to.be("");
              expect(data.columnType).to.be.a('string');
              expect(data.columnType).to.be("");
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.modifiedTime).to.be.a(Date);
              expect(data.modifiedTime).to.be(new Date());
              {
                let dataCtr = data.permissions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CartoVistaserverapiv1.ViewReadPermission);
                  expect(data.viewId).to.be.a('string');
                  expect(data.viewId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.identityId).to.be.a('string');
                  expect(data.identityId).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.isGroup).to.be.a('boolean');
                  expect(data.isGroup).to.be(false);
  
                        }
              }
              expect(data.currentUserHasModifyPermission).to.be.a('boolean');
              expect(data.currentUserHasModifyPermission).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewUpdateView', function() {
        it('should call viewUpdateView successfully', function(done) {
          // TODO: uncomment, update parameter values for viewUpdateView call and complete the assertions
          /*
          var layerId = "layerId_example";
          var viewId = "viewId_example";
          var param = new CartoVistaserverapiv1.UpdateViewParameter();
          param.title = "";
          param.permissions = [new CartoVistaserverapiv1.ViewReadPermission()];
          param.permissions[0].viewId = "00000000-0000-0000-0000-000000000000";
          param.permissions[0].identityId = "00000000-0000-0000-0000-000000000000";
          param.permissions[0].isGroup = false;

          instance.viewUpdateView(layerId, viewId, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.View);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.layerId).to.be.a('string');
            expect(data.layerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.recordCount).to.be.a('number');
            expect(data.recordCount).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Column");
            expect(data.expression).to.be.a('string');
            expect(data.expression).to.be("");
            expect(data.columnId).to.be.a('string');
            expect(data.columnId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.columnName).to.be.a('string');
            expect(data.columnName).to.be("");
            expect(data.columnType).to.be.a('string');
            expect(data.columnType).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            {
              let dataCtr = data.permissions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ViewReadPermission);
                expect(data.viewId).to.be.a('string');
                expect(data.viewId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.identityId).to.be.a('string');
                expect(data.identityId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.isGroup).to.be.a('boolean');
                expect(data.isGroup).to.be(false);

                      }
            }
            expect(data.currentUserHasModifyPermission).to.be.a('boolean');
            expect(data.currentUserHasModifyPermission).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('viewUpdateViewPermissions', function() {
        it('should call viewUpdateViewPermissions successfully', function(done) {
          // TODO: uncomment, update parameter values for viewUpdateViewPermissions call and complete the assertions
          /*
          var layerId = "layerId_example";
          var viewId = "viewId_example";
          var permissions = [new CartoVistaserverapiv1.ViewReadPermission()];
          permissions[0].viewId = "00000000-0000-0000-0000-000000000000";
          permissions[0].identityId = "00000000-0000-0000-0000-000000000000";
          permissions[0].isGroup = false;

          instance.viewUpdateViewPermissions(layerId, viewId, permissions, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.View);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.layerId).to.be.a('string');
            expect(data.layerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.recordCount).to.be.a('number');
            expect(data.recordCount).to.be(0);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("Column");
            expect(data.expression).to.be.a('string');
            expect(data.expression).to.be("");
            expect(data.columnId).to.be.a('string');
            expect(data.columnId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.columnName).to.be.a('string');
            expect(data.columnName).to.be("");
            expect(data.columnType).to.be.a('string');
            expect(data.columnType).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            {
              let dataCtr = data.permissions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ViewReadPermission);
                expect(data.viewId).to.be.a('string');
                expect(data.viewId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.identityId).to.be.a('string');
                expect(data.identityId).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.isGroup).to.be.a('boolean');
                expect(data.isGroup).to.be(false);

                      }
            }
            expect(data.currentUserHasModifyPermission).to.be.a('boolean');
            expect(data.currentUserHasModifyPermission).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.LayerApi();
  });

  describe('(package)', function() {
    describe('LayerApi', function() {
      describe('layerCreateLayer', function() {
        it('should call layerCreateLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for layerCreateLayer call and complete the assertions
          /*
          var parameters = new CartoVistaserverapiv1.LayerCreateParameter();
          parameters.identifier = "";
          parameters.proj4 = "";
          parameters.name = "";
          parameters.metadata = "";
          parameters.geometryType = "";
          parameters.description = "";
          parameters.vectorTiling = false;
          parameters.systemIdentifier = "00000000-0000-0000-0000-000000000000";
          parameters.dataTableSystemIdentifier = "00000000-0000-0000-0000-000000000000";
          parameters.featureIdColumnSystemIdentifier = "00000000-0000-0000-0000-000000000000";

          instance.layerCreateLayer(parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerCreateLayerFromZip', function() {
        it('should call layerCreateLayerFromZip successfully', function(done) {
          // TODO: uncomment, update parameter values for layerCreateLayerFromZip call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.layerCreateLayerFromZip(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerDeleteLayerById', function() {
        it('should call layerDeleteLayerById successfully', function(done) {
          // TODO: uncomment, update parameter values for layerDeleteLayerById call
          /*
          var layerIdentifier = "layerIdentifier_example";

          instance.layerDeleteLayerById(layerIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerGetLayerById', function() {
        it('should call layerGetLayerById successfully', function(done) {
          // TODO: uncomment, update parameter values for layerGetLayerById call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";

          instance.layerGetLayerById(layerIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerGetLayers', function() {
        it('should call layerGetLayers successfully', function(done) {
          // TODO: uncomment layerGetLayers call and complete the assertions
          /*

          instance.layerGetLayers(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.Layer);
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.creationTime).to.be.a('string');
              expect(data.creationTime).to.be("");
              expect(data.dataTableUniqueIdentifier).to.be.a('string');
              expect(data.dataTableUniqueIdentifier).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.geometryType).to.be.a('string');
              expect(data.geometryType).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.modifiedTime).to.be.a('string');
              expect(data.modifiedTime).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.proj4).to.be.a('string');
              expect(data.proj4).to.be("");
              expect(data.rowCount).to.be.a('number');
              expect(data.rowCount).to.be(0);
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.uniqueIdDataColumn).to.be.a('string');
              expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerSetDataColumnUniqueId', function() {
        it('should call layerSetDataColumnUniqueId successfully', function(done) {
          // TODO: uncomment, update parameter values for layerSetDataColumnUniqueId call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";

          instance.layerSetDataColumnUniqueId(layerIdentifier, dataColumnIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerSetUniqueIdentifier', function() {
        it('should call layerSetUniqueIdentifier successfully', function(done) {
          // TODO: uncomment, update parameter values for layerSetUniqueIdentifier call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var newIdentifier = "newIdentifier_example";

          instance.layerSetUniqueIdentifier(layerIdentifier, newIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerUpdateLayer', function() {
        it('should call layerUpdateLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for layerUpdateLayer call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var parameters = new CartoVistaserverapiv1.LayerUpdateParameter();
          parameters.name = "";
          parameters.metadata = "";
          parameters.description = "";
          parameters.vectorTiling = false;
          parameters.dataColumns = [new CartoVistaserverapiv1.DataColumnUpdateParameterExtended()];
          parameters.dataColumns[0].columnIdentifier = "";
          parameters.dataColumns[0].cartoVistaDataType = "";
          parameters.dataColumns[0].name = "";
          parameters.dataColumns[0].description = "";
          parameters.dataColumns[0].metadata = "";
          parameters.dataColumns[0].units = "";
          parameters.dataColumns[0].aggregationType = "";
          parameters.dataColumns[0].mappable = false;
          parameters.dataColumns[0].precision = 0;
          parameters.dataColumns[0].roundToPrecision = false;
          parameters.dataColumns[0].timeStamp = ;
          parameters.dataColumns[0].timeStampAccuracy = ;
          parameters.dataColumns[0].notAvailableValues = false;
          parameters.dataColumns[0].valueToConvert = 0.0;

          instance.layerUpdateLayer(layerIdentifier, parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('layerUpdateLayerFromZip', function() {
        it('should call layerUpdateLayerFromZip successfully', function(done) {
          // TODO: uncomment, update parameter values for layerUpdateLayerFromZip call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var file = "/path/to/file.txt";

          instance.layerUpdateLayerFromZip(layerIdentifier, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Layer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.dataTableUniqueIdentifier).to.be.a('string');
            expect(data.dataTableUniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

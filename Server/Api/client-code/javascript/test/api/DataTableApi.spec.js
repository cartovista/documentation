/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.DataTableApi();
  });

  describe('(package)', function() {
    describe('DataTableApi', function() {
      describe('dataTableCreateDataTable', function() {
        it('should call dataTableCreateDataTable successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableCreateDataTable call and complete the assertions
          /*
          var parameters = new CartoVistaserverapiv1.DataTableCreateParameter();
          parameters.identifier = "";
          parameters.name = "";
          parameters.metadata = "";
          parameters.description = "";
          parameters.systemIdentifier = "00000000-0000-0000-0000-000000000000";

          instance.dataTableCreateDataTable(parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableCreateFromCSV', function() {
        it('should call dataTableCreateFromCSV successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableCreateFromCSV call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.dataTableCreateFromCSV(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableCreateFromExcel', function() {
        it('should call dataTableCreateFromExcel successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableCreateFromExcel call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.dataTableCreateFromExcel(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableCreateFromExcelSheetName', function() {
        it('should call dataTableCreateFromExcelSheetName successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableCreateFromExcelSheetName call and complete the assertions
          /*
          var sheetName = "sheetName_example";
          var file = "/path/to/file.txt";

          instance.dataTableCreateFromExcelSheetName(sheetName, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableDeleteDataTable', function() {
        it('should call dataTableDeleteDataTable successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableDeleteDataTable call
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";

          instance.dataTableDeleteDataTable(dataTableIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableGetDataTableByIdentifier', function() {
        it('should call dataTableGetDataTableByIdentifier successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableGetDataTableByIdentifier call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";

          instance.dataTableGetDataTableByIdentifier(dataTableIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableGetDataTables', function() {
        it('should call dataTableGetDataTables successfully', function(done) {
          // TODO: uncomment dataTableGetDataTables call and complete the assertions
          /*

          instance.dataTableGetDataTables(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.uniqueIdDataColumn).to.be.a('string');
              expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.rowCount).to.be.a('number');
              expect(data.rowCount).to.be(0);
              expect(data.creationTime).to.be.a('string');
              expect(data.creationTime).to.be("");
              expect(data.modifiedTime).to.be.a('string');
              expect(data.modifiedTime).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableSetDataColumnUniqueId', function() {
        it('should call dataTableSetDataColumnUniqueId successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableSetDataColumnUniqueId call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";

          instance.dataTableSetDataColumnUniqueId(dataTableIdentifier, dataColumnIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableSetUniqueIdentifier', function() {
        it('should call dataTableSetUniqueIdentifier successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableSetUniqueIdentifier call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var newIdentifier = "newIdentifier_example";

          instance.dataTableSetUniqueIdentifier(dataTableIdentifier, newIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableUpdateDataTable', function() {
        it('should call dataTableUpdateDataTable successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableUpdateDataTable call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var parameters = new CartoVistaserverapiv1.DataTableUpdateParameter();
          parameters.name = "";
          parameters.metadata = "";
          parameters.description = "";
          parameters.dataColumns = [new CartoVistaserverapiv1.DataColumnUpdateParameterExtended()];
          parameters.dataColumns[0].columnIdentifier = "";
          parameters.dataColumns[0].cartoVistaDataType = "";
          parameters.dataColumns[0].name = "";
          parameters.dataColumns[0].description = "";
          parameters.dataColumns[0].metadata = "";
          parameters.dataColumns[0].units = "";
          parameters.dataColumns[0].aggregationType = "";
          parameters.dataColumns[0].mappable = false;
          parameters.dataColumns[0].precision = 0;
          parameters.dataColumns[0].roundToPrecision = false;
          parameters.dataColumns[0].timeStamp = ;
          parameters.dataColumns[0].timeStampAccuracy = ;
          parameters.dataColumns[0].notAvailableValues = false;
          parameters.dataColumns[0].valueToConvert = 0.0;

          instance.dataTableUpdateDataTable(dataTableIdentifier, parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableUpdateFromCSV', function() {
        it('should call dataTableUpdateFromCSV successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableUpdateFromCSV call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var file = "/path/to/file.txt";

          instance.dataTableUpdateFromCSV(dataTableIdentifier, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableUpdateFromExcel', function() {
        it('should call dataTableUpdateFromExcel successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableUpdateFromExcel call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var file = "/path/to/file.txt";

          instance.dataTableUpdateFromExcel(dataTableIdentifier, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataTableUpdateFromExcelSheetName', function() {
        it('should call dataTableUpdateFromExcelSheetName successfully', function(done) {
          // TODO: uncomment, update parameter values for dataTableUpdateFromExcelSheetName call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var sheetName = "sheetName_example";
          var file = "/path/to/file.txt";

          instance.dataTableUpdateFromExcelSheetName(dataTableIdentifier, sheetName, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataTable);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdDataColumn).to.be.a('string');
            expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.rowCount).to.be.a('number');
            expect(data.rowCount).to.be(0);
            expect(data.creationTime).to.be.a('string');
            expect(data.creationTime).to.be("");
            expect(data.modifiedTime).to.be.a('string');
            expect(data.modifiedTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

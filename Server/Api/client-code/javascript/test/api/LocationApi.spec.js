/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.LocationApi();
  });

  describe('(package)', function() {
    describe('LocationApi', function() {
      describe('locationGeocode', function() {
        it('should call locationGeocode successfully', function(done) {
          // TODO: uncomment, update parameter values for locationGeocode call and complete the assertions
          /*
          var address = "address_example";

          instance.locationGeocode(address, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.GeocodedLocation);
              expect(data.longitude).to.be.a('number');
              expect(data.longitude).to.be(0.0);
              expect(data.latitude).to.be.a('number');
              expect(data.latitude).to.be(0.0);
              expect(data.address).to.be.a('string');
              expect(data.address).to.be("");
              expect(data.boundingBox).to.be.a(CartoVistaserverapiv1.BoundingBox);
                    expect(data.boundingBox.minx).to.be.a('number');
                expect(data.boundingBox.minx).to.be(0.0);
                expect(data.boundingBox.miny).to.be.a('number');
                expect(data.boundingBox.miny).to.be(0.0);
                expect(data.boundingBox.maxx).to.be.a('number');
                expect(data.boundingBox.maxx).to.be(0.0);
                expect(data.boundingBox.maxy).to.be.a('number');
                expect(data.boundingBox.maxy).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('locationGetRouteSummary', function() {
        it('should call locationGetRouteSummary successfully', function(done) {
          // TODO: uncomment, update parameter values for locationGetRouteSummary call and complete the assertions
          /*
          var opts = {};
          opts.paramOriginLatitude = 1.2;
          opts.paramOriginLongitude = 1.2;
          opts.paramDestinationLatitude = 1.2;
          opts.paramDestinationLongitude = 1.2;

          instance.locationGetRouteSummary(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.RouteSummary);
            expect(data.originLatitude).to.be.a('number');
            expect(data.originLatitude).to.be(0.0);
            expect(data.originLongitude).to.be.a('number');
            expect(data.originLongitude).to.be(0.0);
            expect(data.destinationLatitude).to.be.a('number');
            expect(data.destinationLatitude).to.be(0.0);
            expect(data.destinationLongitude).to.be.a('number');
            expect(data.destinationLongitude).to.be(0.0);
            expect(data.driveDistanceMeters).to.be.a('number');
            expect(data.driveDistanceMeters).to.be(0);
            expect(data.driveTimeMinutes).to.be.a('number');
            expect(data.driveTimeMinutes).to.be(0);
            {
              let dataCtr = data.coordinates;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0.0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('locationIsochrone', function() {
        it('should call locationIsochrone successfully', function(done) {
          // TODO: uncomment, update parameter values for locationIsochrone call and complete the assertions
          /*
          var param = new CartoVistaserverapiv1.IsochroneParams();
          param.longitude = 0.0;
          param.latitude = 0.0;
          param.range = 0.0;
          param.rangeType = "time";
          param.mode = "car";
          param.departureTime = "";

          instance.locationIsochrone(param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Isochrone);
            expect(data.longitude).to.be.a('number');
            expect(data.longitude).to.be(0.0);
            expect(data.latitude).to.be.a('number');
            expect(data.latitude).to.be(0.0);
            expect(data.range).to.be.a('string');
            expect(data.range).to.be("");
            expect(data.rangeType).to.be.a('string');
            expect(data.rangeType).to.be("");
            expect(data.mode).to.be.a('string');
            expect(data.mode).to.be("");
            expect(data.departureTime).to.be.a('string');
            expect(data.departureTime).to.be("");
            {
              let dataCtr = data.isolineCoordinates;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0.0);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('locationReverseGeocode', function() {
        it('should call locationReverseGeocode successfully', function(done) {
          // TODO: uncomment, update parameter values for locationReverseGeocode call and complete the assertions
          /*
          var param = new CartoVistaserverapiv1.ReverseGeocodeParams();
          param.longitude = "";
          param.latitude = "";

          instance.locationReverseGeocode(param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.GeocodedLocation);
              expect(data.longitude).to.be.a('number');
              expect(data.longitude).to.be(0.0);
              expect(data.latitude).to.be.a('number');
              expect(data.latitude).to.be(0.0);
              expect(data.address).to.be.a('string');
              expect(data.address).to.be("");
              expect(data.boundingBox).to.be.a(CartoVistaserverapiv1.BoundingBox);
                    expect(data.boundingBox.minx).to.be.a('number');
                expect(data.boundingBox.minx).to.be(0.0);
                expect(data.boundingBox.miny).to.be.a('number');
                expect(data.boundingBox.miny).to.be(0.0);
                expect(data.boundingBox.maxx).to.be.a('number');
                expect(data.boundingBox.maxx).to.be(0.0);
                expect(data.boundingBox.maxy).to.be.a('number');
                expect(data.boundingBox.maxy).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('userCreateUser', function() {
        it('should call userCreateUser successfully', function(done) {
          // TODO: uncomment, update parameter values for userCreateUser call and complete the assertions
          /*
          var param = new CartoVistaserverapiv1.UserCreateParameter();
          param.userName = "";
          param.emailAdress = "";
          param.firstName = "";
          param.lastName = "";
          param.roles = [""];

          instance.userCreateUser(param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.User);
            expect(data.securityIdentifier).to.be.a('string');
            expect(data.securityIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.securityProviderIdentity).to.be.a('string');
            expect(data.securityProviderIdentity).to.be("");
            expect(data.emailAdress).to.be.a('string');
            expect(data.emailAdress).to.be("");
            expect(data.userName).to.be.a('string');
            expect(data.userName).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enabled).to.be.a('boolean');
            expect(data.enabled).to.be(false);
            expect(data.lastLoginTime).to.be.a(Date);
            expect(data.lastLoginTime).to.be(new Date());
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modificationTime).to.be.a(Date);
            expect(data.modificationTime).to.be(new Date());
            expect(data.securityProvider).to.be.a('string');
            expect(data.securityProvider).to.be("");
            expect(data.providerStatus).to.be.a('string');
            expect(data.providerStatus).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userDeleteUser', function() {
        it('should call userDeleteUser successfully', function(done) {
          // TODO: uncomment, update parameter values for userDeleteUser call
          /*
          var userIdentifier = "userIdentifier_example";

          instance.userDeleteUser(userIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetUser', function() {
        it('should call userGetUser successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetUser call and complete the assertions
          /*
          var userIdentifier = "userIdentifier_example";

          instance.userGetUser(userIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.User);
            expect(data.securityIdentifier).to.be.a('string');
            expect(data.securityIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.securityProviderIdentity).to.be.a('string');
            expect(data.securityProviderIdentity).to.be("");
            expect(data.emailAdress).to.be.a('string');
            expect(data.emailAdress).to.be("");
            expect(data.userName).to.be.a('string');
            expect(data.userName).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enabled).to.be.a('boolean');
            expect(data.enabled).to.be(false);
            expect(data.lastLoginTime).to.be.a(Date);
            expect(data.lastLoginTime).to.be(new Date());
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modificationTime).to.be.a(Date);
            expect(data.modificationTime).to.be(new Date());
            expect(data.securityProvider).to.be.a('string');
            expect(data.securityProvider).to.be("");
            expect(data.providerStatus).to.be.a('string');
            expect(data.providerStatus).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetUsers', function() {
        it('should call userGetUsers successfully', function(done) {
          // TODO: uncomment userGetUsers call and complete the assertions
          /*

          instance.userGetUsers(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.User);
              expect(data.securityIdentifier).to.be.a('string');
              expect(data.securityIdentifier).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.securityProviderIdentity).to.be.a('string');
              expect(data.securityProviderIdentity).to.be("");
              expect(data.emailAdress).to.be.a('string');
              expect(data.emailAdress).to.be("");
              expect(data.userName).to.be.a('string');
              expect(data.userName).to.be("");
              expect(data.firstName).to.be.a('string');
              expect(data.firstName).to.be("");
              expect(data.lastName).to.be.a('string');
              expect(data.lastName).to.be("");
              expect(data.notes).to.be.a('string');
              expect(data.notes).to.be("");
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.enabled).to.be.a('boolean');
              expect(data.enabled).to.be(false);
              expect(data.lastLoginTime).to.be.a(Date);
              expect(data.lastLoginTime).to.be(new Date());
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.modificationTime).to.be.a(Date);
              expect(data.modificationTime).to.be(new Date());
              expect(data.securityProvider).to.be.a('string');
              expect(data.securityProvider).to.be("");
              expect(data.providerStatus).to.be.a('string');
              expect(data.providerStatus).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userUpdateUser', function() {
        it('should call userUpdateUser successfully', function(done) {
          // TODO: uncomment, update parameter values for userUpdateUser call and complete the assertions
          /*
          var userIdentifier = "userIdentifier_example";
          var param = new CartoVistaserverapiv1.UserUpdateParameter();
          param.userName = "";
          param.emailAdress = "";
          param.firstName = "";
          param.lastName = "";
          param.notes = "";
          param.enabled = false;
          param.roles = [""];

          instance.userUpdateUser(userIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.User);
            expect(data.securityIdentifier).to.be.a('string');
            expect(data.securityIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.securityProviderIdentity).to.be.a('string');
            expect(data.securityProviderIdentity).to.be("");
            expect(data.emailAdress).to.be.a('string');
            expect(data.emailAdress).to.be("");
            expect(data.userName).to.be.a('string');
            expect(data.userName).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.notes).to.be.a('string');
            expect(data.notes).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.enabled).to.be.a('boolean');
            expect(data.enabled).to.be(false);
            expect(data.lastLoginTime).to.be.a(Date);
            expect(data.lastLoginTime).to.be(new Date());
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modificationTime).to.be.a(Date);
            expect(data.modificationTime).to.be(new Date());
            expect(data.securityProvider).to.be.a('string');
            expect(data.securityProvider).to.be("");
            expect(data.providerStatus).to.be.a('string');
            expect(data.providerStatus).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

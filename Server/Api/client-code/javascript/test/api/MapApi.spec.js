/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.MapApi();
  });

  describe('(package)', function() {
    describe('MapApi', function() {
      describe('mapCreateMap', function() {
        it('should call mapCreateMap successfully', function(done) {
          // TODO: uncomment, update parameter values for mapCreateMap call and complete the assertions
          /*
          var param = new CartoVistaserverapiv1.MapCreateParameter();
          param.systemIdentifier = "00000000-0000-0000-0000-000000000000";
          param.title = "";
          param.uniqueIdentifier = "";
          param.description = "";
          param.language = "fr";
          param.editable = false;
          param.seoTitle = "";
          param.seoDescription = "";
          param.seoCustomHTML = "";
          param.scoringEnabled = false;

          instance.mapCreateMap(param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Map);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.language).to.be.a('string');
            expect(data.language).to.be("fr");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.isMapTerritoryReady).to.be.a('boolean');
            expect(data.isMapTerritoryReady).to.be(false);
            expect(data.editable).to.be.a('boolean');
            expect(data.editable).to.be(false);
            expect(data.seoTitle).to.be.a('string');
            expect(data.seoTitle).to.be("");
            expect(data.seoDescription).to.be.a('string');
            expect(data.seoDescription).to.be("");
            expect(data.seoCustomHTML).to.be.a('string');
            expect(data.seoCustomHTML).to.be("");
            expect(data.scoringEnabled).to.be.a('boolean');
            expect(data.scoringEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mapDeleteMap', function() {
        it('should call mapDeleteMap successfully', function(done) {
          // TODO: uncomment, update parameter values for mapDeleteMap call
          /*
          var mapId = "mapId_example";

          instance.mapDeleteMap(mapId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mapGetGridLayersByMap', function() {
        it('should call mapGetGridLayersByMap successfully', function(done) {
          // TODO: uncomment, update parameter values for mapGetGridLayersByMap call and complete the assertions
          /*
          var mapId = "mapId_example";

          instance.mapGetGridLayersByMap(mapId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.GridLayer);
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.proj4).to.be.a('string');
              expect(data.proj4).to.be("");
              expect(data.units).to.be.a('string');
              expect(data.units).to.be("");
              expect(data.precision).to.be.a('number');
              expect(data.precision).to.be(0);
              expect(data.gridSourceCount).to.be.a('number');
              expect(data.gridSourceCount).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.modifiedTime).to.be.a(Date);
              expect(data.modifiedTime).to.be(new Date());
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mapGetLayersByMap', function() {
        it('should call mapGetLayersByMap successfully', function(done) {
          // TODO: uncomment, update parameter values for mapGetLayersByMap call and complete the assertions
          /*
          var mapId = "mapId_example";

          instance.mapGetLayersByMap(mapId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.Layer);
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.creationTime).to.be.a('string');
              expect(data.creationTime).to.be("");
              expect(data.dataTableUniqueIdentifier).to.be.a('string');
              expect(data.dataTableUniqueIdentifier).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.geometryType).to.be.a('string');
              expect(data.geometryType).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.modifiedTime).to.be.a('string');
              expect(data.modifiedTime).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.proj4).to.be.a('string');
              expect(data.proj4).to.be("");
              expect(data.rowCount).to.be.a('number');
              expect(data.rowCount).to.be(0);
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.uniqueIdDataColumn).to.be.a('string');
              expect(data.uniqueIdDataColumn).to.be("00000000-0000-0000-0000-000000000000");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mapGetMap', function() {
        it('should call mapGetMap successfully', function(done) {
          // TODO: uncomment, update parameter values for mapGetMap call and complete the assertions
          /*
          var mapId = "mapId_example";

          instance.mapGetMap(mapId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Map);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.language).to.be.a('string');
            expect(data.language).to.be("fr");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.isMapTerritoryReady).to.be.a('boolean');
            expect(data.isMapTerritoryReady).to.be(false);
            expect(data.editable).to.be.a('boolean');
            expect(data.editable).to.be(false);
            expect(data.seoTitle).to.be.a('string');
            expect(data.seoTitle).to.be("");
            expect(data.seoDescription).to.be.a('string');
            expect(data.seoDescription).to.be("");
            expect(data.seoCustomHTML).to.be.a('string');
            expect(data.seoCustomHTML).to.be("");
            expect(data.scoringEnabled).to.be.a('boolean');
            expect(data.scoringEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mapGetMaps', function() {
        it('should call mapGetMaps successfully', function(done) {
          // TODO: uncomment mapGetMaps call and complete the assertions
          /*

          instance.mapGetMaps(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.Map);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.language).to.be.a('string');
              expect(data.language).to.be("fr");
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.type).to.be.a('number');
              expect(data.type).to.be(1);
              expect(data.isMapTerritoryReady).to.be.a('boolean');
              expect(data.isMapTerritoryReady).to.be(false);
              expect(data.editable).to.be.a('boolean');
              expect(data.editable).to.be(false);
              expect(data.seoTitle).to.be.a('string');
              expect(data.seoTitle).to.be("");
              expect(data.seoDescription).to.be.a('string');
              expect(data.seoDescription).to.be("");
              expect(data.seoCustomHTML).to.be.a('string');
              expect(data.seoCustomHTML).to.be("");
              expect(data.scoringEnabled).to.be.a('boolean');
              expect(data.scoringEnabled).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mapUpdateMap', function() {
        it('should call mapUpdateMap successfully', function(done) {
          // TODO: uncomment, update parameter values for mapUpdateMap call and complete the assertions
          /*
          var mapId = "mapId_example";
          var param = new CartoVistaserverapiv1.MapUpdateParameter();
          param.title = "";
          param.uniqueIdentifier = "";
          param.description = "";
          param.language = "fr";
          param.editable = false;
          param.seoTitle = "";
          param.seoDescription = "";
          param.seoCustomHTML = "";
          param.scoringEnabled = false;

          instance.mapUpdateMap(mapId, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.Map);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.language).to.be.a('string');
            expect(data.language).to.be("fr");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(1);
            expect(data.isMapTerritoryReady).to.be.a('boolean');
            expect(data.isMapTerritoryReady).to.be(false);
            expect(data.editable).to.be.a('boolean');
            expect(data.editable).to.be(false);
            expect(data.seoTitle).to.be.a('string');
            expect(data.seoTitle).to.be("");
            expect(data.seoDescription).to.be.a('string');
            expect(data.seoDescription).to.be("");
            expect(data.seoCustomHTML).to.be.a('string');
            expect(data.seoCustomHTML).to.be("");
            expect(data.scoringEnabled).to.be.a('boolean');
            expect(data.scoringEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.GridLayerApi();
  });

  describe('(package)', function() {
    describe('GridLayerApi', function() {
      describe('gridLayerAddGridSource', function() {
        it('should call gridLayerAddGridSource successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerAddGridSource call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var bandNumber = 56;
          var file = "/path/to/file.txt";

          instance.gridLayerAddGridSource(gridLayerId, bandNumber, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.gridLayerId).to.be.a('string');
            expect(data.gridLayerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.fileMetadata).to.be.a('string');
            expect(data.fileMetadata).to.be("");
            expect(data.bandMetadata).to.be.a('string');
            expect(data.bandMetadata).to.be("");
            expect(data.band).to.be.a('number');
            expect(data.band).to.be(0);
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.noDataEnabled).to.be.a('boolean');
            expect(data.noDataEnabled).to.be(false);
            expect(data.noDataValue).to.be.a('string');
            expect(data.noDataValue).to.be("");
            expect(data.minValue).to.be.a('number');
            expect(data.minValue).to.be(0.0);
            expect(data.maxValue).to.be.a('number');
            expect(data.maxValue).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerCreateGridLayer', function() {
        it('should call gridLayerCreateGridLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerCreateGridLayer call and complete the assertions
          /*
          var createParameters = new CartoVistaserverapiv1.GridLayerCreateParameters();
          createParameters.uniqueIdentifier = "";
          createParameters.name = "";
          createParameters.description = "";
          createParameters.metadata = "";
          createParameters.units = "";
          createParameters.precision = 0;
          createParameters.proj4 = "";

          instance.gridLayerCreateGridLayer(createParameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridLayer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.gridSourceCount).to.be.a('number');
            expect(data.gridSourceCount).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerDeleteGridLayer', function() {
        it('should call gridLayerDeleteGridLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerDeleteGridLayer call
          /*
          var gridLayerId = "gridLayerId_example";

          instance.gridLayerDeleteGridLayer(gridLayerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerDeleteGridSource', function() {
        it('should call gridLayerDeleteGridSource successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerDeleteGridSource call
          /*
          var gridLayerId = "gridLayerId_example";
          var gridSourceId = "gridSourceId_example";

          instance.gridLayerDeleteGridSource(gridLayerId, gridSourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerGetData', function() {
        it('should call gridLayerGetData successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerGetData call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var gridSourceId = "gridSourceId_example";

          instance.gridLayerGetData(gridLayerId, gridSourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerGetGridLayerById', function() {
        it('should call gridLayerGetGridLayerById successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerGetGridLayerById call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";

          instance.gridLayerGetGridLayerById(gridLayerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridLayer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.gridSourceCount).to.be.a('number');
            expect(data.gridSourceCount).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerGetGridLayers', function() {
        it('should call gridLayerGetGridLayers successfully', function(done) {
          // TODO: uncomment gridLayerGetGridLayers call and complete the assertions
          /*

          instance.gridLayerGetGridLayers(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.GridLayer);
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.proj4).to.be.a('string');
              expect(data.proj4).to.be("");
              expect(data.units).to.be.a('string');
              expect(data.units).to.be("");
              expect(data.precision).to.be.a('number');
              expect(data.precision).to.be(0);
              expect(data.gridSourceCount).to.be.a('number');
              expect(data.gridSourceCount).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.modifiedTime).to.be.a(Date);
              expect(data.modifiedTime).to.be(new Date());
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerGetGridSource', function() {
        it('should call gridLayerGetGridSource successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerGetGridSource call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var gridSourceId = "gridSourceId_example";

          instance.gridLayerGetGridSource(gridLayerId, gridSourceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.gridLayerId).to.be.a('string');
            expect(data.gridLayerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.fileMetadata).to.be.a('string');
            expect(data.fileMetadata).to.be("");
            expect(data.bandMetadata).to.be.a('string');
            expect(data.bandMetadata).to.be("");
            expect(data.band).to.be.a('number');
            expect(data.band).to.be(0);
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.noDataEnabled).to.be.a('boolean');
            expect(data.noDataEnabled).to.be(false);
            expect(data.noDataValue).to.be.a('string');
            expect(data.noDataValue).to.be("");
            expect(data.minValue).to.be.a('number');
            expect(data.minValue).to.be(0.0);
            expect(data.maxValue).to.be.a('number');
            expect(data.maxValue).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerGetGridSourcesForGridLayer', function() {
        it('should call gridLayerGetGridSourcesForGridLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerGetGridSourcesForGridLayer call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";

          instance.gridLayerGetGridSourcesForGridLayer(gridLayerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.GridSource);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.gridLayerId).to.be.a('string');
              expect(data.gridLayerId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.fileMetadata).to.be.a('string');
              expect(data.fileMetadata).to.be("");
              expect(data.bandMetadata).to.be.a('string');
              expect(data.bandMetadata).to.be("");
              expect(data.band).to.be.a('number');
              expect(data.band).to.be(0);
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.modifiedTime).to.be.a(Date);
              expect(data.modifiedTime).to.be(new Date());
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.noDataEnabled).to.be.a('boolean');
              expect(data.noDataEnabled).to.be(false);
              expect(data.noDataValue).to.be.a('string');
              expect(data.noDataValue).to.be("");
              expect(data.minValue).to.be.a('number');
              expect(data.minValue).to.be(0.0);
              expect(data.maxValue).to.be.a('number');
              expect(data.maxValue).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerGetMapsByGridLayer', function() {
        it('should call gridLayerGetMapsByGridLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerGetMapsByGridLayer call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";

          instance.gridLayerGetMapsByGridLayer(gridLayerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.MapDTO);
              expect(data.configHTML5MapPathLocation).to.be.a('string');
              expect(data.configHTML5MapPathLocation).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.identifier).to.be.a('string');
              expect(data.identifier).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.type).to.be.a('number');
              expect(data.type).to.be(1);
              expect(data.typeDescription).to.be.a('string');
              expect(data.typeDescription).to.be("");
              {
                let dataCtr = data.spatialMetaDataDTOs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CartoVistaserverapiv1.SpatialMetadataDTO);
                  expect(data.dataTableIdkBackingField).to.be.a('string');
                  expect(data.dataTableIdkBackingField).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.dataTableLinkingColumnIdkBackingField).to.be.a('string');
                  expect(data.dataTableLinkingColumnIdkBackingField).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.isUniqueColumnSetkBackingField).to.be.a('boolean');
                  expect(data.isUniqueColumnSetkBackingField).to.be(false);
                  expect(data.spatialSourceColumnkBackingField).to.be.a('string');
                  expect(data.spatialSourceColumnkBackingField).to.be("");
                  expect(data.spatialTableRefkBackingField).to.be.a('string');
                  expect(data.spatialTableRefkBackingField).to.be("");
                  expect(data.uniqueIDColumnkBackingField).to.be.a('string');
                  expect(data.uniqueIDColumnkBackingField).to.be("");
                  expect(data.proj4kBackingField).to.be.a('string');
                  expect(data.proj4kBackingField).to.be("");
                  expect(data.geometryTypekBackingField).to.be.a('number');
                  expect(data.geometryTypekBackingField).to.be(0);
                  expect(data.mapUseCountkBackingField).to.be.a('number');
                  expect(data.mapUseCountkBackingField).to.be(0);
                  expect(data.minXkBackingField).to.be.a('number');
                  expect(data.minXkBackingField).to.be(0.0);
                  expect(data.minYkBackingField).to.be.a('number');
                  expect(data.minYkBackingField).to.be(0.0);
                  expect(data.maxXkBackingField).to.be.a('number');
                  expect(data.maxXkBackingField).to.be(0.0);
                  expect(data.maxYkBackingField).to.be.a('number');
                  expect(data.maxYkBackingField).to.be(0.0);
                  expect(data.sridkBackingField).to.be.a('number');
                  expect(data.sridkBackingField).to.be(0);
                  expect(data.tiledkBackingField).to.be.a('boolean');
                  expect(data.tiledkBackingField).to.be(false);
                  expect(data.vectorQualityTypekBackingField).to.be.a('number');
                  expect(data.vectorQualityTypekBackingField).to.be(0);
                  expect(data.cacheEnabledkBackingField).to.be.a('boolean');
                  expect(data.cacheEnabledkBackingField).to.be(false);
                  expect(data.clusterMetadatakBackingField).to.be.a(CartoVistaserverapiv1.ClusterMetadataDTO);
                        expect(data.clusterMetadatakBackingField.clusterStatus).to.be.a('number');
                    expect(data.clusterMetadatakBackingField.clusterStatus).to.be(0);
                    expect(data.clusterMetadatakBackingField.featureGroupTableRef).to.be.a('string');
                    expect(data.clusterMetadatakBackingField.featureGroupTableRef).to.be("");
                    expect(data.clusterMetadatakBackingField.featureGroupXREFTableRef).to.be.a('string');
                    expect(data.clusterMetadatakBackingField.featureGroupXREFTableRef).to.be("");
                  expect(data.userFriendlyProjkBackingField).to.be.a('string');
                  expect(data.userFriendlyProjkBackingField).to.be("");
                  {
                    let dataCtr = data.permissionskBackingField;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(CartoVistaserverapiv1.PermissionPairComplexDTO);
                      expect(data.user).to.be.a(CartoVistaserverapiv1.SecurityIdentityDTO);
                            expect(data.user.isAnynomous).to.be.a('boolean');
                        expect(data.user.isAnynomous).to.be(false);
                        expect(data.user.displayName).to.be.a('string');
                        expect(data.user.displayName).to.be("");
                        expect(data.user.name).to.be.a('string');
                        expect(data.user.name).to.be("");
                        expect(data.user.id).to.be.a('string');
                        expect(data.user.id).to.be("");
                        expect(data.user.isGroup).to.be.a('boolean');
                        expect(data.user.isGroup).to.be(false);
                        expect(data.user.lastModificationTime).to.be.a(Date);
                        expect(data.user.lastModificationTime).to.be(new Date());
                        expect(data.user.creationTime).to.be.a(Date);
                        expect(data.user.creationTime).to.be(new Date());
                        expect(data.user.tenantId).to.be.a('string');
                        expect(data.user.tenantId).to.be("00000000-0000-0000-0000-000000000000");
                        expect(data.user.provider).to.be.a('string');
                        expect(data.user.provider).to.be("CartoVista");
                        expect(data.user.identifier).to.be.a('string');
                        expect(data.user.identifier).to.be("");
                        expect(data.user.providerStatus).to.be.a('string');
                        expect(data.user.providerStatus).to.be("Available");
                        expect(data.user.path).to.be.a('string');
                        expect(data.user.path).to.be("");
                        {
                          let dataCtr = data.user.permissions;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.user.secureObjectPermissions;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(CartoVistaserverapiv1.PermissionPairDTO);
                            expect(data.permissionName).to.be.a('string');
                            expect(data.permissionName).to.be("");
                            expect(data.secureObjectId).to.be.a('string');
                            expect(data.secureObjectId).to.be("");
                            expect(data.userId).to.be.a('string');
                            expect(data.userId).to.be("");
            
                                  }
                        }
                      expect(data.permissionName).to.be.a('string');
                      expect(data.permissionName).to.be("");
                      expect(data.secureObjectGuid).to.be.a('string');
                      expect(data.secureObjectGuid).to.be("00000000-0000-0000-0000-000000000000");
      
                            }
                  }
                  expect(data.publicAccesskBackingField).to.be.a('boolean');
                  expect(data.publicAccesskBackingField).to.be(false);
                  expect(data.identifierkBackingField).to.be.a('string');
                  expect(data.identifierkBackingField).to.be("");
                  expect(data.pathkBackingField).to.be.a('string');
                  expect(data.pathkBackingField).to.be("");
                  expect(data.metadatakBackingField).to.be.a('string');
                  expect(data.metadatakBackingField).to.be("");
                  expect(data.descriptionkBackingField).to.be.a('string');
                  expect(data.descriptionkBackingField).to.be("");
                  expect(data.isUsedByTerritoryManagerkBackingField).to.be.a('boolean');
                  expect(data.isUsedByTerritoryManagerkBackingField).to.be(false);
                  expect(data.serverViewCountkBackingField).to.be.a('number');
                  expect(data.serverViewCountkBackingField).to.be(0);
                  expect(data.statuskBackingField).to.be.a('string');
                  expect(data.statuskBackingField).to.be("READY");
                  expect(data.recordCountkBackingField).to.be.a('number');
                  expect(data.recordCountkBackingField).to.be(0);
                  expect(data.idkBackingField).to.be.a('string');
                  expect(data.idkBackingField).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.namekBackingField).to.be.a('string');
                  expect(data.namekBackingField).to.be("");
                  expect(data.ownerNamekBackingField).to.be.a('string');
                  expect(data.ownerNamekBackingField).to.be("");
                  expect(data.creationTimekBackingField).to.be.a(Date);
                  expect(data.creationTimekBackingField).to.be(new Date());
                  expect(data.modifiedTimekBackingField).to.be.a(Date);
                  expect(data.modifiedTimekBackingField).to.be(new Date());
                  expect(data.folderIdkBackingField).to.be.a('string');
                  expect(data.folderIdkBackingField).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.currentUserHasModifyPermissionkBackingField).to.be.a('boolean');
                  expect(data.currentUserHasModifyPermissionkBackingField).to.be(false);
  
                        }
              }
              expect(data.publicAccess).to.be.a('boolean');
              expect(data.publicAccess).to.be(false);
              expect(data.customViewer).to.be.a('boolean');
              expect(data.customViewer).to.be(false);
              expect(data.originalMapPackageTimestamp).to.be.a(Date);
              expect(data.originalMapPackageTimestamp).to.be(new Date());
              expect(data.isMapTerritoryReady).to.be.a('boolean');
              expect(data.isMapTerritoryReady).to.be(false);
              expect(data.thumbnailVersion).to.be.a('string');
              expect(data.thumbnailVersion).to.be("");
              expect(data.folderId).to.be.a('string');
              expect(data.folderId).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.path).to.be.a('string');
              expect(data.path).to.be("");
              expect(data.editable).to.be.a('boolean');
              expect(data.editable).to.be(false);
              expect(data.seoTitle).to.be.a('string');
              expect(data.seoTitle).to.be("");
              expect(data.seoDescription).to.be.a('string');
              expect(data.seoDescription).to.be("");
              expect(data.seoCustomHTML).to.be.a('string');
              expect(data.seoCustomHTML).to.be("");
              expect(data.scoringEnabled).to.be.a('boolean');
              expect(data.scoringEnabled).to.be(false);
              expect(data.storagePath).to.be.a('string');
              expect(data.storagePath).to.be("");
              expect(data.dynamicThumbnailURL).to.be.a('string');
              expect(data.dynamicThumbnailURL).to.be("");
              expect(data.modifiedThumbnail).to.be.a(Blob);
              expect(data.modifiedThumbnail).to.be(""undefined);
              expect(data.mapUrl).to.be.a('string');
              expect(data.mapUrl).to.be("");
              expect(data.languageDescription).to.be.a('string');
              expect(data.languageDescription).to.be("");
              expect(data.creationTime).to.be.a(Date);
              expect(data.creationTime).to.be(new Date());
              expect(data.lastModifiedAuthor).to.be.a('string');
              expect(data.lastModifiedAuthor).to.be("");
              expect(data.lastModifiedTime).to.be.a(Date);
              expect(data.lastModifiedTime).to.be(new Date());
              {
                let dataCtr = data.keywords;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CartoVistaserverapiv1.KeywordDTO);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.keyword).to.be.a('string');
                  expect(data.keyword).to.be("");
  
                        }
              }
              expect(data.ownerName).to.be.a('string');
              expect(data.ownerName).to.be("");
              {
                let dataCtr = data.permissions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CartoVistaserverapiv1.PermissionPairComplexDTO);
                  expect(data.user).to.be.a(CartoVistaserverapiv1.SecurityIdentityDTO);
                        expect(data.user.isAnynomous).to.be.a('boolean');
                    expect(data.user.isAnynomous).to.be(false);
                    expect(data.user.displayName).to.be.a('string');
                    expect(data.user.displayName).to.be("");
                    expect(data.user.name).to.be.a('string');
                    expect(data.user.name).to.be("");
                    expect(data.user.id).to.be.a('string');
                    expect(data.user.id).to.be("");
                    expect(data.user.isGroup).to.be.a('boolean');
                    expect(data.user.isGroup).to.be(false);
                    expect(data.user.lastModificationTime).to.be.a(Date);
                    expect(data.user.lastModificationTime).to.be(new Date());
                    expect(data.user.creationTime).to.be.a(Date);
                    expect(data.user.creationTime).to.be(new Date());
                    expect(data.user.tenantId).to.be.a('string');
                    expect(data.user.tenantId).to.be("00000000-0000-0000-0000-000000000000");
                    expect(data.user.provider).to.be.a('string');
                    expect(data.user.provider).to.be("CartoVista");
                    expect(data.user.identifier).to.be.a('string');
                    expect(data.user.identifier).to.be("");
                    expect(data.user.providerStatus).to.be.a('string');
                    expect(data.user.providerStatus).to.be("Available");
                    expect(data.user.path).to.be.a('string');
                    expect(data.user.path).to.be("");
                    {
                      let dataCtr = data.user.permissions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.user.secureObjectPermissions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(CartoVistaserverapiv1.PermissionPairDTO);
                        expect(data.permissionName).to.be.a('string');
                        expect(data.permissionName).to.be("");
                        expect(data.secureObjectId).to.be.a('string');
                        expect(data.secureObjectId).to.be("");
                        expect(data.userId).to.be.a('string');
                        expect(data.userId).to.be("");
        
                              }
                    }
                  expect(data.permissionName).to.be.a('string');
                  expect(data.permissionName).to.be("");
                  expect(data.secureObjectGuid).to.be.a('string');
                  expect(data.secureObjectGuid).to.be("00000000-0000-0000-0000-000000000000");
  
                        }
              }
              expect(data.currentUserHasModifyPermission).to.be.a('boolean');
              expect(data.currentUserHasModifyPermission).to.be(false);
              expect(data.representationUseCount).to.be.a('number');
              expect(data.representationUseCount).to.be(0);
              expect(data.webApplicationPath).to.be.a('string');
              expect(data.webApplicationPath).to.be("");
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerRender', function() {
        it('should call gridLayerRender successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerRender call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var gridSourceId = "gridSourceId_example";
          var param = new CartoVistaserverapiv1.GridSourceRenderParameter();
          param.extent = [0.0];
          param.width = 0;
          param.height = 0;
          param.isLinearRender = false;
          param.styles = [new CartoVistaserverapiv1.GridSourceRenderStyleParameter()];
          param.styles[0].value = 0.0;
          param.styles[0].min = 0.0;
          param.styles[0].max = 0.0;
          param.styles[0].color = "";

          instance.gridLayerRender(gridLayerId, gridSourceId, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerUpdateGridLayer', function() {
        it('should call gridLayerUpdateGridLayer successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerUpdateGridLayer call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var updateParameters = new CartoVistaserverapiv1.GridLayerUpdateParameters();
          updateParameters.uniqueIdentifier = "";
          updateParameters.name = "";
          updateParameters.description = "";
          updateParameters.metadata = "";
          updateParameters.units = "";
          updateParameters.precision = 0;

          instance.gridLayerUpdateGridLayer(gridLayerId, updateParameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridLayer);
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.proj4).to.be.a('string');
            expect(data.proj4).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.gridSourceCount).to.be.a('number');
            expect(data.gridSourceCount).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerUpdateGridSource', function() {
        it('should call gridLayerUpdateGridSource successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerUpdateGridSource call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var gridSourceId = "gridSourceId_example";
          var updateParameters = new CartoVistaserverapiv1.GridSourceUpdateParameters();
          updateParameters.uniqueIdentifier = "";
          updateParameters.name = "";
          updateParameters.description = "";
          updateParameters.timestamp = new Date();
          updateParameters.noDataEnabled = false;
          updateParameters.noDataValue = "";

          instance.gridLayerUpdateGridSource(gridLayerId, gridSourceId, updateParameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.gridLayerId).to.be.a('string');
            expect(data.gridLayerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.fileMetadata).to.be.a('string');
            expect(data.fileMetadata).to.be("");
            expect(data.bandMetadata).to.be.a('string');
            expect(data.bandMetadata).to.be("");
            expect(data.band).to.be.a('number');
            expect(data.band).to.be(0);
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.noDataEnabled).to.be.a('boolean');
            expect(data.noDataEnabled).to.be(false);
            expect(data.noDataValue).to.be.a('string');
            expect(data.noDataValue).to.be("");
            expect(data.minValue).to.be.a('number');
            expect(data.minValue).to.be(0.0);
            expect(data.maxValue).to.be.a('number');
            expect(data.maxValue).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gridLayerUpdateGridSourceGeotiff', function() {
        it('should call gridLayerUpdateGridSourceGeotiff successfully', function(done) {
          // TODO: uncomment, update parameter values for gridLayerUpdateGridSourceGeotiff call and complete the assertions
          /*
          var gridLayerId = "gridLayerId_example";
          var gridSourceId = "gridSourceId_example";
          var bandNumber = 56;
          var file = "/path/to/file.txt";

          instance.gridLayerUpdateGridSourceGeotiff(gridLayerId, gridSourceId, bandNumber, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.GridSource);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.gridLayerId).to.be.a('string');
            expect(data.gridLayerId).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.fileMetadata).to.be.a('string');
            expect(data.fileMetadata).to.be("");
            expect(data.bandMetadata).to.be.a('string');
            expect(data.bandMetadata).to.be("");
            expect(data.band).to.be.a('number');
            expect(data.band).to.be(0);
            expect(data.creationTime).to.be.a(Date);
            expect(data.creationTime).to.be(new Date());
            expect(data.modifiedTime).to.be.a(Date);
            expect(data.modifiedTime).to.be(new Date());
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.noDataEnabled).to.be.a('boolean');
            expect(data.noDataEnabled).to.be(false);
            expect(data.noDataValue).to.be.a('string');
            expect(data.noDataValue).to.be("");
            expect(data.minValue).to.be.a('number');
            expect(data.minValue).to.be(0.0);
            expect(data.maxValue).to.be.a('number');
            expect(data.maxValue).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

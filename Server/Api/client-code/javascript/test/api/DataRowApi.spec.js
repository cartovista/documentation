/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.DataRowApi();
  });

  describe('(package)', function() {
    describe('DataRowApi', function() {
      describe('dataRowCreateDataRows', function() {
        it('should call dataRowCreateDataRows successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowCreateDataRows call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var param = [new CartoVistaserverapiv1.DataRowCreateParameter()];
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];

          instance.dataRowCreateDataRows(dataTableIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataRowCreateUpdateDataRows', function() {
        it('should call dataRowCreateUpdateDataRows successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowCreateUpdateDataRows call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var param = [new CartoVistaserverapiv1.DataRowCreateParameter()];
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];

          instance.dataRowCreateUpdateDataRows(dataTableIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiCreateUpdateReport);
            expect(data.updateCount).to.be.a('number');
            expect(data.updateCount).to.be(0);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataRowDeleteDatarow', function() {
        it('should call dataRowDeleteDatarow successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowDeleteDatarow call
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataRowIdentifier = "dataRowIdentifier_example";

          instance.dataRowDeleteDatarow(dataTableIdentifier, dataRowIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataRowDeleteDatarows', function() {
        it('should call dataRowDeleteDatarows successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowDeleteDatarows call
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataRowIdentifiers = [new CartoVistaserverapiv1.[String]()];

          instance.dataRowDeleteDatarows(dataTableIdentifier, dataRowIdentifiers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataRowGetDataRow', function() {
        it('should call dataRowGetDataRow successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowGetDataRow call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataRowIdentifier = "dataRowIdentifier_example";

          instance.dataRowGetDataRow(dataTableIdentifier, dataRowIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataRow);
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataRowGetDataRows', function() {
        it('should call dataRowGetDataRows successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowGetDataRows call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var param = new CartoVistaserverapiv1.DataRowsGetParameters();
          param.startAt = 0;
          param.rowCount = 0;

          instance.dataRowGetDataRows(dataTableIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.DataRow);
              expect(data.identifier).to.be.a('string');
              expect(data.identifier).to.be("");
              {
                let dataCtr = data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              {
                let dataCtr = data.dataColumnsIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dataColumnsSystemIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("00000000-0000-0000-0000-000000000000");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataRowUpdateDataRow', function() {
        it('should call dataRowUpdateDataRow successfully', function(done) {
          // TODO: uncomment, update parameter values for dataRowUpdateDataRow call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataRowIdentifier = "dataRowIdentifier_example";
          var param = new CartoVistaserverapiv1.DataRowUpdateParameter();
          param.dataColumnsIdentifiers = [""];
          param.values = [];

          instance.dataRowUpdateDataRow(dataTableIdentifier, dataRowIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataRow);
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

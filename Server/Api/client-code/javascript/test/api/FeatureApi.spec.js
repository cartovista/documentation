/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.FeatureApi();
  });

  describe('(package)', function() {
    describe('FeatureApi', function() {
      describe('featureCreateFeaturesFromGeoJSON', function() {
        it('should call featureCreateFeaturesFromGeoJSON successfully', function(done) {
          // TODO: uncomment, update parameter values for featureCreateFeaturesFromGeoJSON call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = [new CartoVistaserverapiv1.FeatureGeoJSONCreateParameter()];
          param[0].geoJSON = "";
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];
          param[0].proj4 = "";

          instance.featureCreateFeaturesFromGeoJSON(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureCreateFeaturesFromLongLat', function() {
        it('should call featureCreateFeaturesFromLongLat successfully', function(done) {
          // TODO: uncomment, update parameter values for featureCreateFeaturesFromLongLat call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = [new CartoVistaserverapiv1.FeatureLongLatCreateParameter()];
          param[0].longitude = 0.0;
          param[0].latitude = 0.0;
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];
          param[0].proj4 = "";

          instance.featureCreateFeaturesFromLongLat(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureCreateFeaturesFromWKT', function() {
        it('should call featureCreateFeaturesFromWKT successfully', function(done) {
          // TODO: uncomment, update parameter values for featureCreateFeaturesFromWKT call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = [new CartoVistaserverapiv1.FeatureWKTCreateParameter()];
          param[0].WKT = "";
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];
          param[0].proj4 = "";

          instance.featureCreateFeaturesFromWKT(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureCreateUpdateFeaturesFromGeoJSON', function() {
        it('should call featureCreateUpdateFeaturesFromGeoJSON successfully', function(done) {
          // TODO: uncomment, update parameter values for featureCreateUpdateFeaturesFromGeoJSON call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = [new CartoVistaserverapiv1.FeatureGeoJSONCreateParameter()];
          param[0].geoJSON = "";
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];
          param[0].proj4 = "";

          instance.featureCreateUpdateFeaturesFromGeoJSON(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureCreateUpdateFeaturesFromLongLat', function() {
        it('should call featureCreateUpdateFeaturesFromLongLat successfully', function(done) {
          // TODO: uncomment, update parameter values for featureCreateUpdateFeaturesFromLongLat call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = [new CartoVistaserverapiv1.FeatureLongLatCreateParameter()];
          param[0].longitude = 0.0;
          param[0].latitude = 0.0;
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];
          param[0].proj4 = "";

          instance.featureCreateUpdateFeaturesFromLongLat(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureCreateUpdateFeaturesFromWKT', function() {
        it('should call featureCreateUpdateFeaturesFromWKT successfully', function(done) {
          // TODO: uncomment, update parameter values for featureCreateUpdateFeaturesFromWKT call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = [new CartoVistaserverapiv1.FeatureWKTCreateParameter()];
          param[0].WKT = "";
          param[0].dataColumnsIdentifiers = [""];
          param[0].values = [];
          param[0].proj4 = "";

          instance.featureCreateUpdateFeaturesFromWKT(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiCreateUpdateReport);
            expect(data.updateCount).to.be.a('number');
            expect(data.updateCount).to.be(0);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureDeleteFeature', function() {
        it('should call featureDeleteFeature successfully', function(done) {
          // TODO: uncomment, update parameter values for featureDeleteFeature call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";

          instance.featureDeleteFeature(layerIdentifier, featureIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiDeleteReport);
            expect(data.deleteCount).to.be.a('number');
            expect(data.deleteCount).to.be(0);
            {
              let dataCtr = data.deletedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureDeleteFeatures', function() {
        it('should call featureDeleteFeatures successfully', function(done) {
          // TODO: uncomment, update parameter values for featureDeleteFeatures call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifiers = [new CartoVistaserverapiv1.[String]()];

          instance.featureDeleteFeatures(layerIdentifier, featureIdentifiers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiDeleteReport);
            expect(data.deleteCount).to.be.a('number');
            expect(data.deleteCount).to.be(0);
            {
              let dataCtr = data.deletedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeatureInGeoJSON', function() {
        it('should call featureGetFeatureInGeoJSON successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeatureInGeoJSON call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";

          instance.featureGetFeatureInGeoJSON(layerIdentifier, featureIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.FeatureGeoJSON);
            expect(data.geoJSON).to.be.a('string');
            expect(data.geoJSON).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeatureInLongLat', function() {
        it('should call featureGetFeatureInLongLat successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeatureInLongLat call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";

          instance.featureGetFeatureInLongLat(layerIdentifier, featureIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.FeatureLongLat);
            expect(data.longitude).to.be.a('number');
            expect(data.longitude).to.be(0.0);
            expect(data.latitude).to.be.a('number');
            expect(data.latitude).to.be(0.0);
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeatureInWKT', function() {
        it('should call featureGetFeatureInWKT successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeatureInWKT call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";

          instance.featureGetFeatureInWKT(layerIdentifier, featureIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.FeatureWKT);
            expect(data.WKT).to.be.a('string');
            expect(data.WKT).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeatures', function() {
        it('should call featureGetFeatures successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeatures call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = new CartoVistaserverapiv1.FeaturesGetParameters();
          param.startAt = 0;
          param.rowCount = 0;

          instance.featureGetFeatures(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.DataRow);
              expect(data.identifier).to.be.a('string');
              expect(data.identifier).to.be("");
              {
                let dataCtr = data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              {
                let dataCtr = data.dataColumnsIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dataColumnsSystemIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("00000000-0000-0000-0000-000000000000");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeaturesInGeoJSON', function() {
        it('should call featureGetFeaturesInGeoJSON successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeaturesInGeoJSON call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = new CartoVistaserverapiv1.FeaturesGetParameters();
          param.startAt = 0;
          param.rowCount = 0;

          instance.featureGetFeaturesInGeoJSON(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.FeatureGeoJSON);
              expect(data.geoJSON).to.be.a('string');
              expect(data.geoJSON).to.be("");
              expect(data.geometryType).to.be.a('string');
              expect(data.geometryType).to.be("");
              expect(data.identifier).to.be.a('string');
              expect(data.identifier).to.be("");
              {
                let dataCtr = data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              {
                let dataCtr = data.dataColumnsIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dataColumnsSystemIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("00000000-0000-0000-0000-000000000000");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeaturesInLongLat', function() {
        it('should call featureGetFeaturesInLongLat successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeaturesInLongLat call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = new CartoVistaserverapiv1.FeaturesGetParameters();
          param.startAt = 0;
          param.rowCount = 0;

          instance.featureGetFeaturesInLongLat(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.FeatureLongLat);
              expect(data.longitude).to.be.a('number');
              expect(data.longitude).to.be(0.0);
              expect(data.latitude).to.be.a('number');
              expect(data.latitude).to.be(0.0);
              expect(data.geometryType).to.be.a('string');
              expect(data.geometryType).to.be("");
              expect(data.identifier).to.be.a('string');
              expect(data.identifier).to.be("");
              {
                let dataCtr = data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              {
                let dataCtr = data.dataColumnsIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dataColumnsSystemIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("00000000-0000-0000-0000-000000000000");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureGetFeaturesInWKT', function() {
        it('should call featureGetFeaturesInWKT successfully', function(done) {
          // TODO: uncomment, update parameter values for featureGetFeaturesInWKT call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var param = new CartoVistaserverapiv1.FeaturesGetParameters();
          param.startAt = 0;
          param.rowCount = 0;

          instance.featureGetFeaturesInWKT(layerIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.FeatureWKT);
              expect(data.WKT).to.be.a('string');
              expect(data.WKT).to.be("");
              expect(data.geometryType).to.be.a('string');
              expect(data.geometryType).to.be("");
              expect(data.identifier).to.be.a('string');
              expect(data.identifier).to.be("");
              {
                let dataCtr = data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              {
                let dataCtr = data.dataColumnsIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dataColumnsSystemIdentifiers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("00000000-0000-0000-0000-000000000000");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureUpdateFromGeoJSON', function() {
        it('should call featureUpdateFromGeoJSON successfully', function(done) {
          // TODO: uncomment, update parameter values for featureUpdateFromGeoJSON call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";
          var param = new CartoVistaserverapiv1.FeatureGeoJSONUpdateParameter();
          param.geoJSON = "";
          param.proj4 = "";

          instance.featureUpdateFromGeoJSON(layerIdentifier, featureIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.FeatureGeoJSON);
            expect(data.geoJSON).to.be.a('string');
            expect(data.geoJSON).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureUpdateFromLongLat', function() {
        it('should call featureUpdateFromLongLat successfully', function(done) {
          // TODO: uncomment, update parameter values for featureUpdateFromLongLat call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";
          var param = new CartoVistaserverapiv1.FeatureLongLatUpdateParameter();
          param.longitude = 0.0;
          param.latitude = 0.0;
          param.proj4 = "";

          instance.featureUpdateFromLongLat(layerIdentifier, featureIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.FeatureLongLat);
            expect(data.longitude).to.be.a('number');
            expect(data.longitude).to.be(0.0);
            expect(data.latitude).to.be.a('number');
            expect(data.latitude).to.be(0.0);
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureUpdateGeometryFromWKT', function() {
        it('should call featureUpdateGeometryFromWKT successfully', function(done) {
          // TODO: uncomment, update parameter values for featureUpdateGeometryFromWKT call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";
          var param = new CartoVistaserverapiv1.FeatureWKTUpdateParameter();
          param.WKT = "";
          param.proj4 = "";

          instance.featureUpdateGeometryFromWKT(layerIdentifier, featureIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.FeatureWKT);
            expect(data.WKT).to.be.a('string');
            expect(data.WKT).to.be("");
            expect(data.geometryType).to.be.a('string');
            expect(data.geometryType).to.be("");
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('featureUpdateValues', function() {
        it('should call featureUpdateValues successfully', function(done) {
          // TODO: uncomment, update parameter values for featureUpdateValues call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var featureIdentifier = "featureIdentifier_example";
          var param = new CartoVistaserverapiv1.DataRowUpdateParameter();
          param.dataColumnsIdentifiers = [""];
          param.values = [];

          instance.featureUpdateValues(layerIdentifier, featureIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataRow);
            expect(data.identifier).to.be.a('string');
            expect(data.identifier).to.be("");
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.dataColumnsIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dataColumnsSystemIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("00000000-0000-0000-0000-000000000000");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

/*
 * CartoVista.Server.API.v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CartoVistaserverapiv1);
  }
}(this, function(expect, CartoVistaserverapiv1) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CartoVistaserverapiv1.DataColumnApi();
  });

  describe('(package)', function() {
    describe('DataColumnApi', function() {
      describe('dataColumnCreateDataTableDataColumns', function() {
        it('should call dataColumnCreateDataTableDataColumns successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnCreateDataTableDataColumns call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var parameters = [new CartoVistaserverapiv1.DataColumnCreateParameter()];
          parameters[0].identifier = "";
          parameters[0].cartoVistaDataType = "";
          parameters[0].name = "";
          parameters[0].description = "";
          parameters[0].metadata = "";
          parameters[0].units = "";
          parameters[0].aggregationType = "";
          parameters[0].mappable = false;
          parameters[0].precision = 0;
          parameters[0].roundToPrecision = false;
          parameters[0].timeStamp = ;
          parameters[0].timeStampAccuracy = ;
          parameters[0].notAvailableValues = false;
          parameters[0].valueToConvert = 0.0;
          parameters[0].systemIdentifier = "00000000-0000-0000-0000-000000000000";

          instance.dataColumnCreateDataTableDataColumns(dataTableIdentifier, parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnCreateLayerDataColumns', function() {
        it('should call dataColumnCreateLayerDataColumns successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnCreateLayerDataColumns call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var parameters = [new CartoVistaserverapiv1.DataColumnCreateParameter()];
          parameters[0].identifier = "";
          parameters[0].cartoVistaDataType = "";
          parameters[0].name = "";
          parameters[0].description = "";
          parameters[0].metadata = "";
          parameters[0].units = "";
          parameters[0].aggregationType = "";
          parameters[0].mappable = false;
          parameters[0].precision = 0;
          parameters[0].roundToPrecision = false;
          parameters[0].timeStamp = ;
          parameters[0].timeStampAccuracy = ;
          parameters[0].notAvailableValues = false;
          parameters[0].valueToConvert = 0.0;
          parameters[0].systemIdentifier = "00000000-0000-0000-0000-000000000000";

          instance.dataColumnCreateLayerDataColumns(layerIdentifier, parameters, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.ApiInsertReport);
            expect(data.createCount).to.be.a('number');
            expect(data.createCount).to.be(0);
            {
              let dataCtr = data.insertedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.updatedIdentifiers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.errorCount).to.be.a('number');
            expect(data.errorCount).to.be(0);
            {
              let dataCtr = data.errorDetails;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CartoVistaserverapiv1.ErrorDetail);
                expect(data.errorType).to.be.a('number');
                expect(data.errorType).to.be(0);
                expect(data.errorCode).to.be.a('string');
                expect(data.errorCode).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnDeleteDataTableDataColumn', function() {
        it('should call dataColumnDeleteDataTableDataColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnDeleteDataTableDataColumn call
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";

          instance.dataColumnDeleteDataTableDataColumn(dataTableIdentifier, dataColumnIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnDeleteLayerDataColumn', function() {
        it('should call dataColumnDeleteLayerDataColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnDeleteLayerDataColumn call
          /*
          var layerIdentifier = "layerIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";

          instance.dataColumnDeleteLayerDataColumn(layerIdentifier, dataColumnIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnGetDataTableDataColumn', function() {
        it('should call dataColumnGetDataTableDataColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnGetDataTableDataColumn call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";

          instance.dataColumnGetDataTableDataColumn(dataTableIdentifier, dataColumnIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.dataTableIdentifier).to.be.a('string');
            expect(data.dataTableIdentifier).to.be("");
            expect(data.cartoVistaDataType).to.be.a('string');
            expect(data.cartoVistaDataType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("");
            expect(data.mappable).to.be.a('boolean');
            expect(data.mappable).to.be(false);
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.roundToPrecision).to.be.a('boolean');
            expect(data.roundToPrecision).to.be(false);
            expect(data.timeStamp).to.be.a(Object);
            expect(data.timeStamp).to.be();
            expect(data.timeStampAccuracy).to.be.a(Object);
            expect(data.timeStampAccuracy).to.be();
            expect(data.notAvailableValues).to.be.a('boolean');
            expect(data.notAvailableValues).to.be(false);
            expect(data.valueToConvert).to.be.a('number');
            expect(data.valueToConvert).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnGetDataTableDataColumns', function() {
        it('should call dataColumnGetDataTableDataColumns successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnGetDataTableDataColumns call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";

          instance.dataColumnGetDataTableDataColumns(dataTableIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.dataTableIdentifier).to.be.a('string');
              expect(data.dataTableIdentifier).to.be("");
              expect(data.cartoVistaDataType).to.be.a('string');
              expect(data.cartoVistaDataType).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.units).to.be.a('string');
              expect(data.units).to.be("");
              expect(data.aggregationType).to.be.a('string');
              expect(data.aggregationType).to.be("");
              expect(data.mappable).to.be.a('boolean');
              expect(data.mappable).to.be(false);
              expect(data.precision).to.be.a('number');
              expect(data.precision).to.be(0);
              expect(data.roundToPrecision).to.be.a('boolean');
              expect(data.roundToPrecision).to.be(false);
              expect(data.timeStamp).to.be.a(Object);
              expect(data.timeStamp).to.be();
              expect(data.timeStampAccuracy).to.be.a(Object);
              expect(data.timeStampAccuracy).to.be();
              expect(data.notAvailableValues).to.be.a('boolean');
              expect(data.notAvailableValues).to.be(false);
              expect(data.valueToConvert).to.be.a('number');
              expect(data.valueToConvert).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnGetLayerDataColumn', function() {
        it('should call dataColumnGetLayerDataColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnGetLayerDataColumn call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";

          instance.dataColumnGetLayerDataColumn(layerIdentifier, dataColumnIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.dataTableIdentifier).to.be.a('string');
            expect(data.dataTableIdentifier).to.be("");
            expect(data.cartoVistaDataType).to.be.a('string');
            expect(data.cartoVistaDataType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("");
            expect(data.mappable).to.be.a('boolean');
            expect(data.mappable).to.be(false);
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.roundToPrecision).to.be.a('boolean');
            expect(data.roundToPrecision).to.be(false);
            expect(data.timeStamp).to.be.a(Object);
            expect(data.timeStamp).to.be();
            expect(data.timeStampAccuracy).to.be.a(Object);
            expect(data.timeStampAccuracy).to.be();
            expect(data.notAvailableValues).to.be.a('boolean');
            expect(data.notAvailableValues).to.be(false);
            expect(data.valueToConvert).to.be.a('number');
            expect(data.valueToConvert).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnGetLayerDataColumns', function() {
        it('should call dataColumnGetLayerDataColumns successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnGetLayerDataColumns call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";

          instance.dataColumnGetLayerDataColumns(layerIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
              expect(data.systemIdentifier).to.be.a('string');
              expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.uniqueIdentifier).to.be.a('string');
              expect(data.uniqueIdentifier).to.be("");
              expect(data.dataTableIdentifier).to.be.a('string');
              expect(data.dataTableIdentifier).to.be("");
              expect(data.cartoVistaDataType).to.be.a('string');
              expect(data.cartoVistaDataType).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.metadata).to.be.a('string');
              expect(data.metadata).to.be("");
              expect(data.units).to.be.a('string');
              expect(data.units).to.be("");
              expect(data.aggregationType).to.be.a('string');
              expect(data.aggregationType).to.be("");
              expect(data.mappable).to.be.a('boolean');
              expect(data.mappable).to.be(false);
              expect(data.precision).to.be.a('number');
              expect(data.precision).to.be(0);
              expect(data.roundToPrecision).to.be.a('boolean');
              expect(data.roundToPrecision).to.be(false);
              expect(data.timeStamp).to.be.a(Object);
              expect(data.timeStamp).to.be();
              expect(data.timeStampAccuracy).to.be.a(Object);
              expect(data.timeStampAccuracy).to.be();
              expect(data.notAvailableValues).to.be.a('boolean');
              expect(data.notAvailableValues).to.be(false);
              expect(data.valueToConvert).to.be.a('number');
              expect(data.valueToConvert).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnSetDataTableColumnUniqueIdentifier', function() {
        it('should call dataColumnSetDataTableColumnUniqueIdentifier successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnSetDataTableColumnUniqueIdentifier call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";
          var newIdentifier = "newIdentifier_example";

          instance.dataColumnSetDataTableColumnUniqueIdentifier(dataTableIdentifier, dataColumnIdentifier, newIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.dataTableIdentifier).to.be.a('string');
            expect(data.dataTableIdentifier).to.be("");
            expect(data.cartoVistaDataType).to.be.a('string');
            expect(data.cartoVistaDataType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("");
            expect(data.mappable).to.be.a('boolean');
            expect(data.mappable).to.be(false);
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.roundToPrecision).to.be.a('boolean');
            expect(data.roundToPrecision).to.be(false);
            expect(data.timeStamp).to.be.a(Object);
            expect(data.timeStamp).to.be();
            expect(data.timeStampAccuracy).to.be.a(Object);
            expect(data.timeStampAccuracy).to.be();
            expect(data.notAvailableValues).to.be.a('boolean');
            expect(data.notAvailableValues).to.be(false);
            expect(data.valueToConvert).to.be.a('number');
            expect(data.valueToConvert).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnSetLayerColumnUniqueIdentifier', function() {
        it('should call dataColumnSetLayerColumnUniqueIdentifier successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnSetLayerColumnUniqueIdentifier call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";
          var newIdentifier = "newIdentifier_example";

          instance.dataColumnSetLayerColumnUniqueIdentifier(layerIdentifier, dataColumnIdentifier, newIdentifier, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.dataTableIdentifier).to.be.a('string');
            expect(data.dataTableIdentifier).to.be("");
            expect(data.cartoVistaDataType).to.be.a('string');
            expect(data.cartoVistaDataType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("");
            expect(data.mappable).to.be.a('boolean');
            expect(data.mappable).to.be(false);
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.roundToPrecision).to.be.a('boolean');
            expect(data.roundToPrecision).to.be(false);
            expect(data.timeStamp).to.be.a(Object);
            expect(data.timeStamp).to.be();
            expect(data.timeStampAccuracy).to.be.a(Object);
            expect(data.timeStampAccuracy).to.be();
            expect(data.notAvailableValues).to.be.a('boolean');
            expect(data.notAvailableValues).to.be(false);
            expect(data.valueToConvert).to.be.a('number');
            expect(data.valueToConvert).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnUpdateDataTableDataColumn', function() {
        it('should call dataColumnUpdateDataTableDataColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnUpdateDataTableDataColumn call and complete the assertions
          /*
          var dataTableIdentifier = "dataTableIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";
          var param = new CartoVistaserverapiv1.DataColumnUpdateParameter();
          param.cartoVistaDataType = "";
          param.name = "";
          param.description = "";
          param.metadata = "";
          param.units = "";
          param.aggregationType = "";
          param.mappable = false;
          param.precision = 0;
          param.roundToPrecision = false;
          param.timeStamp = ;
          param.timeStampAccuracy = ;
          param.notAvailableValues = false;
          param.valueToConvert = 0.0;

          instance.dataColumnUpdateDataTableDataColumn(dataTableIdentifier, dataColumnIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.dataTableIdentifier).to.be.a('string');
            expect(data.dataTableIdentifier).to.be("");
            expect(data.cartoVistaDataType).to.be.a('string');
            expect(data.cartoVistaDataType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("");
            expect(data.mappable).to.be.a('boolean');
            expect(data.mappable).to.be(false);
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.roundToPrecision).to.be.a('boolean');
            expect(data.roundToPrecision).to.be(false);
            expect(data.timeStamp).to.be.a(Object);
            expect(data.timeStamp).to.be();
            expect(data.timeStampAccuracy).to.be.a(Object);
            expect(data.timeStampAccuracy).to.be();
            expect(data.notAvailableValues).to.be.a('boolean');
            expect(data.notAvailableValues).to.be(false);
            expect(data.valueToConvert).to.be.a('number');
            expect(data.valueToConvert).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('dataColumnUpdateLayerDataColumn', function() {
        it('should call dataColumnUpdateLayerDataColumn successfully', function(done) {
          // TODO: uncomment, update parameter values for dataColumnUpdateLayerDataColumn call and complete the assertions
          /*
          var layerIdentifier = "layerIdentifier_example";
          var dataColumnIdentifier = "dataColumnIdentifier_example";
          var param = new CartoVistaserverapiv1.DataColumnUpdateParameter();
          param.cartoVistaDataType = "";
          param.name = "";
          param.description = "";
          param.metadata = "";
          param.units = "";
          param.aggregationType = "";
          param.mappable = false;
          param.precision = 0;
          param.roundToPrecision = false;
          param.timeStamp = ;
          param.timeStampAccuracy = ;
          param.notAvailableValues = false;
          param.valueToConvert = 0.0;

          instance.dataColumnUpdateLayerDataColumn(layerIdentifier, dataColumnIdentifier, param, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CartoVistaserverapiv1.DataColumn);
            expect(data.systemIdentifier).to.be.a('string');
            expect(data.systemIdentifier).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.uniqueIdentifier).to.be.a('string');
            expect(data.uniqueIdentifier).to.be("");
            expect(data.dataTableIdentifier).to.be.a('string');
            expect(data.dataTableIdentifier).to.be("");
            expect(data.cartoVistaDataType).to.be.a('string');
            expect(data.cartoVistaDataType).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.metadata).to.be.a('string');
            expect(data.metadata).to.be("");
            expect(data.units).to.be.a('string');
            expect(data.units).to.be("");
            expect(data.aggregationType).to.be.a('string');
            expect(data.aggregationType).to.be("");
            expect(data.mappable).to.be.a('boolean');
            expect(data.mappable).to.be(false);
            expect(data.precision).to.be.a('number');
            expect(data.precision).to.be(0);
            expect(data.roundToPrecision).to.be.a('boolean');
            expect(data.roundToPrecision).to.be(false);
            expect(data.timeStamp).to.be.a(Object);
            expect(data.timeStamp).to.be();
            expect(data.timeStampAccuracy).to.be.a(Object);
            expect(data.timeStampAccuracy).to.be();
            expect(data.notAvailableValues).to.be.a('boolean');
            expect(data.notAvailableValues).to.be(false);
            expect(data.valueToConvert).to.be.a('number');
            expect(data.valueToConvert).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

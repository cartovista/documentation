# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GridSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'grid_layer_id': 'str',
        'unique_identifier': 'str',
        'name': 'str',
        'description': 'str',
        'file_metadata': 'str',
        'band_metadata': 'str',
        'band': 'int',
        'creation_time': 'datetime',
        'modified_time': 'datetime',
        'timestamp': 'datetime',
        'no_data_enabled': 'bool',
        'no_data_value': 'str',
        'min_value': 'float',
        'max_value': 'float'
    }

    attribute_map = {
        'id': 'id',
        'grid_layer_id': 'gridLayerId',
        'unique_identifier': 'uniqueIdentifier',
        'name': 'name',
        'description': 'description',
        'file_metadata': 'fileMetadata',
        'band_metadata': 'bandMetadata',
        'band': 'band',
        'creation_time': 'creationTime',
        'modified_time': 'modifiedTime',
        'timestamp': 'timestamp',
        'no_data_enabled': 'noDataEnabled',
        'no_data_value': 'noDataValue',
        'min_value': 'minValue',
        'max_value': 'maxValue'
    }

    def __init__(self, id=None, grid_layer_id=None, unique_identifier=None, name=None, description=None, file_metadata=None, band_metadata=None, band=None, creation_time=None, modified_time=None, timestamp=None, no_data_enabled=None, no_data_value=None, min_value=None, max_value=None):  # noqa: E501
        """GridSource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._grid_layer_id = None
        self._unique_identifier = None
        self._name = None
        self._description = None
        self._file_metadata = None
        self._band_metadata = None
        self._band = None
        self._creation_time = None
        self._modified_time = None
        self._timestamp = None
        self._no_data_enabled = None
        self._no_data_value = None
        self._min_value = None
        self._max_value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if grid_layer_id is not None:
            self.grid_layer_id = grid_layer_id
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if file_metadata is not None:
            self.file_metadata = file_metadata
        if band_metadata is not None:
            self.band_metadata = band_metadata
        if band is not None:
            self.band = band
        if creation_time is not None:
            self.creation_time = creation_time
        if modified_time is not None:
            self.modified_time = modified_time
        if timestamp is not None:
            self.timestamp = timestamp
        if no_data_enabled is not None:
            self.no_data_enabled = no_data_enabled
        if no_data_value is not None:
            self.no_data_value = no_data_value
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value

    @property
    def id(self):
        """Gets the id of this GridSource.  # noqa: E501


        :return: The id of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GridSource.


        :param id: The id of this GridSource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def grid_layer_id(self):
        """Gets the grid_layer_id of this GridSource.  # noqa: E501


        :return: The grid_layer_id of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._grid_layer_id

    @grid_layer_id.setter
    def grid_layer_id(self, grid_layer_id):
        """Sets the grid_layer_id of this GridSource.


        :param grid_layer_id: The grid_layer_id of this GridSource.  # noqa: E501
        :type: str
        """

        self._grid_layer_id = grid_layer_id

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this GridSource.  # noqa: E501


        :return: The unique_identifier of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this GridSource.


        :param unique_identifier: The unique_identifier of this GridSource.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def name(self):
        """Gets the name of this GridSource.  # noqa: E501


        :return: The name of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GridSource.


        :param name: The name of this GridSource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GridSource.  # noqa: E501


        :return: The description of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GridSource.


        :param description: The description of this GridSource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_metadata(self):
        """Gets the file_metadata of this GridSource.  # noqa: E501


        :return: The file_metadata of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._file_metadata

    @file_metadata.setter
    def file_metadata(self, file_metadata):
        """Sets the file_metadata of this GridSource.


        :param file_metadata: The file_metadata of this GridSource.  # noqa: E501
        :type: str
        """

        self._file_metadata = file_metadata

    @property
    def band_metadata(self):
        """Gets the band_metadata of this GridSource.  # noqa: E501


        :return: The band_metadata of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._band_metadata

    @band_metadata.setter
    def band_metadata(self, band_metadata):
        """Sets the band_metadata of this GridSource.


        :param band_metadata: The band_metadata of this GridSource.  # noqa: E501
        :type: str
        """

        self._band_metadata = band_metadata

    @property
    def band(self):
        """Gets the band of this GridSource.  # noqa: E501


        :return: The band of this GridSource.  # noqa: E501
        :rtype: int
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this GridSource.


        :param band: The band of this GridSource.  # noqa: E501
        :type: int
        """

        self._band = band

    @property
    def creation_time(self):
        """Gets the creation_time of this GridSource.  # noqa: E501


        :return: The creation_time of this GridSource.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GridSource.


        :param creation_time: The creation_time of this GridSource.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def modified_time(self):
        """Gets the modified_time of this GridSource.  # noqa: E501


        :return: The modified_time of this GridSource.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this GridSource.


        :param modified_time: The modified_time of this GridSource.  # noqa: E501
        :type: datetime
        """

        self._modified_time = modified_time

    @property
    def timestamp(self):
        """Gets the timestamp of this GridSource.  # noqa: E501


        :return: The timestamp of this GridSource.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GridSource.


        :param timestamp: The timestamp of this GridSource.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def no_data_enabled(self):
        """Gets the no_data_enabled of this GridSource.  # noqa: E501


        :return: The no_data_enabled of this GridSource.  # noqa: E501
        :rtype: bool
        """
        return self._no_data_enabled

    @no_data_enabled.setter
    def no_data_enabled(self, no_data_enabled):
        """Sets the no_data_enabled of this GridSource.


        :param no_data_enabled: The no_data_enabled of this GridSource.  # noqa: E501
        :type: bool
        """

        self._no_data_enabled = no_data_enabled

    @property
    def no_data_value(self):
        """Gets the no_data_value of this GridSource.  # noqa: E501


        :return: The no_data_value of this GridSource.  # noqa: E501
        :rtype: str
        """
        return self._no_data_value

    @no_data_value.setter
    def no_data_value(self, no_data_value):
        """Sets the no_data_value of this GridSource.


        :param no_data_value: The no_data_value of this GridSource.  # noqa: E501
        :type: str
        """

        self._no_data_value = no_data_value

    @property
    def min_value(self):
        """Gets the min_value of this GridSource.  # noqa: E501


        :return: The min_value of this GridSource.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this GridSource.


        :param min_value: The min_value of this GridSource.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this GridSource.  # noqa: E501


        :return: The max_value of this GridSource.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this GridSource.


        :param max_value: The max_value of this GridSource.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

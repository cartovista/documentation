# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpatialMetadataDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_table_idk__backing_field': 'str',
        'data_table_linking_column_idk__backing_field': 'str',
        'is_unique_column_setk__backing_field': 'bool',
        'spatial_source_columnk__backing_field': 'str',
        'spatial_table_refk__backing_field': 'str',
        'unique_id_columnk__backing_field': 'str',
        'proj4k__backing_field': 'str',
        'geometry_typek__backing_field': 'int',
        'map_use_countk__backing_field': 'int',
        'min_xk__backing_field': 'float',
        'min_yk__backing_field': 'float',
        'max_xk__backing_field': 'float',
        'max_yk__backing_field': 'float',
        'sridk__backing_field': 'int',
        'tiledk__backing_field': 'bool',
        'vector_quality_typek__backing_field': 'int',
        'cache_enabledk__backing_field': 'bool',
        'cluster_metadatak__backing_field': 'ClusterMetadataDTO',
        'user_friendly_projk__backing_field': 'str',
        'permissionsk__backing_field': 'list[PermissionPairComplexDTO]',
        'public_accessk__backing_field': 'bool',
        'identifierk__backing_field': 'str',
        'pathk__backing_field': 'str',
        'metadatak__backing_field': 'str',
        'descriptionk__backing_field': 'str',
        'is_used_by_territory_managerk__backing_field': 'bool',
        'server_view_countk__backing_field': 'int',
        'statusk__backing_field': 'str',
        'record_countk__backing_field': 'int',
        'idk__backing_field': 'str',
        'namek__backing_field': 'str',
        'owner_namek__backing_field': 'str',
        'creation_timek__backing_field': 'datetime',
        'modified_timek__backing_field': 'datetime',
        'folder_idk__backing_field': 'str',
        'current_user_has_modify_permissionk__backing_field': 'bool'
    }

    attribute_map = {
        'data_table_idk__backing_field': '&lt;DataTableId&gt;k__BackingField',
        'data_table_linking_column_idk__backing_field': '&lt;DataTableLinkingColumnId&gt;k__BackingField',
        'is_unique_column_setk__backing_field': '&lt;IsUniqueColumnSet&gt;k__BackingField',
        'spatial_source_columnk__backing_field': '&lt;SpatialSourceColumn&gt;k__BackingField',
        'spatial_table_refk__backing_field': '&lt;SpatialTableRef&gt;k__BackingField',
        'unique_id_columnk__backing_field': '&lt;UniqueIDColumn&gt;k__BackingField',
        'proj4k__backing_field': '&lt;proj4&gt;k__BackingField',
        'geometry_typek__backing_field': '&lt;geometryType&gt;k__BackingField',
        'map_use_countk__backing_field': '&lt;MapUseCount&gt;k__BackingField',
        'min_xk__backing_field': '&lt;minX&gt;k__BackingField',
        'min_yk__backing_field': '&lt;minY&gt;k__BackingField',
        'max_xk__backing_field': '&lt;maxX&gt;k__BackingField',
        'max_yk__backing_field': '&lt;maxY&gt;k__BackingField',
        'sridk__backing_field': '&lt;srid&gt;k__BackingField',
        'tiledk__backing_field': '&lt;tiled&gt;k__BackingField',
        'vector_quality_typek__backing_field': '&lt;vectorQualityType&gt;k__BackingField',
        'cache_enabledk__backing_field': '&lt;cacheEnabled&gt;k__BackingField',
        'cluster_metadatak__backing_field': '&lt;ClusterMetadata&gt;k__BackingField',
        'user_friendly_projk__backing_field': '&lt;UserFriendlyProj&gt;k__BackingField',
        'permissionsk__backing_field': '&lt;Permissions&gt;k__BackingField',
        'public_accessk__backing_field': '&lt;PublicAccess&gt;k__BackingField',
        'identifierk__backing_field': '&lt;Identifier&gt;k__BackingField',
        'pathk__backing_field': '&lt;Path&gt;k__BackingField',
        'metadatak__backing_field': '&lt;Metadata&gt;k__BackingField',
        'descriptionk__backing_field': '&lt;Description&gt;k__BackingField',
        'is_used_by_territory_managerk__backing_field': '&lt;IsUsedByTerritoryManager&gt;k__BackingField',
        'server_view_countk__backing_field': '&lt;ServerViewCount&gt;k__BackingField',
        'statusk__backing_field': '&lt;Status&gt;k__BackingField',
        'record_countk__backing_field': '&lt;RecordCount&gt;k__BackingField',
        'idk__backing_field': '&lt;Id&gt;k__BackingField',
        'namek__backing_field': '&lt;Name&gt;k__BackingField',
        'owner_namek__backing_field': '&lt;OwnerName&gt;k__BackingField',
        'creation_timek__backing_field': '&lt;CreationTime&gt;k__BackingField',
        'modified_timek__backing_field': '&lt;ModifiedTime&gt;k__BackingField',
        'folder_idk__backing_field': '&lt;FolderId&gt;k__BackingField',
        'current_user_has_modify_permissionk__backing_field': '&lt;CurrentUserHasModifyPermission&gt;k__BackingField'
    }

    def __init__(self, data_table_idk__backing_field=None, data_table_linking_column_idk__backing_field=None, is_unique_column_setk__backing_field=None, spatial_source_columnk__backing_field=None, spatial_table_refk__backing_field=None, unique_id_columnk__backing_field=None, proj4k__backing_field=None, geometry_typek__backing_field=None, map_use_countk__backing_field=None, min_xk__backing_field=None, min_yk__backing_field=None, max_xk__backing_field=None, max_yk__backing_field=None, sridk__backing_field=None, tiledk__backing_field=None, vector_quality_typek__backing_field=None, cache_enabledk__backing_field=None, cluster_metadatak__backing_field=None, user_friendly_projk__backing_field=None, permissionsk__backing_field=None, public_accessk__backing_field=None, identifierk__backing_field=None, pathk__backing_field=None, metadatak__backing_field=None, descriptionk__backing_field=None, is_used_by_territory_managerk__backing_field=None, server_view_countk__backing_field=None, statusk__backing_field=None, record_countk__backing_field=None, idk__backing_field=None, namek__backing_field=None, owner_namek__backing_field=None, creation_timek__backing_field=None, modified_timek__backing_field=None, folder_idk__backing_field=None, current_user_has_modify_permissionk__backing_field=None):  # noqa: E501
        """SpatialMetadataDTO - a model defined in Swagger"""  # noqa: E501

        self._data_table_idk__backing_field = None
        self._data_table_linking_column_idk__backing_field = None
        self._is_unique_column_setk__backing_field = None
        self._spatial_source_columnk__backing_field = None
        self._spatial_table_refk__backing_field = None
        self._unique_id_columnk__backing_field = None
        self._proj4k__backing_field = None
        self._geometry_typek__backing_field = None
        self._map_use_countk__backing_field = None
        self._min_xk__backing_field = None
        self._min_yk__backing_field = None
        self._max_xk__backing_field = None
        self._max_yk__backing_field = None
        self._sridk__backing_field = None
        self._tiledk__backing_field = None
        self._vector_quality_typek__backing_field = None
        self._cache_enabledk__backing_field = None
        self._cluster_metadatak__backing_field = None
        self._user_friendly_projk__backing_field = None
        self._permissionsk__backing_field = None
        self._public_accessk__backing_field = None
        self._identifierk__backing_field = None
        self._pathk__backing_field = None
        self._metadatak__backing_field = None
        self._descriptionk__backing_field = None
        self._is_used_by_territory_managerk__backing_field = None
        self._server_view_countk__backing_field = None
        self._statusk__backing_field = None
        self._record_countk__backing_field = None
        self._idk__backing_field = None
        self._namek__backing_field = None
        self._owner_namek__backing_field = None
        self._creation_timek__backing_field = None
        self._modified_timek__backing_field = None
        self._folder_idk__backing_field = None
        self._current_user_has_modify_permissionk__backing_field = None
        self.discriminator = None

        if data_table_idk__backing_field is not None:
            self.data_table_idk__backing_field = data_table_idk__backing_field
        if data_table_linking_column_idk__backing_field is not None:
            self.data_table_linking_column_idk__backing_field = data_table_linking_column_idk__backing_field
        if is_unique_column_setk__backing_field is not None:
            self.is_unique_column_setk__backing_field = is_unique_column_setk__backing_field
        if spatial_source_columnk__backing_field is not None:
            self.spatial_source_columnk__backing_field = spatial_source_columnk__backing_field
        if spatial_table_refk__backing_field is not None:
            self.spatial_table_refk__backing_field = spatial_table_refk__backing_field
        if unique_id_columnk__backing_field is not None:
            self.unique_id_columnk__backing_field = unique_id_columnk__backing_field
        if proj4k__backing_field is not None:
            self.proj4k__backing_field = proj4k__backing_field
        if geometry_typek__backing_field is not None:
            self.geometry_typek__backing_field = geometry_typek__backing_field
        if map_use_countk__backing_field is not None:
            self.map_use_countk__backing_field = map_use_countk__backing_field
        if min_xk__backing_field is not None:
            self.min_xk__backing_field = min_xk__backing_field
        if min_yk__backing_field is not None:
            self.min_yk__backing_field = min_yk__backing_field
        if max_xk__backing_field is not None:
            self.max_xk__backing_field = max_xk__backing_field
        if max_yk__backing_field is not None:
            self.max_yk__backing_field = max_yk__backing_field
        if sridk__backing_field is not None:
            self.sridk__backing_field = sridk__backing_field
        if tiledk__backing_field is not None:
            self.tiledk__backing_field = tiledk__backing_field
        if vector_quality_typek__backing_field is not None:
            self.vector_quality_typek__backing_field = vector_quality_typek__backing_field
        if cache_enabledk__backing_field is not None:
            self.cache_enabledk__backing_field = cache_enabledk__backing_field
        if cluster_metadatak__backing_field is not None:
            self.cluster_metadatak__backing_field = cluster_metadatak__backing_field
        if user_friendly_projk__backing_field is not None:
            self.user_friendly_projk__backing_field = user_friendly_projk__backing_field
        if permissionsk__backing_field is not None:
            self.permissionsk__backing_field = permissionsk__backing_field
        if public_accessk__backing_field is not None:
            self.public_accessk__backing_field = public_accessk__backing_field
        if identifierk__backing_field is not None:
            self.identifierk__backing_field = identifierk__backing_field
        if pathk__backing_field is not None:
            self.pathk__backing_field = pathk__backing_field
        if metadatak__backing_field is not None:
            self.metadatak__backing_field = metadatak__backing_field
        if descriptionk__backing_field is not None:
            self.descriptionk__backing_field = descriptionk__backing_field
        if is_used_by_territory_managerk__backing_field is not None:
            self.is_used_by_territory_managerk__backing_field = is_used_by_territory_managerk__backing_field
        if server_view_countk__backing_field is not None:
            self.server_view_countk__backing_field = server_view_countk__backing_field
        if statusk__backing_field is not None:
            self.statusk__backing_field = statusk__backing_field
        if record_countk__backing_field is not None:
            self.record_countk__backing_field = record_countk__backing_field
        if idk__backing_field is not None:
            self.idk__backing_field = idk__backing_field
        if namek__backing_field is not None:
            self.namek__backing_field = namek__backing_field
        if owner_namek__backing_field is not None:
            self.owner_namek__backing_field = owner_namek__backing_field
        if creation_timek__backing_field is not None:
            self.creation_timek__backing_field = creation_timek__backing_field
        if modified_timek__backing_field is not None:
            self.modified_timek__backing_field = modified_timek__backing_field
        if folder_idk__backing_field is not None:
            self.folder_idk__backing_field = folder_idk__backing_field
        if current_user_has_modify_permissionk__backing_field is not None:
            self.current_user_has_modify_permissionk__backing_field = current_user_has_modify_permissionk__backing_field

    @property
    def data_table_idk__backing_field(self):
        """Gets the data_table_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The data_table_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._data_table_idk__backing_field

    @data_table_idk__backing_field.setter
    def data_table_idk__backing_field(self, data_table_idk__backing_field):
        """Sets the data_table_idk__backing_field of this SpatialMetadataDTO.


        :param data_table_idk__backing_field: The data_table_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._data_table_idk__backing_field = data_table_idk__backing_field

    @property
    def data_table_linking_column_idk__backing_field(self):
        """Gets the data_table_linking_column_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The data_table_linking_column_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._data_table_linking_column_idk__backing_field

    @data_table_linking_column_idk__backing_field.setter
    def data_table_linking_column_idk__backing_field(self, data_table_linking_column_idk__backing_field):
        """Sets the data_table_linking_column_idk__backing_field of this SpatialMetadataDTO.


        :param data_table_linking_column_idk__backing_field: The data_table_linking_column_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._data_table_linking_column_idk__backing_field = data_table_linking_column_idk__backing_field

    @property
    def is_unique_column_setk__backing_field(self):
        """Gets the is_unique_column_setk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The is_unique_column_setk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_unique_column_setk__backing_field

    @is_unique_column_setk__backing_field.setter
    def is_unique_column_setk__backing_field(self, is_unique_column_setk__backing_field):
        """Sets the is_unique_column_setk__backing_field of this SpatialMetadataDTO.


        :param is_unique_column_setk__backing_field: The is_unique_column_setk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: bool
        """

        self._is_unique_column_setk__backing_field = is_unique_column_setk__backing_field

    @property
    def spatial_source_columnk__backing_field(self):
        """Gets the spatial_source_columnk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The spatial_source_columnk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._spatial_source_columnk__backing_field

    @spatial_source_columnk__backing_field.setter
    def spatial_source_columnk__backing_field(self, spatial_source_columnk__backing_field):
        """Sets the spatial_source_columnk__backing_field of this SpatialMetadataDTO.


        :param spatial_source_columnk__backing_field: The spatial_source_columnk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._spatial_source_columnk__backing_field = spatial_source_columnk__backing_field

    @property
    def spatial_table_refk__backing_field(self):
        """Gets the spatial_table_refk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The spatial_table_refk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._spatial_table_refk__backing_field

    @spatial_table_refk__backing_field.setter
    def spatial_table_refk__backing_field(self, spatial_table_refk__backing_field):
        """Sets the spatial_table_refk__backing_field of this SpatialMetadataDTO.


        :param spatial_table_refk__backing_field: The spatial_table_refk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._spatial_table_refk__backing_field = spatial_table_refk__backing_field

    @property
    def unique_id_columnk__backing_field(self):
        """Gets the unique_id_columnk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The unique_id_columnk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_columnk__backing_field

    @unique_id_columnk__backing_field.setter
    def unique_id_columnk__backing_field(self, unique_id_columnk__backing_field):
        """Sets the unique_id_columnk__backing_field of this SpatialMetadataDTO.


        :param unique_id_columnk__backing_field: The unique_id_columnk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._unique_id_columnk__backing_field = unique_id_columnk__backing_field

    @property
    def proj4k__backing_field(self):
        """Gets the proj4k__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The proj4k__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._proj4k__backing_field

    @proj4k__backing_field.setter
    def proj4k__backing_field(self, proj4k__backing_field):
        """Sets the proj4k__backing_field of this SpatialMetadataDTO.


        :param proj4k__backing_field: The proj4k__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._proj4k__backing_field = proj4k__backing_field

    @property
    def geometry_typek__backing_field(self):
        """Gets the geometry_typek__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The geometry_typek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: int
        """
        return self._geometry_typek__backing_field

    @geometry_typek__backing_field.setter
    def geometry_typek__backing_field(self, geometry_typek__backing_field):
        """Sets the geometry_typek__backing_field of this SpatialMetadataDTO.


        :param geometry_typek__backing_field: The geometry_typek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if geometry_typek__backing_field not in allowed_values:
            raise ValueError(
                "Invalid value for `geometry_typek__backing_field` ({0}), must be one of {1}"  # noqa: E501
                .format(geometry_typek__backing_field, allowed_values)
            )

        self._geometry_typek__backing_field = geometry_typek__backing_field

    @property
    def map_use_countk__backing_field(self):
        """Gets the map_use_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The map_use_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: int
        """
        return self._map_use_countk__backing_field

    @map_use_countk__backing_field.setter
    def map_use_countk__backing_field(self, map_use_countk__backing_field):
        """Sets the map_use_countk__backing_field of this SpatialMetadataDTO.


        :param map_use_countk__backing_field: The map_use_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: int
        """

        self._map_use_countk__backing_field = map_use_countk__backing_field

    @property
    def min_xk__backing_field(self):
        """Gets the min_xk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The min_xk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: float
        """
        return self._min_xk__backing_field

    @min_xk__backing_field.setter
    def min_xk__backing_field(self, min_xk__backing_field):
        """Sets the min_xk__backing_field of this SpatialMetadataDTO.


        :param min_xk__backing_field: The min_xk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: float
        """

        self._min_xk__backing_field = min_xk__backing_field

    @property
    def min_yk__backing_field(self):
        """Gets the min_yk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The min_yk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: float
        """
        return self._min_yk__backing_field

    @min_yk__backing_field.setter
    def min_yk__backing_field(self, min_yk__backing_field):
        """Sets the min_yk__backing_field of this SpatialMetadataDTO.


        :param min_yk__backing_field: The min_yk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: float
        """

        self._min_yk__backing_field = min_yk__backing_field

    @property
    def max_xk__backing_field(self):
        """Gets the max_xk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The max_xk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: float
        """
        return self._max_xk__backing_field

    @max_xk__backing_field.setter
    def max_xk__backing_field(self, max_xk__backing_field):
        """Sets the max_xk__backing_field of this SpatialMetadataDTO.


        :param max_xk__backing_field: The max_xk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: float
        """

        self._max_xk__backing_field = max_xk__backing_field

    @property
    def max_yk__backing_field(self):
        """Gets the max_yk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The max_yk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: float
        """
        return self._max_yk__backing_field

    @max_yk__backing_field.setter
    def max_yk__backing_field(self, max_yk__backing_field):
        """Sets the max_yk__backing_field of this SpatialMetadataDTO.


        :param max_yk__backing_field: The max_yk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: float
        """

        self._max_yk__backing_field = max_yk__backing_field

    @property
    def sridk__backing_field(self):
        """Gets the sridk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The sridk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: int
        """
        return self._sridk__backing_field

    @sridk__backing_field.setter
    def sridk__backing_field(self, sridk__backing_field):
        """Sets the sridk__backing_field of this SpatialMetadataDTO.


        :param sridk__backing_field: The sridk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: int
        """

        self._sridk__backing_field = sridk__backing_field

    @property
    def tiledk__backing_field(self):
        """Gets the tiledk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The tiledk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._tiledk__backing_field

    @tiledk__backing_field.setter
    def tiledk__backing_field(self, tiledk__backing_field):
        """Sets the tiledk__backing_field of this SpatialMetadataDTO.


        :param tiledk__backing_field: The tiledk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: bool
        """

        self._tiledk__backing_field = tiledk__backing_field

    @property
    def vector_quality_typek__backing_field(self):
        """Gets the vector_quality_typek__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The vector_quality_typek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: int
        """
        return self._vector_quality_typek__backing_field

    @vector_quality_typek__backing_field.setter
    def vector_quality_typek__backing_field(self, vector_quality_typek__backing_field):
        """Sets the vector_quality_typek__backing_field of this SpatialMetadataDTO.


        :param vector_quality_typek__backing_field: The vector_quality_typek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 4, 8, 16, 32]  # noqa: E501
        if vector_quality_typek__backing_field not in allowed_values:
            raise ValueError(
                "Invalid value for `vector_quality_typek__backing_field` ({0}), must be one of {1}"  # noqa: E501
                .format(vector_quality_typek__backing_field, allowed_values)
            )

        self._vector_quality_typek__backing_field = vector_quality_typek__backing_field

    @property
    def cache_enabledk__backing_field(self):
        """Gets the cache_enabledk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The cache_enabledk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._cache_enabledk__backing_field

    @cache_enabledk__backing_field.setter
    def cache_enabledk__backing_field(self, cache_enabledk__backing_field):
        """Sets the cache_enabledk__backing_field of this SpatialMetadataDTO.


        :param cache_enabledk__backing_field: The cache_enabledk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: bool
        """

        self._cache_enabledk__backing_field = cache_enabledk__backing_field

    @property
    def cluster_metadatak__backing_field(self):
        """Gets the cluster_metadatak__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The cluster_metadatak__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: ClusterMetadataDTO
        """
        return self._cluster_metadatak__backing_field

    @cluster_metadatak__backing_field.setter
    def cluster_metadatak__backing_field(self, cluster_metadatak__backing_field):
        """Sets the cluster_metadatak__backing_field of this SpatialMetadataDTO.


        :param cluster_metadatak__backing_field: The cluster_metadatak__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: ClusterMetadataDTO
        """

        self._cluster_metadatak__backing_field = cluster_metadatak__backing_field

    @property
    def user_friendly_projk__backing_field(self):
        """Gets the user_friendly_projk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The user_friendly_projk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_friendly_projk__backing_field

    @user_friendly_projk__backing_field.setter
    def user_friendly_projk__backing_field(self, user_friendly_projk__backing_field):
        """Sets the user_friendly_projk__backing_field of this SpatialMetadataDTO.


        :param user_friendly_projk__backing_field: The user_friendly_projk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._user_friendly_projk__backing_field = user_friendly_projk__backing_field

    @property
    def permissionsk__backing_field(self):
        """Gets the permissionsk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The permissionsk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: list[PermissionPairComplexDTO]
        """
        return self._permissionsk__backing_field

    @permissionsk__backing_field.setter
    def permissionsk__backing_field(self, permissionsk__backing_field):
        """Sets the permissionsk__backing_field of this SpatialMetadataDTO.


        :param permissionsk__backing_field: The permissionsk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: list[PermissionPairComplexDTO]
        """

        self._permissionsk__backing_field = permissionsk__backing_field

    @property
    def public_accessk__backing_field(self):
        """Gets the public_accessk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The public_accessk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._public_accessk__backing_field

    @public_accessk__backing_field.setter
    def public_accessk__backing_field(self, public_accessk__backing_field):
        """Sets the public_accessk__backing_field of this SpatialMetadataDTO.


        :param public_accessk__backing_field: The public_accessk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: bool
        """

        self._public_accessk__backing_field = public_accessk__backing_field

    @property
    def identifierk__backing_field(self):
        """Gets the identifierk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The identifierk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._identifierk__backing_field

    @identifierk__backing_field.setter
    def identifierk__backing_field(self, identifierk__backing_field):
        """Sets the identifierk__backing_field of this SpatialMetadataDTO.


        :param identifierk__backing_field: The identifierk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._identifierk__backing_field = identifierk__backing_field

    @property
    def pathk__backing_field(self):
        """Gets the pathk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The pathk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._pathk__backing_field

    @pathk__backing_field.setter
    def pathk__backing_field(self, pathk__backing_field):
        """Sets the pathk__backing_field of this SpatialMetadataDTO.


        :param pathk__backing_field: The pathk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._pathk__backing_field = pathk__backing_field

    @property
    def metadatak__backing_field(self):
        """Gets the metadatak__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The metadatak__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._metadatak__backing_field

    @metadatak__backing_field.setter
    def metadatak__backing_field(self, metadatak__backing_field):
        """Sets the metadatak__backing_field of this SpatialMetadataDTO.


        :param metadatak__backing_field: The metadatak__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._metadatak__backing_field = metadatak__backing_field

    @property
    def descriptionk__backing_field(self):
        """Gets the descriptionk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The descriptionk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._descriptionk__backing_field

    @descriptionk__backing_field.setter
    def descriptionk__backing_field(self, descriptionk__backing_field):
        """Sets the descriptionk__backing_field of this SpatialMetadataDTO.


        :param descriptionk__backing_field: The descriptionk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._descriptionk__backing_field = descriptionk__backing_field

    @property
    def is_used_by_territory_managerk__backing_field(self):
        """Gets the is_used_by_territory_managerk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The is_used_by_territory_managerk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_by_territory_managerk__backing_field

    @is_used_by_territory_managerk__backing_field.setter
    def is_used_by_territory_managerk__backing_field(self, is_used_by_territory_managerk__backing_field):
        """Sets the is_used_by_territory_managerk__backing_field of this SpatialMetadataDTO.


        :param is_used_by_territory_managerk__backing_field: The is_used_by_territory_managerk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: bool
        """

        self._is_used_by_territory_managerk__backing_field = is_used_by_territory_managerk__backing_field

    @property
    def server_view_countk__backing_field(self):
        """Gets the server_view_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The server_view_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: int
        """
        return self._server_view_countk__backing_field

    @server_view_countk__backing_field.setter
    def server_view_countk__backing_field(self, server_view_countk__backing_field):
        """Sets the server_view_countk__backing_field of this SpatialMetadataDTO.


        :param server_view_countk__backing_field: The server_view_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: int
        """

        self._server_view_countk__backing_field = server_view_countk__backing_field

    @property
    def statusk__backing_field(self):
        """Gets the statusk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The statusk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._statusk__backing_field

    @statusk__backing_field.setter
    def statusk__backing_field(self, statusk__backing_field):
        """Sets the statusk__backing_field of this SpatialMetadataDTO.


        :param statusk__backing_field: The statusk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["READY", "NOT_READY"]  # noqa: E501
        if statusk__backing_field not in allowed_values:
            raise ValueError(
                "Invalid value for `statusk__backing_field` ({0}), must be one of {1}"  # noqa: E501
                .format(statusk__backing_field, allowed_values)
            )

        self._statusk__backing_field = statusk__backing_field

    @property
    def record_countk__backing_field(self):
        """Gets the record_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The record_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: int
        """
        return self._record_countk__backing_field

    @record_countk__backing_field.setter
    def record_countk__backing_field(self, record_countk__backing_field):
        """Sets the record_countk__backing_field of this SpatialMetadataDTO.


        :param record_countk__backing_field: The record_countk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: int
        """

        self._record_countk__backing_field = record_countk__backing_field

    @property
    def idk__backing_field(self):
        """Gets the idk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._idk__backing_field

    @idk__backing_field.setter
    def idk__backing_field(self, idk__backing_field):
        """Sets the idk__backing_field of this SpatialMetadataDTO.


        :param idk__backing_field: The idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._idk__backing_field = idk__backing_field

    @property
    def namek__backing_field(self):
        """Gets the namek__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The namek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._namek__backing_field

    @namek__backing_field.setter
    def namek__backing_field(self, namek__backing_field):
        """Sets the namek__backing_field of this SpatialMetadataDTO.


        :param namek__backing_field: The namek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._namek__backing_field = namek__backing_field

    @property
    def owner_namek__backing_field(self):
        """Gets the owner_namek__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The owner_namek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_namek__backing_field

    @owner_namek__backing_field.setter
    def owner_namek__backing_field(self, owner_namek__backing_field):
        """Sets the owner_namek__backing_field of this SpatialMetadataDTO.


        :param owner_namek__backing_field: The owner_namek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._owner_namek__backing_field = owner_namek__backing_field

    @property
    def creation_timek__backing_field(self):
        """Gets the creation_timek__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The creation_timek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timek__backing_field

    @creation_timek__backing_field.setter
    def creation_timek__backing_field(self, creation_timek__backing_field):
        """Sets the creation_timek__backing_field of this SpatialMetadataDTO.


        :param creation_timek__backing_field: The creation_timek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: datetime
        """

        self._creation_timek__backing_field = creation_timek__backing_field

    @property
    def modified_timek__backing_field(self):
        """Gets the modified_timek__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The modified_timek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_timek__backing_field

    @modified_timek__backing_field.setter
    def modified_timek__backing_field(self, modified_timek__backing_field):
        """Sets the modified_timek__backing_field of this SpatialMetadataDTO.


        :param modified_timek__backing_field: The modified_timek__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: datetime
        """

        self._modified_timek__backing_field = modified_timek__backing_field

    @property
    def folder_idk__backing_field(self):
        """Gets the folder_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The folder_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: str
        """
        return self._folder_idk__backing_field

    @folder_idk__backing_field.setter
    def folder_idk__backing_field(self, folder_idk__backing_field):
        """Sets the folder_idk__backing_field of this SpatialMetadataDTO.


        :param folder_idk__backing_field: The folder_idk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: str
        """

        self._folder_idk__backing_field = folder_idk__backing_field

    @property
    def current_user_has_modify_permissionk__backing_field(self):
        """Gets the current_user_has_modify_permissionk__backing_field of this SpatialMetadataDTO.  # noqa: E501


        :return: The current_user_has_modify_permissionk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._current_user_has_modify_permissionk__backing_field

    @current_user_has_modify_permissionk__backing_field.setter
    def current_user_has_modify_permissionk__backing_field(self, current_user_has_modify_permissionk__backing_field):
        """Sets the current_user_has_modify_permissionk__backing_field of this SpatialMetadataDTO.


        :param current_user_has_modify_permissionk__backing_field: The current_user_has_modify_permissionk__backing_field of this SpatialMetadataDTO.  # noqa: E501
        :type: bool
        """

        self._current_user_has_modify_permissionk__backing_field = current_user_has_modify_permissionk__backing_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpatialMetadataDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpatialMetadataDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

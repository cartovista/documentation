# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeatureLongLatCreateParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'longitude': 'float',
        'latitude': 'float',
        'feature_type': 'int',
        'data_columns_identifiers': 'list[str]',
        'values': 'list[object]',
        'proj4': 'str'
    }

    attribute_map = {
        'longitude': 'Longitude',
        'latitude': 'Latitude',
        'feature_type': 'FeatureType',
        'data_columns_identifiers': 'DataColumnsIdentifiers',
        'values': 'Values',
        'proj4': 'Proj4'
    }

    def __init__(self, longitude=None, latitude=None, feature_type=None, data_columns_identifiers=None, values=None, proj4=None):  # noqa: E501
        """FeatureLongLatCreateParameter - a model defined in Swagger"""  # noqa: E501

        self._longitude = None
        self._latitude = None
        self._feature_type = None
        self._data_columns_identifiers = None
        self._values = None
        self._proj4 = None
        self.discriminator = None

        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if feature_type is not None:
            self.feature_type = feature_type
        if data_columns_identifiers is not None:
            self.data_columns_identifiers = data_columns_identifiers
        if values is not None:
            self.values = values
        if proj4 is not None:
            self.proj4 = proj4

    @property
    def longitude(self):
        """Gets the longitude of this FeatureLongLatCreateParameter.  # noqa: E501


        :return: The longitude of this FeatureLongLatCreateParameter.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this FeatureLongLatCreateParameter.


        :param longitude: The longitude of this FeatureLongLatCreateParameter.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this FeatureLongLatCreateParameter.  # noqa: E501


        :return: The latitude of this FeatureLongLatCreateParameter.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this FeatureLongLatCreateParameter.


        :param latitude: The latitude of this FeatureLongLatCreateParameter.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def feature_type(self):
        """Gets the feature_type of this FeatureLongLatCreateParameter.  # noqa: E501


        :return: The feature_type of this FeatureLongLatCreateParameter.  # noqa: E501
        :rtype: int
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this FeatureLongLatCreateParameter.


        :param feature_type: The feature_type of this FeatureLongLatCreateParameter.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if feature_type not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_type` ({0}), must be one of {1}"  # noqa: E501
                .format(feature_type, allowed_values)
            )

        self._feature_type = feature_type

    @property
    def data_columns_identifiers(self):
        """Gets the data_columns_identifiers of this FeatureLongLatCreateParameter.  # noqa: E501


        :return: The data_columns_identifiers of this FeatureLongLatCreateParameter.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_columns_identifiers

    @data_columns_identifiers.setter
    def data_columns_identifiers(self, data_columns_identifiers):
        """Sets the data_columns_identifiers of this FeatureLongLatCreateParameter.


        :param data_columns_identifiers: The data_columns_identifiers of this FeatureLongLatCreateParameter.  # noqa: E501
        :type: list[str]
        """

        self._data_columns_identifiers = data_columns_identifiers

    @property
    def values(self):
        """Gets the values of this FeatureLongLatCreateParameter.  # noqa: E501


        :return: The values of this FeatureLongLatCreateParameter.  # noqa: E501
        :rtype: list[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FeatureLongLatCreateParameter.


        :param values: The values of this FeatureLongLatCreateParameter.  # noqa: E501
        :type: list[object]
        """

        self._values = values

    @property
    def proj4(self):
        """Gets the proj4 of this FeatureLongLatCreateParameter.  # noqa: E501


        :return: The proj4 of this FeatureLongLatCreateParameter.  # noqa: E501
        :rtype: str
        """
        return self._proj4

    @proj4.setter
    def proj4(self, proj4):
        """Sets the proj4 of this FeatureLongLatCreateParameter.


        :param proj4: The proj4 of this FeatureLongLatCreateParameter.  # noqa: E501
        :type: str
        """

        self._proj4 = proj4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureLongLatCreateParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureLongLatCreateParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

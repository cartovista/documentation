# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Extent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_x': 'float',
        'min_y': 'float',
        'max_x': 'float',
        'max_y': 'float'
    }

    attribute_map = {
        'min_x': 'minX',
        'min_y': 'minY',
        'max_x': 'maxX',
        'max_y': 'maxY'
    }

    def __init__(self, min_x=None, min_y=None, max_x=None, max_y=None):  # noqa: E501
        """Extent - a model defined in Swagger"""  # noqa: E501

        self._min_x = None
        self._min_y = None
        self._max_x = None
        self._max_y = None
        self.discriminator = None

        if min_x is not None:
            self.min_x = min_x
        if min_y is not None:
            self.min_y = min_y
        if max_x is not None:
            self.max_x = max_x
        if max_y is not None:
            self.max_y = max_y

    @property
    def min_x(self):
        """Gets the min_x of this Extent.  # noqa: E501


        :return: The min_x of this Extent.  # noqa: E501
        :rtype: float
        """
        return self._min_x

    @min_x.setter
    def min_x(self, min_x):
        """Sets the min_x of this Extent.


        :param min_x: The min_x of this Extent.  # noqa: E501
        :type: float
        """

        self._min_x = min_x

    @property
    def min_y(self):
        """Gets the min_y of this Extent.  # noqa: E501


        :return: The min_y of this Extent.  # noqa: E501
        :rtype: float
        """
        return self._min_y

    @min_y.setter
    def min_y(self, min_y):
        """Sets the min_y of this Extent.


        :param min_y: The min_y of this Extent.  # noqa: E501
        :type: float
        """

        self._min_y = min_y

    @property
    def max_x(self):
        """Gets the max_x of this Extent.  # noqa: E501


        :return: The max_x of this Extent.  # noqa: E501
        :rtype: float
        """
        return self._max_x

    @max_x.setter
    def max_x(self, max_x):
        """Sets the max_x of this Extent.


        :param max_x: The max_x of this Extent.  # noqa: E501
        :type: float
        """

        self._max_x = max_x

    @property
    def max_y(self):
        """Gets the max_y of this Extent.  # noqa: E501


        :return: The max_y of this Extent.  # noqa: E501
        :rtype: float
        """
        return self._max_y

    @max_y.setter
    def max_y(self, max_y):
        """Sets the max_y of this Extent.


        :param max_y: The max_y of this Extent.  # noqa: E501
        :type: float
        """

        self._max_y = max_y

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Extent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Extent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

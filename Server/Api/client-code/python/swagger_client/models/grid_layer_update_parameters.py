# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GridLayerUpdateParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_identifier': 'str',
        'name': 'str',
        'description': 'str',
        'metadata': 'str',
        'units': 'str',
        'precision': 'int'
    }

    attribute_map = {
        'unique_identifier': 'uniqueIdentifier',
        'name': 'name',
        'description': 'description',
        'metadata': 'metadata',
        'units': 'units',
        'precision': 'precision'
    }

    def __init__(self, unique_identifier=None, name=None, description=None, metadata=None, units=None, precision=None):  # noqa: E501
        """GridLayerUpdateParameters - a model defined in Swagger"""  # noqa: E501

        self._unique_identifier = None
        self._name = None
        self._description = None
        self._metadata = None
        self._units = None
        self._precision = None
        self.discriminator = None

        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if units is not None:
            self.units = units
        if precision is not None:
            self.precision = precision

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this GridLayerUpdateParameters.  # noqa: E501


        :return: The unique_identifier of this GridLayerUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this GridLayerUpdateParameters.


        :param unique_identifier: The unique_identifier of this GridLayerUpdateParameters.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def name(self):
        """Gets the name of this GridLayerUpdateParameters.  # noqa: E501


        :return: The name of this GridLayerUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GridLayerUpdateParameters.


        :param name: The name of this GridLayerUpdateParameters.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GridLayerUpdateParameters.  # noqa: E501


        :return: The description of this GridLayerUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GridLayerUpdateParameters.


        :param description: The description of this GridLayerUpdateParameters.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this GridLayerUpdateParameters.  # noqa: E501


        :return: The metadata of this GridLayerUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GridLayerUpdateParameters.


        :param metadata: The metadata of this GridLayerUpdateParameters.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def units(self):
        """Gets the units of this GridLayerUpdateParameters.  # noqa: E501


        :return: The units of this GridLayerUpdateParameters.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this GridLayerUpdateParameters.


        :param units: The units of this GridLayerUpdateParameters.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def precision(self):
        """Gets the precision of this GridLayerUpdateParameters.  # noqa: E501


        :return: The precision of this GridLayerUpdateParameters.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this GridLayerUpdateParameters.


        :param precision: The precision of this GridLayerUpdateParameters.  # noqa: E501
        :type: int
        """

        self._precision = precision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridLayerUpdateParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridLayerUpdateParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

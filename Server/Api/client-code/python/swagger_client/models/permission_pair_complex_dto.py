# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PermissionPairComplexDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'SecurityIdentityDTO',
        'permission_name': 'str',
        'secure_object_guid': 'str'
    }

    attribute_map = {
        'user': 'user',
        'permission_name': 'permissionName',
        'secure_object_guid': 'secureObjectGuid'
    }

    def __init__(self, user=None, permission_name=None, secure_object_guid=None):  # noqa: E501
        """PermissionPairComplexDTO - a model defined in Swagger"""  # noqa: E501

        self._user = None
        self._permission_name = None
        self._secure_object_guid = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if permission_name is not None:
            self.permission_name = permission_name
        if secure_object_guid is not None:
            self.secure_object_guid = secure_object_guid

    @property
    def user(self):
        """Gets the user of this PermissionPairComplexDTO.  # noqa: E501


        :return: The user of this PermissionPairComplexDTO.  # noqa: E501
        :rtype: SecurityIdentityDTO
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PermissionPairComplexDTO.


        :param user: The user of this PermissionPairComplexDTO.  # noqa: E501
        :type: SecurityIdentityDTO
        """

        self._user = user

    @property
    def permission_name(self):
        """Gets the permission_name of this PermissionPairComplexDTO.  # noqa: E501


        :return: The permission_name of this PermissionPairComplexDTO.  # noqa: E501
        :rtype: str
        """
        return self._permission_name

    @permission_name.setter
    def permission_name(self, permission_name):
        """Sets the permission_name of this PermissionPairComplexDTO.


        :param permission_name: The permission_name of this PermissionPairComplexDTO.  # noqa: E501
        :type: str
        """

        self._permission_name = permission_name

    @property
    def secure_object_guid(self):
        """Gets the secure_object_guid of this PermissionPairComplexDTO.  # noqa: E501


        :return: The secure_object_guid of this PermissionPairComplexDTO.  # noqa: E501
        :rtype: str
        """
        return self._secure_object_guid

    @secure_object_guid.setter
    def secure_object_guid(self, secure_object_guid):
        """Sets the secure_object_guid of this PermissionPairComplexDTO.


        :param secure_object_guid: The secure_object_guid of this PermissionPairComplexDTO.  # noqa: E501
        :type: str
        """

        self._secure_object_guid = secure_object_guid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionPairComplexDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionPairComplexDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

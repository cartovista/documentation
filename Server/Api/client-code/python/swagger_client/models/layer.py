# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Layer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_identifier': 'str',
        'creation_time': 'str',
        'data_table_unique_identifier': 'str',
        'description': 'str',
        'geometry_type': 'str',
        'metadata': 'str',
        'modified_time': 'str',
        'name': 'str',
        'proj4': 'str',
        'row_count': 'int',
        'system_identifier': 'str',
        'unique_id_data_column': 'str'
    }

    attribute_map = {
        'unique_identifier': 'UniqueIdentifier',
        'creation_time': 'CreationTime',
        'data_table_unique_identifier': 'DataTableUniqueIdentifier',
        'description': 'Description',
        'geometry_type': 'GeometryType',
        'metadata': 'Metadata',
        'modified_time': 'ModifiedTime',
        'name': 'Name',
        'proj4': 'Proj4',
        'row_count': 'RowCount',
        'system_identifier': 'SystemIdentifier',
        'unique_id_data_column': 'UniqueIdDataColumn'
    }

    def __init__(self, unique_identifier=None, creation_time=None, data_table_unique_identifier=None, description=None, geometry_type=None, metadata=None, modified_time=None, name=None, proj4=None, row_count=None, system_identifier=None, unique_id_data_column=None):  # noqa: E501
        """Layer - a model defined in Swagger"""  # noqa: E501

        self._unique_identifier = None
        self._creation_time = None
        self._data_table_unique_identifier = None
        self._description = None
        self._geometry_type = None
        self._metadata = None
        self._modified_time = None
        self._name = None
        self._proj4 = None
        self._row_count = None
        self._system_identifier = None
        self._unique_id_data_column = None
        self.discriminator = None

        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if creation_time is not None:
            self.creation_time = creation_time
        if data_table_unique_identifier is not None:
            self.data_table_unique_identifier = data_table_unique_identifier
        if description is not None:
            self.description = description
        if geometry_type is not None:
            self.geometry_type = geometry_type
        if metadata is not None:
            self.metadata = metadata
        if modified_time is not None:
            self.modified_time = modified_time
        if name is not None:
            self.name = name
        if proj4 is not None:
            self.proj4 = proj4
        if row_count is not None:
            self.row_count = row_count
        if system_identifier is not None:
            self.system_identifier = system_identifier
        if unique_id_data_column is not None:
            self.unique_id_data_column = unique_id_data_column

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this Layer.  # noqa: E501


        :return: The unique_identifier of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this Layer.


        :param unique_identifier: The unique_identifier of this Layer.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def creation_time(self):
        """Gets the creation_time of this Layer.  # noqa: E501


        :return: The creation_time of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Layer.


        :param creation_time: The creation_time of this Layer.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def data_table_unique_identifier(self):
        """Gets the data_table_unique_identifier of this Layer.  # noqa: E501


        :return: The data_table_unique_identifier of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._data_table_unique_identifier

    @data_table_unique_identifier.setter
    def data_table_unique_identifier(self, data_table_unique_identifier):
        """Sets the data_table_unique_identifier of this Layer.


        :param data_table_unique_identifier: The data_table_unique_identifier of this Layer.  # noqa: E501
        :type: str
        """

        self._data_table_unique_identifier = data_table_unique_identifier

    @property
    def description(self):
        """Gets the description of this Layer.  # noqa: E501


        :return: The description of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Layer.


        :param description: The description of this Layer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def geometry_type(self):
        """Gets the geometry_type of this Layer.  # noqa: E501


        :return: The geometry_type of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._geometry_type

    @geometry_type.setter
    def geometry_type(self, geometry_type):
        """Sets the geometry_type of this Layer.


        :param geometry_type: The geometry_type of this Layer.  # noqa: E501
        :type: str
        """

        self._geometry_type = geometry_type

    @property
    def metadata(self):
        """Gets the metadata of this Layer.  # noqa: E501


        :return: The metadata of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Layer.


        :param metadata: The metadata of this Layer.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def modified_time(self):
        """Gets the modified_time of this Layer.  # noqa: E501


        :return: The modified_time of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Layer.


        :param modified_time: The modified_time of this Layer.  # noqa: E501
        :type: str
        """

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this Layer.  # noqa: E501


        :return: The name of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Layer.


        :param name: The name of this Layer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def proj4(self):
        """Gets the proj4 of this Layer.  # noqa: E501


        :return: The proj4 of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._proj4

    @proj4.setter
    def proj4(self, proj4):
        """Sets the proj4 of this Layer.


        :param proj4: The proj4 of this Layer.  # noqa: E501
        :type: str
        """

        self._proj4 = proj4

    @property
    def row_count(self):
        """Gets the row_count of this Layer.  # noqa: E501


        :return: The row_count of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this Layer.


        :param row_count: The row_count of this Layer.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def system_identifier(self):
        """Gets the system_identifier of this Layer.  # noqa: E501


        :return: The system_identifier of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._system_identifier

    @system_identifier.setter
    def system_identifier(self, system_identifier):
        """Sets the system_identifier of this Layer.


        :param system_identifier: The system_identifier of this Layer.  # noqa: E501
        :type: str
        """

        self._system_identifier = system_identifier

    @property
    def unique_id_data_column(self):
        """Gets the unique_id_data_column of this Layer.  # noqa: E501


        :return: The unique_id_data_column of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_data_column

    @unique_id_data_column.setter
    def unique_id_data_column(self, unique_id_data_column):
        """Sets the unique_id_data_column of this Layer.


        :param unique_id_data_column: The unique_id_data_column of this Layer.  # noqa: E501
        :type: str
        """

        self._unique_id_data_column = unique_id_data_column

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Layer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

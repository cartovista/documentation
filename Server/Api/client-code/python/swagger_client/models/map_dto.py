# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MapDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_html5_map_path_location': 'str',
        'title': 'str',
        'identifier': 'str',
        'description': 'str',
        'status': 'int',
        'type': 'int',
        'type_description': 'str',
        'spatial_meta_data_dt_os': 'list[SpatialMetadataDTO]',
        'public_access': 'bool',
        'custom_viewer': 'bool',
        'original_map_package_timestamp': 'datetime',
        'is_map_territory_ready': 'bool',
        'thumbnail_version': 'str',
        'folder_id': 'str',
        'path': 'str',
        'editable': 'bool',
        'seo_title': 'str',
        'seo_description': 'str',
        'seo_custom_html': 'str',
        'scoring_enabled': 'bool',
        'storage_path': 'str',
        'dynamic_thumbnail_url': 'str',
        'modified_thumbnail': 'str',
        'map_url': 'str',
        'language_description': 'str',
        'creation_time': 'datetime',
        'last_modified_author': 'str',
        'last_modified_time': 'datetime',
        'keywords': 'list[KeywordDTO]',
        'owner_name': 'str',
        'permissions': 'list[PermissionPairComplexDTO]',
        'current_user_has_modify_permission': 'bool',
        'representation_use_count': 'int',
        'web_application_path': 'str',
        'id': 'str'
    }

    attribute_map = {
        'config_html5_map_path_location': 'ConfigHTML5MapPathLocation',
        'title': 'Title',
        'identifier': 'Identifier',
        'description': 'Description',
        'status': 'Status',
        'type': 'Type',
        'type_description': 'TypeDescription',
        'spatial_meta_data_dt_os': 'spatialMetaDataDTOs',
        'public_access': 'PublicAccess',
        'custom_viewer': 'CustomViewer',
        'original_map_package_timestamp': 'OriginalMapPackageTimestamp',
        'is_map_territory_ready': 'IsMapTerritoryReady',
        'thumbnail_version': 'ThumbnailVersion',
        'folder_id': 'FolderId',
        'path': 'Path',
        'editable': 'Editable',
        'seo_title': 'seoTitle',
        'seo_description': 'seoDescription',
        'seo_custom_html': 'seoCustomHTML',
        'scoring_enabled': 'ScoringEnabled',
        'storage_path': 'StoragePath',
        'dynamic_thumbnail_url': 'DynamicThumbnailURL',
        'modified_thumbnail': 'ModifiedThumbnail',
        'map_url': 'MapUrl',
        'language_description': 'LanguageDescription',
        'creation_time': 'CreationTime',
        'last_modified_author': 'LastModifiedAuthor',
        'last_modified_time': 'LastModifiedTime',
        'keywords': 'Keywords',
        'owner_name': 'OwnerName',
        'permissions': 'Permissions',
        'current_user_has_modify_permission': 'CurrentUserHasModifyPermission',
        'representation_use_count': 'RepresentationUseCount',
        'web_application_path': 'WebApplicationPath',
        'id': 'Id'
    }

    def __init__(self, config_html5_map_path_location=None, title=None, identifier=None, description=None, status=None, type=None, type_description=None, spatial_meta_data_dt_os=None, public_access=None, custom_viewer=None, original_map_package_timestamp=None, is_map_territory_ready=None, thumbnail_version=None, folder_id=None, path=None, editable=None, seo_title=None, seo_description=None, seo_custom_html=None, scoring_enabled=None, storage_path=None, dynamic_thumbnail_url=None, modified_thumbnail=None, map_url=None, language_description=None, creation_time=None, last_modified_author=None, last_modified_time=None, keywords=None, owner_name=None, permissions=None, current_user_has_modify_permission=None, representation_use_count=None, web_application_path=None, id=None):  # noqa: E501
        """MapDTO - a model defined in Swagger"""  # noqa: E501

        self._config_html5_map_path_location = None
        self._title = None
        self._identifier = None
        self._description = None
        self._status = None
        self._type = None
        self._type_description = None
        self._spatial_meta_data_dt_os = None
        self._public_access = None
        self._custom_viewer = None
        self._original_map_package_timestamp = None
        self._is_map_territory_ready = None
        self._thumbnail_version = None
        self._folder_id = None
        self._path = None
        self._editable = None
        self._seo_title = None
        self._seo_description = None
        self._seo_custom_html = None
        self._scoring_enabled = None
        self._storage_path = None
        self._dynamic_thumbnail_url = None
        self._modified_thumbnail = None
        self._map_url = None
        self._language_description = None
        self._creation_time = None
        self._last_modified_author = None
        self._last_modified_time = None
        self._keywords = None
        self._owner_name = None
        self._permissions = None
        self._current_user_has_modify_permission = None
        self._representation_use_count = None
        self._web_application_path = None
        self._id = None
        self.discriminator = None

        if config_html5_map_path_location is not None:
            self.config_html5_map_path_location = config_html5_map_path_location
        if title is not None:
            self.title = title
        if identifier is not None:
            self.identifier = identifier
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if type_description is not None:
            self.type_description = type_description
        if spatial_meta_data_dt_os is not None:
            self.spatial_meta_data_dt_os = spatial_meta_data_dt_os
        if public_access is not None:
            self.public_access = public_access
        if custom_viewer is not None:
            self.custom_viewer = custom_viewer
        if original_map_package_timestamp is not None:
            self.original_map_package_timestamp = original_map_package_timestamp
        if is_map_territory_ready is not None:
            self.is_map_territory_ready = is_map_territory_ready
        if thumbnail_version is not None:
            self.thumbnail_version = thumbnail_version
        if folder_id is not None:
            self.folder_id = folder_id
        if path is not None:
            self.path = path
        if editable is not None:
            self.editable = editable
        if seo_title is not None:
            self.seo_title = seo_title
        if seo_description is not None:
            self.seo_description = seo_description
        if seo_custom_html is not None:
            self.seo_custom_html = seo_custom_html
        if scoring_enabled is not None:
            self.scoring_enabled = scoring_enabled
        if storage_path is not None:
            self.storage_path = storage_path
        if dynamic_thumbnail_url is not None:
            self.dynamic_thumbnail_url = dynamic_thumbnail_url
        if modified_thumbnail is not None:
            self.modified_thumbnail = modified_thumbnail
        if map_url is not None:
            self.map_url = map_url
        if language_description is not None:
            self.language_description = language_description
        if creation_time is not None:
            self.creation_time = creation_time
        if last_modified_author is not None:
            self.last_modified_author = last_modified_author
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if keywords is not None:
            self.keywords = keywords
        if owner_name is not None:
            self.owner_name = owner_name
        if permissions is not None:
            self.permissions = permissions
        if current_user_has_modify_permission is not None:
            self.current_user_has_modify_permission = current_user_has_modify_permission
        if representation_use_count is not None:
            self.representation_use_count = representation_use_count
        if web_application_path is not None:
            self.web_application_path = web_application_path
        if id is not None:
            self.id = id

    @property
    def config_html5_map_path_location(self):
        """Gets the config_html5_map_path_location of this MapDTO.  # noqa: E501


        :return: The config_html5_map_path_location of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._config_html5_map_path_location

    @config_html5_map_path_location.setter
    def config_html5_map_path_location(self, config_html5_map_path_location):
        """Sets the config_html5_map_path_location of this MapDTO.


        :param config_html5_map_path_location: The config_html5_map_path_location of this MapDTO.  # noqa: E501
        :type: str
        """

        self._config_html5_map_path_location = config_html5_map_path_location

    @property
    def title(self):
        """Gets the title of this MapDTO.  # noqa: E501


        :return: The title of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MapDTO.


        :param title: The title of this MapDTO.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def identifier(self):
        """Gets the identifier of this MapDTO.  # noqa: E501


        :return: The identifier of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this MapDTO.


        :param identifier: The identifier of this MapDTO.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def description(self):
        """Gets the description of this MapDTO.  # noqa: E501


        :return: The description of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MapDTO.


        :param description: The description of this MapDTO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this MapDTO.  # noqa: E501


        :return: The status of this MapDTO.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MapDTO.


        :param status: The status of this MapDTO.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 1000]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this MapDTO.  # noqa: E501


        :return: The type of this MapDTO.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MapDTO.


        :param type: The type of this MapDTO.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def type_description(self):
        """Gets the type_description of this MapDTO.  # noqa: E501


        :return: The type_description of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._type_description

    @type_description.setter
    def type_description(self, type_description):
        """Sets the type_description of this MapDTO.


        :param type_description: The type_description of this MapDTO.  # noqa: E501
        :type: str
        """

        self._type_description = type_description

    @property
    def spatial_meta_data_dt_os(self):
        """Gets the spatial_meta_data_dt_os of this MapDTO.  # noqa: E501


        :return: The spatial_meta_data_dt_os of this MapDTO.  # noqa: E501
        :rtype: list[SpatialMetadataDTO]
        """
        return self._spatial_meta_data_dt_os

    @spatial_meta_data_dt_os.setter
    def spatial_meta_data_dt_os(self, spatial_meta_data_dt_os):
        """Sets the spatial_meta_data_dt_os of this MapDTO.


        :param spatial_meta_data_dt_os: The spatial_meta_data_dt_os of this MapDTO.  # noqa: E501
        :type: list[SpatialMetadataDTO]
        """

        self._spatial_meta_data_dt_os = spatial_meta_data_dt_os

    @property
    def public_access(self):
        """Gets the public_access of this MapDTO.  # noqa: E501


        :return: The public_access of this MapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this MapDTO.


        :param public_access: The public_access of this MapDTO.  # noqa: E501
        :type: bool
        """

        self._public_access = public_access

    @property
    def custom_viewer(self):
        """Gets the custom_viewer of this MapDTO.  # noqa: E501


        :return: The custom_viewer of this MapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._custom_viewer

    @custom_viewer.setter
    def custom_viewer(self, custom_viewer):
        """Sets the custom_viewer of this MapDTO.


        :param custom_viewer: The custom_viewer of this MapDTO.  # noqa: E501
        :type: bool
        """

        self._custom_viewer = custom_viewer

    @property
    def original_map_package_timestamp(self):
        """Gets the original_map_package_timestamp of this MapDTO.  # noqa: E501


        :return: The original_map_package_timestamp of this MapDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._original_map_package_timestamp

    @original_map_package_timestamp.setter
    def original_map_package_timestamp(self, original_map_package_timestamp):
        """Sets the original_map_package_timestamp of this MapDTO.


        :param original_map_package_timestamp: The original_map_package_timestamp of this MapDTO.  # noqa: E501
        :type: datetime
        """

        self._original_map_package_timestamp = original_map_package_timestamp

    @property
    def is_map_territory_ready(self):
        """Gets the is_map_territory_ready of this MapDTO.  # noqa: E501


        :return: The is_map_territory_ready of this MapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_map_territory_ready

    @is_map_territory_ready.setter
    def is_map_territory_ready(self, is_map_territory_ready):
        """Sets the is_map_territory_ready of this MapDTO.


        :param is_map_territory_ready: The is_map_territory_ready of this MapDTO.  # noqa: E501
        :type: bool
        """

        self._is_map_territory_ready = is_map_territory_ready

    @property
    def thumbnail_version(self):
        """Gets the thumbnail_version of this MapDTO.  # noqa: E501


        :return: The thumbnail_version of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_version

    @thumbnail_version.setter
    def thumbnail_version(self, thumbnail_version):
        """Sets the thumbnail_version of this MapDTO.


        :param thumbnail_version: The thumbnail_version of this MapDTO.  # noqa: E501
        :type: str
        """

        self._thumbnail_version = thumbnail_version

    @property
    def folder_id(self):
        """Gets the folder_id of this MapDTO.  # noqa: E501


        :return: The folder_id of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this MapDTO.


        :param folder_id: The folder_id of this MapDTO.  # noqa: E501
        :type: str
        """

        self._folder_id = folder_id

    @property
    def path(self):
        """Gets the path of this MapDTO.  # noqa: E501


        :return: The path of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MapDTO.


        :param path: The path of this MapDTO.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def editable(self):
        """Gets the editable of this MapDTO.  # noqa: E501


        :return: The editable of this MapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this MapDTO.


        :param editable: The editable of this MapDTO.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def seo_title(self):
        """Gets the seo_title of this MapDTO.  # noqa: E501


        :return: The seo_title of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._seo_title

    @seo_title.setter
    def seo_title(self, seo_title):
        """Sets the seo_title of this MapDTO.


        :param seo_title: The seo_title of this MapDTO.  # noqa: E501
        :type: str
        """

        self._seo_title = seo_title

    @property
    def seo_description(self):
        """Gets the seo_description of this MapDTO.  # noqa: E501


        :return: The seo_description of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._seo_description

    @seo_description.setter
    def seo_description(self, seo_description):
        """Sets the seo_description of this MapDTO.


        :param seo_description: The seo_description of this MapDTO.  # noqa: E501
        :type: str
        """

        self._seo_description = seo_description

    @property
    def seo_custom_html(self):
        """Gets the seo_custom_html of this MapDTO.  # noqa: E501


        :return: The seo_custom_html of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._seo_custom_html

    @seo_custom_html.setter
    def seo_custom_html(self, seo_custom_html):
        """Sets the seo_custom_html of this MapDTO.


        :param seo_custom_html: The seo_custom_html of this MapDTO.  # noqa: E501
        :type: str
        """

        self._seo_custom_html = seo_custom_html

    @property
    def scoring_enabled(self):
        """Gets the scoring_enabled of this MapDTO.  # noqa: E501


        :return: The scoring_enabled of this MapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._scoring_enabled

    @scoring_enabled.setter
    def scoring_enabled(self, scoring_enabled):
        """Sets the scoring_enabled of this MapDTO.


        :param scoring_enabled: The scoring_enabled of this MapDTO.  # noqa: E501
        :type: bool
        """

        self._scoring_enabled = scoring_enabled

    @property
    def storage_path(self):
        """Gets the storage_path of this MapDTO.  # noqa: E501


        :return: The storage_path of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._storage_path

    @storage_path.setter
    def storage_path(self, storage_path):
        """Sets the storage_path of this MapDTO.


        :param storage_path: The storage_path of this MapDTO.  # noqa: E501
        :type: str
        """

        self._storage_path = storage_path

    @property
    def dynamic_thumbnail_url(self):
        """Gets the dynamic_thumbnail_url of this MapDTO.  # noqa: E501


        :return: The dynamic_thumbnail_url of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_thumbnail_url

    @dynamic_thumbnail_url.setter
    def dynamic_thumbnail_url(self, dynamic_thumbnail_url):
        """Sets the dynamic_thumbnail_url of this MapDTO.


        :param dynamic_thumbnail_url: The dynamic_thumbnail_url of this MapDTO.  # noqa: E501
        :type: str
        """

        self._dynamic_thumbnail_url = dynamic_thumbnail_url

    @property
    def modified_thumbnail(self):
        """Gets the modified_thumbnail of this MapDTO.  # noqa: E501


        :return: The modified_thumbnail of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._modified_thumbnail

    @modified_thumbnail.setter
    def modified_thumbnail(self, modified_thumbnail):
        """Sets the modified_thumbnail of this MapDTO.


        :param modified_thumbnail: The modified_thumbnail of this MapDTO.  # noqa: E501
        :type: str
        """
        if modified_thumbnail is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', modified_thumbnail):  # noqa: E501
            raise ValueError(r"Invalid value for `modified_thumbnail`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._modified_thumbnail = modified_thumbnail

    @property
    def map_url(self):
        """Gets the map_url of this MapDTO.  # noqa: E501


        :return: The map_url of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._map_url

    @map_url.setter
    def map_url(self, map_url):
        """Sets the map_url of this MapDTO.


        :param map_url: The map_url of this MapDTO.  # noqa: E501
        :type: str
        """

        self._map_url = map_url

    @property
    def language_description(self):
        """Gets the language_description of this MapDTO.  # noqa: E501


        :return: The language_description of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._language_description

    @language_description.setter
    def language_description(self, language_description):
        """Sets the language_description of this MapDTO.


        :param language_description: The language_description of this MapDTO.  # noqa: E501
        :type: str
        """

        self._language_description = language_description

    @property
    def creation_time(self):
        """Gets the creation_time of this MapDTO.  # noqa: E501


        :return: The creation_time of this MapDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MapDTO.


        :param creation_time: The creation_time of this MapDTO.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def last_modified_author(self):
        """Gets the last_modified_author of this MapDTO.  # noqa: E501


        :return: The last_modified_author of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_author

    @last_modified_author.setter
    def last_modified_author(self, last_modified_author):
        """Sets the last_modified_author of this MapDTO.


        :param last_modified_author: The last_modified_author of this MapDTO.  # noqa: E501
        :type: str
        """

        self._last_modified_author = last_modified_author

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this MapDTO.  # noqa: E501


        :return: The last_modified_time of this MapDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this MapDTO.


        :param last_modified_time: The last_modified_time of this MapDTO.  # noqa: E501
        :type: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def keywords(self):
        """Gets the keywords of this MapDTO.  # noqa: E501


        :return: The keywords of this MapDTO.  # noqa: E501
        :rtype: list[KeywordDTO]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this MapDTO.


        :param keywords: The keywords of this MapDTO.  # noqa: E501
        :type: list[KeywordDTO]
        """

        self._keywords = keywords

    @property
    def owner_name(self):
        """Gets the owner_name of this MapDTO.  # noqa: E501


        :return: The owner_name of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this MapDTO.


        :param owner_name: The owner_name of this MapDTO.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def permissions(self):
        """Gets the permissions of this MapDTO.  # noqa: E501


        :return: The permissions of this MapDTO.  # noqa: E501
        :rtype: list[PermissionPairComplexDTO]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this MapDTO.


        :param permissions: The permissions of this MapDTO.  # noqa: E501
        :type: list[PermissionPairComplexDTO]
        """

        self._permissions = permissions

    @property
    def current_user_has_modify_permission(self):
        """Gets the current_user_has_modify_permission of this MapDTO.  # noqa: E501


        :return: The current_user_has_modify_permission of this MapDTO.  # noqa: E501
        :rtype: bool
        """
        return self._current_user_has_modify_permission

    @current_user_has_modify_permission.setter
    def current_user_has_modify_permission(self, current_user_has_modify_permission):
        """Sets the current_user_has_modify_permission of this MapDTO.


        :param current_user_has_modify_permission: The current_user_has_modify_permission of this MapDTO.  # noqa: E501
        :type: bool
        """

        self._current_user_has_modify_permission = current_user_has_modify_permission

    @property
    def representation_use_count(self):
        """Gets the representation_use_count of this MapDTO.  # noqa: E501


        :return: The representation_use_count of this MapDTO.  # noqa: E501
        :rtype: int
        """
        return self._representation_use_count

    @representation_use_count.setter
    def representation_use_count(self, representation_use_count):
        """Sets the representation_use_count of this MapDTO.


        :param representation_use_count: The representation_use_count of this MapDTO.  # noqa: E501
        :type: int
        """

        self._representation_use_count = representation_use_count

    @property
    def web_application_path(self):
        """Gets the web_application_path of this MapDTO.  # noqa: E501


        :return: The web_application_path of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._web_application_path

    @web_application_path.setter
    def web_application_path(self, web_application_path):
        """Sets the web_application_path of this MapDTO.


        :param web_application_path: The web_application_path of this MapDTO.  # noqa: E501
        :type: str
        """

        self._web_application_path = web_application_path

    @property
    def id(self):
        """Gets the id of this MapDTO.  # noqa: E501


        :return: The id of this MapDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MapDTO.


        :param id: The id of this MapDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

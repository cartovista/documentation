# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FeatureApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def feature_create_features_from_geo_json(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_features_from_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_features_from_geo_json(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureGeoJSONCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_create_features_from_geo_json_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_create_features_from_geo_json_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_create_features_from_geo_json_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_features_from_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_features_from_geo_json_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureGeoJSONCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_create_features_from_geo_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_create_features_from_geo_json`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_create_features_from_geo_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/createFromGeoJSON', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_create_features_from_long_lat(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_features_from_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_features_from_long_lat(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureLongLatCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_create_features_from_long_lat_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_create_features_from_long_lat_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_create_features_from_long_lat_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_features_from_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_features_from_long_lat_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureLongLatCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_create_features_from_long_lat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_create_features_from_long_lat`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_create_features_from_long_lat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/createFromLongLat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_create_features_from_wkt(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_features_from_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_features_from_wkt(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureWKTCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_create_features_from_wkt_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_create_features_from_wkt_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_create_features_from_wkt_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_features_from_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_features_from_wkt_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureWKTCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_create_features_from_wkt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_create_features_from_wkt`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_create_features_from_wkt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/createFromWKT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_create_update_features_from_geo_json(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_update_features_from_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_update_features_from_geo_json(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureGeoJSONCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_create_update_features_from_geo_json_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_create_update_features_from_geo_json_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_create_update_features_from_geo_json_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_update_features_from_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_update_features_from_geo_json_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureGeoJSONCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_create_update_features_from_geo_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_create_update_features_from_geo_json`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_create_update_features_from_geo_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromGeoJSON', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_create_update_features_from_long_lat(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_update_features_from_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_update_features_from_long_lat(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureLongLatCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_create_update_features_from_long_lat_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_create_update_features_from_long_lat_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_create_update_features_from_long_lat_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_update_features_from_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_update_features_from_long_lat_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureLongLatCreateParameter] param: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_create_update_features_from_long_lat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_create_update_features_from_long_lat`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_create_update_features_from_long_lat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromLongLat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_create_update_features_from_wkt(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_update_features_from_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_update_features_from_wkt(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureWKTCreateParameter] param: (required)
        :return: ApiCreateUpdateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_create_update_features_from_wkt_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_create_update_features_from_wkt_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_create_update_features_from_wkt_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_create_update_features_from_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_create_update_features_from_wkt_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[FeatureWKTCreateParameter] param: (required)
        :return: ApiCreateUpdateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_create_update_features_from_wkt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_create_update_features_from_wkt`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_create_update_features_from_wkt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/createUpdateFromWKT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCreateUpdateReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_delete_feature(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_delete_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_delete_feature(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_delete_feature_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_delete_feature_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
            return data

    def feature_delete_feature_with_http_info(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_delete_feature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_delete_feature_with_http_info(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_delete_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_delete_feature`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_delete_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDeleteReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_delete_features(self, layer_identifier, feature_identifiers, **kwargs):  # noqa: E501
        """feature_delete_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_delete_features(layer_identifier, feature_identifiers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[str] feature_identifiers: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_delete_features_with_http_info(layer_identifier, feature_identifiers, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_delete_features_with_http_info(layer_identifier, feature_identifiers, **kwargs)  # noqa: E501
            return data

    def feature_delete_features_with_http_info(self, layer_identifier, feature_identifiers, **kwargs):  # noqa: E501
        """feature_delete_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_delete_features_with_http_info(layer_identifier, feature_identifiers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[str] feature_identifiers: (required)
        :return: ApiDeleteReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifiers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_delete_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_delete_features`")  # noqa: E501
        # verify the required parameter 'feature_identifiers' is set
        if ('feature_identifiers' not in params or
                params['feature_identifiers'] is None):
            raise ValueError("Missing the required parameter `feature_identifiers` when calling `feature_delete_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_identifiers' in params:
            body_params = params['feature_identifiers']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDeleteReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_feature_in_geo_json(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_get_feature_in_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_feature_in_geo_json(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: FeatureGeoJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_feature_in_geo_json_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_feature_in_geo_json_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
            return data

    def feature_get_feature_in_geo_json_with_http_info(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_get_feature_in_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_feature_in_geo_json_with_http_info(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: FeatureGeoJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_feature_in_geo_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_feature_in_geo_json`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_get_feature_in_geo_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/GeoJSON', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureGeoJSON',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_feature_in_long_lat(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_get_feature_in_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_feature_in_long_lat(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: FeatureLongLat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_feature_in_long_lat_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_feature_in_long_lat_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
            return data

    def feature_get_feature_in_long_lat_with_http_info(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_get_feature_in_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_feature_in_long_lat_with_http_info(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: FeatureLongLat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_feature_in_long_lat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_feature_in_long_lat`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_get_feature_in_long_lat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/LongLat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureLongLat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_feature_in_wkt(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_get_feature_in_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_feature_in_wkt(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: FeatureWKT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_feature_in_wkt_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_feature_in_wkt_with_http_info(layer_identifier, feature_identifier, **kwargs)  # noqa: E501
            return data

    def feature_get_feature_in_wkt_with_http_info(self, layer_identifier, feature_identifier, **kwargs):  # noqa: E501
        """feature_get_feature_in_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_feature_in_wkt_with_http_info(layer_identifier, feature_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :return: FeatureWKT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_feature_in_wkt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_feature_in_wkt`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_get_feature_in_wkt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/WKT', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureWKT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_features(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[DataRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_features_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_features_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_get_features_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[DataRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_features`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_get_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataRow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_features_in_geo_json(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features_in_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_in_geo_json(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[FeatureGeoJSON]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_features_in_geo_json_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_features_in_geo_json_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_get_features_in_geo_json_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features_in_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_in_geo_json_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[FeatureGeoJSON]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_features_in_geo_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_features_in_geo_json`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_get_features_in_geo_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/GeoJSON', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeatureGeoJSON]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_features_in_long_lat(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features_in_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_in_long_lat(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[FeatureLongLat]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_features_in_long_lat_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_features_in_long_lat_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_get_features_in_long_lat_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features_in_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_in_long_lat_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[FeatureLongLat]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_features_in_long_lat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_features_in_long_lat`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_get_features_in_long_lat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/LongLat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeatureLongLat]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_get_features_in_wkt(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features_in_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_in_wkt(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[FeatureWKT]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_get_features_in_wkt_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_get_features_in_wkt_with_http_info(layer_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_get_features_in_wkt_with_http_info(self, layer_identifier, param, **kwargs):  # noqa: E501
        """feature_get_features_in_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_get_features_in_wkt_with_http_info(layer_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param FeaturesGetParameters param: (required)
        :return: list[FeatureWKT]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_get_features_in_wkt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_get_features_in_wkt`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_get_features_in_wkt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Features/WKT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FeatureWKT]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_update_from_geo_json(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_from_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_from_geo_json(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param FeatureGeoJSONUpdateParameter param: (required)
        :return: FeatureGeoJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_update_from_geo_json_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_update_from_geo_json_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_update_from_geo_json_with_http_info(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_from_geo_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_from_geo_json_with_http_info(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param FeatureGeoJSONUpdateParameter param: (required)
        :return: FeatureGeoJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_update_from_geo_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_update_from_geo_json`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_update_from_geo_json`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_update_from_geo_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromGeoJSON', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureGeoJSON',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_update_from_long_lat(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_from_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_from_long_lat(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param FeatureLongLatUpdateParameter param: (required)
        :return: FeatureLongLat
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_update_from_long_lat_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_update_from_long_lat_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_update_from_long_lat_with_http_info(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_from_long_lat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_from_long_lat_with_http_info(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param FeatureLongLatUpdateParameter param: (required)
        :return: FeatureLongLat
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_update_from_long_lat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_update_from_long_lat`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_update_from_long_lat`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_update_from_long_lat`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateFromLongLat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureLongLat',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_update_geometry_from_wkt(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_geometry_from_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_geometry_from_wkt(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param FeatureWKTUpdateParameter param: (required)
        :return: FeatureWKT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_update_geometry_from_wkt_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_update_geometry_from_wkt_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_update_geometry_from_wkt_with_http_info(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_geometry_from_wkt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_geometry_from_wkt_with_http_info(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param FeatureWKTUpdateParameter param: (required)
        :return: FeatureWKT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_update_geometry_from_wkt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_update_geometry_from_wkt`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_update_geometry_from_wkt`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_update_geometry_from_wkt`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateGeometryFromWKT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureWKT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def feature_update_values(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_values(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param DataRowUpdateParameter param: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.feature_update_values_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.feature_update_values_with_http_info(layer_identifier, feature_identifier, param, **kwargs)  # noqa: E501
            return data

    def feature_update_values_with_http_info(self, layer_identifier, feature_identifier, param, **kwargs):  # noqa: E501
        """feature_update_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.feature_update_values_with_http_info(layer_identifier, feature_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str feature_identifier: (required)
        :param DataRowUpdateParameter param: (required)
        :return: DataRow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'feature_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method feature_update_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `feature_update_values`")  # noqa: E501
        # verify the required parameter 'feature_identifier' is set
        if ('feature_identifier' not in params or
                params['feature_identifier'] is None):
            raise ValueError("Missing the required parameter `feature_identifier` when calling `feature_update_values`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `feature_update_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'feature_identifier' in params:
            path_params['featureIdentifier'] = params['feature_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/Feature/{featureIdentifier}/updateValues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

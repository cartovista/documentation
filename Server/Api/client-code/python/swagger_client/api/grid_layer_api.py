# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GridLayerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def grid_layer_add_grid_source(self, grid_layer_id, band_number, file, **kwargs):  # noqa: E501
        """Add a grid source to an existing grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_add_grid_source(grid_layer_id, band_number, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param int band_number: The band number to select. Starts at 1. (required)
        :param file file: Upload file (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_add_grid_source_with_http_info(grid_layer_id, band_number, file, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_add_grid_source_with_http_info(grid_layer_id, band_number, file, **kwargs)  # noqa: E501
            return data

    def grid_layer_add_grid_source_with_http_info(self, grid_layer_id, band_number, file, **kwargs):  # noqa: E501
        """Add a grid source to an existing grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_add_grid_source_with_http_info(grid_layer_id, band_number, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param int band_number: The band number to select. Starts at 1. (required)
        :param file file: Upload file (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'band_number', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_add_grid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_add_grid_source`")  # noqa: E501
        # verify the required parameter 'band_number' is set
        if ('band_number' not in params or
                params['band_number'] is None):
            raise ValueError("Missing the required parameter `band_number` when calling `grid_layer_add_grid_source`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `grid_layer_add_grid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'band_number' in params:
            form_params.append(('bandNumber', params['band_number']))  # noqa: E501
        if 'file' in params:
            local_var_files['File'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_create_grid_layer(self, create_parameters, **kwargs):  # noqa: E501
        """Create a grid layer with the specified parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_create_grid_layer(create_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GridLayerCreateParameters create_parameters: The parameters used to create the grid layer. (required)
        :return: GridLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_create_grid_layer_with_http_info(create_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_create_grid_layer_with_http_info(create_parameters, **kwargs)  # noqa: E501
            return data

    def grid_layer_create_grid_layer_with_http_info(self, create_parameters, **kwargs):  # noqa: E501
        """Create a grid layer with the specified parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_create_grid_layer_with_http_info(create_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GridLayerCreateParameters create_parameters: The parameters used to create the grid layer. (required)
        :return: GridLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_create_grid_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_parameters' is set
        if ('create_parameters' not in params or
                params['create_parameters'] is None):
            raise ValueError("Missing the required parameter `create_parameters` when calling `grid_layer_create_grid_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_parameters' in params:
            body_params = params['create_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridLayer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_delete_grid_layer(self, grid_layer_id, **kwargs):  # noqa: E501
        """Delete an existing grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_delete_grid_layer(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_delete_grid_layer_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_delete_grid_layer_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_delete_grid_layer_with_http_info(self, grid_layer_id, **kwargs):  # noqa: E501
        """Delete an existing grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_delete_grid_layer_with_http_info(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_delete_grid_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_delete_grid_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_delete_grid_source(self, grid_layer_id, grid_source_id, **kwargs):  # noqa: E501
        """Delete an existing grid source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_delete_grid_source(grid_layer_id, grid_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_delete_grid_source_with_http_info(grid_layer_id, grid_source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_delete_grid_source_with_http_info(grid_layer_id, grid_source_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_delete_grid_source_with_http_info(self, grid_layer_id, grid_source_id, **kwargs):  # noqa: E501
        """Delete an existing grid source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_delete_grid_source_with_http_info(grid_layer_id, grid_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'grid_source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_delete_grid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_delete_grid_source`")  # noqa: E501
        # verify the required parameter 'grid_source_id' is set
        if ('grid_source_id' not in params or
                params['grid_source_id'] is None):
            raise ValueError("Missing the required parameter `grid_source_id` when calling `grid_layer_delete_grid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501
        if 'grid_source_id' in params:
            path_params['gridSourceId'] = params['grid_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_get_data(self, grid_layer_id, grid_source_id, **kwargs):  # noqa: E501
        """grid_layer_get_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_data(grid_layer_id, grid_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: (required)
        :param str grid_source_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_get_data_with_http_info(grid_layer_id, grid_source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_get_data_with_http_info(grid_layer_id, grid_source_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_get_data_with_http_info(self, grid_layer_id, grid_source_id, **kwargs):  # noqa: E501
        """grid_layer_get_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_data_with_http_info(grid_layer_id, grid_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: (required)
        :param str grid_source_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'grid_source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_get_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_get_data`")  # noqa: E501
        # verify the required parameter 'grid_source_id' is set
        if ('grid_source_id' not in params or
                params['grid_source_id'] is None):
            raise ValueError("Missing the required parameter `grid_source_id` when calling `grid_layer_get_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501
        if 'grid_source_id' in params:
            path_params['gridSourceId'] = params['grid_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSource/{gridSourceId}/getData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_get_grid_layer_by_id(self, grid_layer_id, **kwargs):  # noqa: E501
        """Get a grid layer by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_layer_by_id(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :return: GridLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_get_grid_layer_by_id_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_get_grid_layer_by_id_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_get_grid_layer_by_id_with_http_info(self, grid_layer_id, **kwargs):  # noqa: E501
        """Get a grid layer by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_layer_by_id_with_http_info(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :return: GridLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_get_grid_layer_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_get_grid_layer_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridLayer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_get_grid_layers(self, **kwargs):  # noqa: E501
        """Get the list of all grid layers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GridLayer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_get_grid_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_get_grid_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def grid_layer_get_grid_layers_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of all grid layers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[GridLayer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_get_grid_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GridLayer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_get_grid_source(self, grid_layer_id, grid_source_id, **kwargs):  # noqa: E501
        """Get a grid source by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_source(grid_layer_id, grid_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_get_grid_source_with_http_info(grid_layer_id, grid_source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_get_grid_source_with_http_info(grid_layer_id, grid_source_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_get_grid_source_with_http_info(self, grid_layer_id, grid_source_id, **kwargs):  # noqa: E501
        """Get a grid source by identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_source_with_http_info(grid_layer_id, grid_source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'grid_source_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_get_grid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_get_grid_source`")  # noqa: E501
        # verify the required parameter 'grid_source_id' is set
        if ('grid_source_id' not in params or
                params['grid_source_id'] is None):
            raise ValueError("Missing the required parameter `grid_source_id` when calling `grid_layer_get_grid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501
        if 'grid_source_id' in params:
            path_params['gridSourceId'] = params['grid_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_get_grid_sources_for_grid_layer(self, grid_layer_id, **kwargs):  # noqa: E501
        """Get all the grid sources associated with the grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_sources_for_grid_layer(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :return: list[GridSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_get_grid_sources_for_grid_layer_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_get_grid_sources_for_grid_layer_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_get_grid_sources_for_grid_layer_with_http_info(self, grid_layer_id, **kwargs):  # noqa: E501
        """Get all the grid sources associated with the grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_grid_sources_for_grid_layer_with_http_info(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :return: list[GridSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_get_grid_sources_for_grid_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_get_grid_sources_for_grid_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GridSource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_get_maps_by_grid_layer(self, grid_layer_id, **kwargs):  # noqa: E501
        """grid_layer_get_maps_by_grid_layer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_maps_by_grid_layer(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: (required)
        :return: list[MapDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_get_maps_by_grid_layer_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_get_maps_by_grid_layer_with_http_info(grid_layer_id, **kwargs)  # noqa: E501
            return data

    def grid_layer_get_maps_by_grid_layer_with_http_info(self, grid_layer_id, **kwargs):  # noqa: E501
        """grid_layer_get_maps_by_grid_layer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_get_maps_by_grid_layer_with_http_info(grid_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: (required)
        :return: list[MapDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_get_maps_by_grid_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_get_maps_by_grid_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/maps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MapDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_render(self, grid_layer_id, grid_source_id, param, **kwargs):  # noqa: E501
        """Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in `Styles` in the parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_render(grid_layer_id, grid_source_id, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id:  (required)
        :param str grid_source_id:  (required)
        :param GridSourceRenderParameter param:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_render_with_http_info(grid_layer_id, grid_source_id, param, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_render_with_http_info(grid_layer_id, grid_source_id, param, **kwargs)  # noqa: E501
            return data

    def grid_layer_render_with_http_info(self, grid_layer_id, grid_source_id, param, **kwargs):  # noqa: E501
        """Generates a PNG of the grid source within the extent passed in the parameters and returns it as a byte array.  The inflection points are defined in `Styles` in the parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_render_with_http_info(grid_layer_id, grid_source_id, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id:  (required)
        :param str grid_source_id:  (required)
        :param GridSourceRenderParameter param:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'grid_source_id', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_render" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_render`")  # noqa: E501
        # verify the required parameter 'grid_source_id' is set
        if ('grid_source_id' not in params or
                params['grid_source_id'] is None):
            raise ValueError("Missing the required parameter `grid_source_id` when calling `grid_layer_render`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `grid_layer_render`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501
        if 'grid_source_id' in params:
            path_params['gridSourceId'] = params['grid_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSource/{gridSourceId}/render', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_update_grid_layer(self, grid_layer_id, update_parameters, **kwargs):  # noqa: E501
        """Update the properties of an existing grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_update_grid_layer(grid_layer_id, update_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param GridLayerUpdateParameters update_parameters: The parameters to update. (required)
        :return: GridLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_update_grid_layer_with_http_info(grid_layer_id, update_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_update_grid_layer_with_http_info(grid_layer_id, update_parameters, **kwargs)  # noqa: E501
            return data

    def grid_layer_update_grid_layer_with_http_info(self, grid_layer_id, update_parameters, **kwargs):  # noqa: E501
        """Update the properties of an existing grid layer.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_update_grid_layer_with_http_info(grid_layer_id, update_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param GridLayerUpdateParameters update_parameters: The parameters to update. (required)
        :return: GridLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'update_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_update_grid_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_update_grid_layer`")  # noqa: E501
        # verify the required parameter 'update_parameters' is set
        if ('update_parameters' not in params or
                params['update_parameters'] is None):
            raise ValueError("Missing the required parameter `update_parameters` when calling `grid_layer_update_grid_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_parameters' in params:
            body_params = params['update_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridLayer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_update_grid_source(self, grid_layer_id, grid_source_id, update_parameters, **kwargs):  # noqa: E501
        """Update the properties of an existing grid source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_update_grid_source(grid_layer_id, grid_source_id, update_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :param GridSourceUpdateParameters update_parameters: The parameters to update. (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_update_grid_source_with_http_info(grid_layer_id, grid_source_id, update_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_update_grid_source_with_http_info(grid_layer_id, grid_source_id, update_parameters, **kwargs)  # noqa: E501
            return data

    def grid_layer_update_grid_source_with_http_info(self, grid_layer_id, grid_source_id, update_parameters, **kwargs):  # noqa: E501
        """Update the properties of an existing grid source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_update_grid_source_with_http_info(grid_layer_id, grid_source_id, update_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :param GridSourceUpdateParameters update_parameters: The parameters to update. (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'grid_source_id', 'update_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_update_grid_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_update_grid_source`")  # noqa: E501
        # verify the required parameter 'grid_source_id' is set
        if ('grid_source_id' not in params or
                params['grid_source_id'] is None):
            raise ValueError("Missing the required parameter `grid_source_id` when calling `grid_layer_update_grid_source`")  # noqa: E501
        # verify the required parameter 'update_parameters' is set
        if ('update_parameters' not in params or
                params['update_parameters'] is None):
            raise ValueError("Missing the required parameter `update_parameters` when calling `grid_layer_update_grid_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501
        if 'grid_source_id' in params:
            path_params['gridSourceId'] = params['grid_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_parameters' in params:
            body_params = params['update_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grid_layer_update_grid_source_geotiff(self, grid_layer_id, grid_source_id, band_number, file, **kwargs):  # noqa: E501
        """Update the geoTIFF of an existing grid source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_update_grid_source_geotiff(grid_layer_id, grid_source_id, band_number, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :param int band_number: The band number to select. Starts at 1. (required)
        :param file file: Upload file (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grid_layer_update_grid_source_geotiff_with_http_info(grid_layer_id, grid_source_id, band_number, file, **kwargs)  # noqa: E501
        else:
            (data) = self.grid_layer_update_grid_source_geotiff_with_http_info(grid_layer_id, grid_source_id, band_number, file, **kwargs)  # noqa: E501
            return data

    def grid_layer_update_grid_source_geotiff_with_http_info(self, grid_layer_id, grid_source_id, band_number, file, **kwargs):  # noqa: E501
        """Update the geoTIFF of an existing grid source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grid_layer_update_grid_source_geotiff_with_http_info(grid_layer_id, grid_source_id, band_number, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grid_layer_id: The grid layer system identifier. (required)
        :param str grid_source_id: The grid source system identifier. (required)
        :param int band_number: The band number to select. Starts at 1. (required)
        :param file file: Upload file (required)
        :return: GridSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grid_layer_id', 'grid_source_id', 'band_number', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grid_layer_update_grid_source_geotiff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grid_layer_id' is set
        if ('grid_layer_id' not in params or
                params['grid_layer_id'] is None):
            raise ValueError("Missing the required parameter `grid_layer_id` when calling `grid_layer_update_grid_source_geotiff`")  # noqa: E501
        # verify the required parameter 'grid_source_id' is set
        if ('grid_source_id' not in params or
                params['grid_source_id'] is None):
            raise ValueError("Missing the required parameter `grid_source_id` when calling `grid_layer_update_grid_source_geotiff`")  # noqa: E501
        # verify the required parameter 'band_number' is set
        if ('band_number' not in params or
                params['band_number'] is None):
            raise ValueError("Missing the required parameter `band_number` when calling `grid_layer_update_grid_source_geotiff`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `grid_layer_update_grid_source_geotiff`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grid_layer_id' in params:
            path_params['gridLayerId'] = params['grid_layer_id']  # noqa: E501
        if 'grid_source_id' in params:
            path_params['gridSourceId'] = params['grid_source_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'band_number' in params:
            form_params.append(('bandNumber', params['band_number']))  # noqa: E501
        if 'file' in params:
            local_var_files['File'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/GridLayer/{gridLayerId}/GridSources/{gridSourceId}/updateGeotiff', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GridSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

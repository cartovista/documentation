# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DataColumnApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def data_column_create_data_table_data_columns(self, data_table_identifier, parameters, **kwargs):  # noqa: E501
        """data_column_create_data_table_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_create_data_table_data_columns(data_table_identifier, parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param list[DataColumnCreateParameter] parameters: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_create_data_table_data_columns_with_http_info(data_table_identifier, parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_create_data_table_data_columns_with_http_info(data_table_identifier, parameters, **kwargs)  # noqa: E501
            return data

    def data_column_create_data_table_data_columns_with_http_info(self, data_table_identifier, parameters, **kwargs):  # noqa: E501
        """data_column_create_data_table_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_create_data_table_data_columns_with_http_info(data_table_identifier, parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param list[DataColumnCreateParameter] parameters: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_create_data_table_data_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_column_create_data_table_data_columns`")  # noqa: E501
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `data_column_create_data_table_data_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/DataTable/{dataTableIdentifier}/createDataColumns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_create_layer_data_columns(self, layer_identifier, parameters, **kwargs):  # noqa: E501
        """data_column_create_layer_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_create_layer_data_columns(layer_identifier, parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[DataColumnCreateParameter] parameters: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_create_layer_data_columns_with_http_info(layer_identifier, parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_create_layer_data_columns_with_http_info(layer_identifier, parameters, **kwargs)  # noqa: E501
            return data

    def data_column_create_layer_data_columns_with_http_info(self, layer_identifier, parameters, **kwargs):  # noqa: E501
        """data_column_create_layer_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_create_layer_data_columns_with_http_info(layer_identifier, parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param list[DataColumnCreateParameter] parameters: (required)
        :return: ApiInsertReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_create_layer_data_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `data_column_create_layer_data_columns`")  # noqa: E501
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `data_column_create_layer_data_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/createDataColumns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiInsertReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_delete_data_table_data_column(self, data_table_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_delete_data_table_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_delete_data_table_data_column(data_table_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_delete_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_delete_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_delete_data_table_data_column_with_http_info(self, data_table_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_delete_data_table_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_delete_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'data_column_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_delete_data_table_data_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_column_delete_data_table_data_column`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_delete_data_table_data_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_delete_layer_data_column(self, layer_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_delete_layer_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_delete_layer_data_column(layer_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_delete_layer_data_column_with_http_info(layer_identifier, data_column_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_delete_layer_data_column_with_http_info(layer_identifier, data_column_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_delete_layer_data_column_with_http_info(self, layer_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_delete_layer_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_delete_layer_data_column_with_http_info(layer_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'data_column_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_delete_layer_data_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `data_column_delete_layer_data_column`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_delete_layer_data_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_get_data_table_data_column(self, data_table_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_get_data_table_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_data_table_data_column(data_table_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_get_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_get_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_get_data_table_data_column_with_http_info(self, data_table_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_get_data_table_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'data_column_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_get_data_table_data_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_column_get_data_table_data_column`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_get_data_table_data_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_get_data_table_data_columns(self, data_table_identifier, **kwargs):  # noqa: E501
        """data_column_get_data_table_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_data_table_data_columns(data_table_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :return: list[DataColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_get_data_table_data_columns_with_http_info(data_table_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_get_data_table_data_columns_with_http_info(data_table_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_get_data_table_data_columns_with_http_info(self, data_table_identifier, **kwargs):  # noqa: E501
        """data_column_get_data_table_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_data_table_data_columns_with_http_info(data_table_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :return: list[DataColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_get_data_table_data_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_column_get_data_table_data_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/DataTable/{dataTableIdentifier}/DataColumns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_get_layer_data_column(self, layer_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_get_layer_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_layer_data_column(layer_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_get_layer_data_column_with_http_info(layer_identifier, data_column_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_get_layer_data_column_with_http_info(layer_identifier, data_column_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_get_layer_data_column_with_http_info(self, layer_identifier, data_column_identifier, **kwargs):  # noqa: E501
        """data_column_get_layer_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_layer_data_column_with_http_info(layer_identifier, data_column_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'data_column_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_get_layer_data_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `data_column_get_layer_data_column`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_get_layer_data_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_get_layer_data_columns(self, layer_identifier, **kwargs):  # noqa: E501
        """data_column_get_layer_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_layer_data_columns(layer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :return: list[DataColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_get_layer_data_columns_with_http_info(layer_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_get_layer_data_columns_with_http_info(layer_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_get_layer_data_columns_with_http_info(self, layer_identifier, **kwargs):  # noqa: E501
        """data_column_get_layer_data_columns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_get_layer_data_columns_with_http_info(layer_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :return: list[DataColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_get_layer_data_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `data_column_get_layer_data_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/DataColumns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_set_data_table_column_unique_identifier(self, data_table_identifier, data_column_identifier, new_identifier, **kwargs):  # noqa: E501
        """data_column_set_data_table_column_unique_identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_set_data_table_column_unique_identifier(data_table_identifier, data_column_identifier, new_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :param str new_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_set_data_table_column_unique_identifier_with_http_info(data_table_identifier, data_column_identifier, new_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_set_data_table_column_unique_identifier_with_http_info(data_table_identifier, data_column_identifier, new_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_set_data_table_column_unique_identifier_with_http_info(self, data_table_identifier, data_column_identifier, new_identifier, **kwargs):  # noqa: E501
        """data_column_set_data_table_column_unique_identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_set_data_table_column_unique_identifier_with_http_info(data_table_identifier, data_column_identifier, new_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :param str new_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'data_column_identifier', 'new_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_set_data_table_column_unique_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_column_set_data_table_column_unique_identifier`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_set_data_table_column_unique_identifier`")  # noqa: E501
        # verify the required parameter 'new_identifier' is set
        if ('new_identifier' not in params or
                params['new_identifier'] is None):
            raise ValueError("Missing the required parameter `new_identifier` when calling `data_column_set_data_table_column_unique_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []
        if 'new_identifier' in params:
            query_params.append(('newIdentifier', params['new_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}/setUniqueIdentifier', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_set_layer_column_unique_identifier(self, layer_identifier, data_column_identifier, new_identifier, **kwargs):  # noqa: E501
        """data_column_set_layer_column_unique_identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_set_layer_column_unique_identifier(layer_identifier, data_column_identifier, new_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :param str new_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_set_layer_column_unique_identifier_with_http_info(layer_identifier, data_column_identifier, new_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_set_layer_column_unique_identifier_with_http_info(layer_identifier, data_column_identifier, new_identifier, **kwargs)  # noqa: E501
            return data

    def data_column_set_layer_column_unique_identifier_with_http_info(self, layer_identifier, data_column_identifier, new_identifier, **kwargs):  # noqa: E501
        """data_column_set_layer_column_unique_identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_set_layer_column_unique_identifier_with_http_info(layer_identifier, data_column_identifier, new_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :param str new_identifier: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'data_column_identifier', 'new_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_set_layer_column_unique_identifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `data_column_set_layer_column_unique_identifier`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_set_layer_column_unique_identifier`")  # noqa: E501
        # verify the required parameter 'new_identifier' is set
        if ('new_identifier' not in params or
                params['new_identifier'] is None):
            raise ValueError("Missing the required parameter `new_identifier` when calling `data_column_set_layer_column_unique_identifier`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []
        if 'new_identifier' in params:
            query_params.append(('newIdentifier', params['new_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}/setUniqueIdentifier', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_update_data_table_data_column(self, data_table_identifier, data_column_identifier, param, **kwargs):  # noqa: E501
        """data_column_update_data_table_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_update_data_table_data_column(data_table_identifier, data_column_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :param DataColumnUpdateParameter param: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_update_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_update_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, param, **kwargs)  # noqa: E501
            return data

    def data_column_update_data_table_data_column_with_http_info(self, data_table_identifier, data_column_identifier, param, **kwargs):  # noqa: E501
        """data_column_update_data_table_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_update_data_table_data_column_with_http_info(data_table_identifier, data_column_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data_table_identifier: (required)
        :param str data_column_identifier: (required)
        :param DataColumnUpdateParameter param: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_table_identifier', 'data_column_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_update_data_table_data_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data_table_identifier' is set
        if ('data_table_identifier' not in params or
                params['data_table_identifier'] is None):
            raise ValueError("Missing the required parameter `data_table_identifier` when calling `data_column_update_data_table_data_column`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_update_data_table_data_column`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `data_column_update_data_table_data_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'data_table_identifier' in params:
            path_params['dataTableIdentifier'] = params['data_table_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/DataTable/{dataTableIdentifier}/DataColumn/{dataColumnIdentifier}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_column_update_layer_data_column(self, layer_identifier, data_column_identifier, param, **kwargs):  # noqa: E501
        """data_column_update_layer_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_update_layer_data_column(layer_identifier, data_column_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :param DataColumnUpdateParameter param: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_column_update_layer_data_column_with_http_info(layer_identifier, data_column_identifier, param, **kwargs)  # noqa: E501
        else:
            (data) = self.data_column_update_layer_data_column_with_http_info(layer_identifier, data_column_identifier, param, **kwargs)  # noqa: E501
            return data

    def data_column_update_layer_data_column_with_http_info(self, layer_identifier, data_column_identifier, param, **kwargs):  # noqa: E501
        """data_column_update_layer_data_column  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_column_update_layer_data_column_with_http_info(layer_identifier, data_column_identifier, param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str layer_identifier: (required)
        :param str data_column_identifier: (required)
        :param DataColumnUpdateParameter param: (required)
        :return: DataColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['layer_identifier', 'data_column_identifier', 'param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_column_update_layer_data_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'layer_identifier' is set
        if ('layer_identifier' not in params or
                params['layer_identifier'] is None):
            raise ValueError("Missing the required parameter `layer_identifier` when calling `data_column_update_layer_data_column`")  # noqa: E501
        # verify the required parameter 'data_column_identifier' is set
        if ('data_column_identifier' not in params or
                params['data_column_identifier'] is None):
            raise ValueError("Missing the required parameter `data_column_identifier` when calling `data_column_update_layer_data_column`")  # noqa: E501
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `data_column_update_layer_data_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'layer_identifier' in params:
            path_params['layerIdentifier'] = params['layer_identifier']  # noqa: E501
        if 'data_column_identifier' in params:
            path_params['dataColumnIdentifier'] = params['data_column_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Layer/{layerIdentifier}/DataColumn/{dataColumnIdentifier}/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    CartoVista.Server.API.v1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LocationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def location_geocode(self, address, **kwargs):  # noqa: E501
        """location_geocode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_geocode(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: (required)
        :return: list[GeocodedLocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.location_geocode_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.location_geocode_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def location_geocode_with_http_info(self, address, **kwargs):  # noqa: E501
        """location_geocode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_geocode_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: (required)
        :return: list[GeocodedLocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method location_geocode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `location_geocode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Location/geocode/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GeocodedLocation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def location_get_route_summary(self, **kwargs):  # noqa: E501
        """location_get_route_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_get_route_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float param_origin_latitude:
        :param float param_origin_longitude:
        :param float param_destination_latitude:
        :param float param_destination_longitude:
        :return: RouteSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.location_get_route_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.location_get_route_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def location_get_route_summary_with_http_info(self, **kwargs):  # noqa: E501
        """location_get_route_summary  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_get_route_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float param_origin_latitude:
        :param float param_origin_longitude:
        :param float param_destination_latitude:
        :param float param_destination_longitude:
        :return: RouteSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['param_origin_latitude', 'param_origin_longitude', 'param_destination_latitude', 'param_destination_longitude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method location_get_route_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'param_origin_latitude' in params:
            query_params.append(('param.originLatitude', params['param_origin_latitude']))  # noqa: E501
        if 'param_origin_longitude' in params:
            query_params.append(('param.originLongitude', params['param_origin_longitude']))  # noqa: E501
        if 'param_destination_latitude' in params:
            query_params.append(('param.destinationLatitude', params['param_destination_latitude']))  # noqa: E501
        if 'param_destination_longitude' in params:
            query_params.append(('param.destinationLongitude', params['param_destination_longitude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Location/route/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RouteSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def location_isochrone(self, param, **kwargs):  # noqa: E501
        """location_isochrone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_isochrone(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IsochroneParams param: (required)
        :return: Isochrone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.location_isochrone_with_http_info(param, **kwargs)  # noqa: E501
        else:
            (data) = self.location_isochrone_with_http_info(param, **kwargs)  # noqa: E501
            return data

    def location_isochrone_with_http_info(self, param, **kwargs):  # noqa: E501
        """location_isochrone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_isochrone_with_http_info(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IsochroneParams param: (required)
        :return: Isochrone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method location_isochrone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `location_isochrone`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Location/isochrone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Isochrone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def location_reverse_geocode(self, param, **kwargs):  # noqa: E501
        """location_reverse_geocode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_reverse_geocode(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReverseGeocodeParams param: (required)
        :return: list[GeocodedLocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.location_reverse_geocode_with_http_info(param, **kwargs)  # noqa: E501
        else:
            (data) = self.location_reverse_geocode_with_http_info(param, **kwargs)  # noqa: E501
            return data

    def location_reverse_geocode_with_http_info(self, param, **kwargs):  # noqa: E501
        """location_reverse_geocode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.location_reverse_geocode_with_http_info(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReverseGeocodeParams param: (required)
        :return: list[GeocodedLocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method location_reverse_geocode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'param' is set
        if ('param' not in params or
                params['param'] is None):
            raise ValueError("Missing the required parameter `param` when calling `location_reverse_geocode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/Location/reversegeocode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GeocodedLocation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
